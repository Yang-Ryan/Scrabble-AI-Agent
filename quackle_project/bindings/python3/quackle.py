# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.2.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _quackle
else:
    import _quackle

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _quackle.delete_SwigPyIterator

    def value(self):
        return _quackle.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _quackle.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _quackle.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _quackle.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _quackle.SwigPyIterator_equal(self, x)

    def copy(self):
        return _quackle.SwigPyIterator_copy(self)

    def next(self):
        return _quackle.SwigPyIterator_next(self)

    def __next__(self):
        return _quackle.SwigPyIterator___next__(self)

    def previous(self):
        return _quackle.SwigPyIterator_previous(self)

    def advance(self, n):
        return _quackle.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _quackle.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _quackle.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _quackle.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _quackle.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _quackle.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _quackle.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _quackle:
_quackle.SwigPyIterator_swigregister(SwigPyIterator)
FIXED_STRING_MAXIMUM_LENGTH = _quackle.FIXED_STRING_MAXIMUM_LENGTH
class FixedLengthString(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quackle.FixedLengthString_swiginit(self, _quackle.new_FixedLengthString(*args))

    def begin(self, *args):
        return _quackle.FixedLengthString_begin(self, *args)

    def end(self, *args):
        return _quackle.FixedLengthString_end(self, *args)

    def erase(self, i):
        return _quackle.FixedLengthString_erase(self, i)

    def length(self):
        return _quackle.FixedLengthString_length(self)

    def substr(self, pos, n):
        return _quackle.FixedLengthString_substr(self, pos, n)

    def empty(self):
        return _quackle.FixedLengthString_empty(self)

    def size(self):
        return _quackle.FixedLengthString_size(self)

    def clear(self):
        return _quackle.FixedLengthString_clear(self)

    def push_back(self, c):
        return _quackle.FixedLengthString_push_back(self, c)

    def pop_back(self):
        return _quackle.FixedLengthString_pop_back(self)

    def constData(self):
        return _quackle.FixedLengthString_constData(self)

    def compare(self, s):
        return _quackle.FixedLengthString_compare(self, s)

    def __iadd__(self, *args):
        return _quackle.FixedLengthString___iadd__(self, *args)
    maxSize = _quackle.FixedLengthString_maxSize
    __swig_destroy__ = _quackle.delete_FixedLengthString

# Register FixedLengthString in _quackle:
_quackle.FixedLengthString_swigregister(FixedLengthString)

def __add__(*args):
    return _quackle.__add__(*args)
QUACKLE_USE_WCHAR_FOR_USER_VISIBLE = _quackle.QUACKLE_USE_WCHAR_FOR_USER_VISIBLE
QUACKLE_MAXIMUM_ALPHABET_SIZE = _quackle.QUACKLE_MAXIMUM_ALPHABET_SIZE
QUACKLE_MINIMUM_ALPHABET_SIZE = _quackle.QUACKLE_MINIMUM_ALPHABET_SIZE
QUACKLE_NULL_MARK_TEXT = _quackle.QUACKLE_NULL_MARK_TEXT
QUACKLE_NULL_MARK = _quackle.QUACKLE_NULL_MARK
QUACKLE_BLANK_MARK = _quackle.QUACKLE_BLANK_MARK
QUACKLE_PLAYED_THRU_MARK = _quackle.QUACKLE_PLAYED_THRU_MARK
QUACKLE_PLAYTHRU_START_MARK = _quackle.QUACKLE_PLAYTHRU_START_MARK
QUACKLE_PLAYTHRU_END_MARK = _quackle.QUACKLE_PLAYTHRU_END_MARK
QUACKLE_FIRST_LETTER = _quackle.QUACKLE_FIRST_LETTER
QUACKLE_BLANK_OFFSET = _quackle.QUACKLE_BLANK_OFFSET
LETTER_STRING_MAXIMUM_LENGTH = _quackle.LETTER_STRING_MAXIMUM_LENGTH

def left(letterString, number):
    return _quackle.left(letterString, number)

def alphabetize(letterString):
    return _quackle.alphabetize(letterString)

def clearBlankness(letterString):
    return _quackle.clearBlankness(letterString)

def setBlankness(letterString):
    return _quackle.setBlankness(letterString)

def usedTiles(letterString):
    return _quackle.usedTiles(letterString)

def counts(*args):
    return _quackle.counts(*args)

def back(letterString):
    return _quackle.back(letterString)

def pop_back(letterString):
    return _quackle.pop_back(letterString)

def front(letterString):
    return _quackle.front(letterString)

def pop_front(letterString):
    return _quackle.pop_front(letterString)

def allButFront(letterString):
    return _quackle.allButFront(letterString)
class LetterParameter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quackle.LetterParameter_swiginit(self, _quackle.new_LetterParameter(*args))

    def text(self):
        return _quackle.LetterParameter_text(self)

    def setText(self, text):
        return _quackle.LetterParameter_setText(self, text)

    def blankText(self):
        return _quackle.LetterParameter_blankText(self)

    def setBlankText(self, blankText):
        return _quackle.LetterParameter_setBlankText(self, blankText)

    def letter(self):
        return _quackle.LetterParameter_letter(self)

    def setLetter(self, letter):
        return _quackle.LetterParameter_setLetter(self, letter)

    def score(self):
        return _quackle.LetterParameter_score(self)

    def setScore(self, score):
        return _quackle.LetterParameter_setScore(self, score)

    def count(self):
        return _quackle.LetterParameter_count(self)

    def setCount(self, count):
        return _quackle.LetterParameter_setCount(self, count)

    def isVowel(self):
        return _quackle.LetterParameter_isVowel(self)

    def setVowel(self, isVowel):
        return _quackle.LetterParameter_setVowel(self, isVowel)
    __swig_destroy__ = _quackle.delete_LetterParameter

# Register LetterParameter in _quackle:
_quackle.LetterParameter_swigregister(LetterParameter)
class AlphabetParameters(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _quackle.AlphabetParameters_swiginit(self, _quackle.new_AlphabetParameters())

    def length(self):
        return _quackle.AlphabetParameters_length(self)

    def firstLetter(self):
        return _quackle.AlphabetParameters_firstLetter(self)

    def lastLetter(self):
        return _quackle.AlphabetParameters_lastLetter(self)

    def setAlphabet(self, alphabet):
        return _quackle.AlphabetParameters_setAlphabet(self, alphabet)

    def letterParameter(self, letter):
        return _quackle.AlphabetParameters_letterParameter(self, letter)

    def setLetterParameter(self, letter, letterParameter):
        return _quackle.AlphabetParameters_setLetterParameter(self, letter, letterParameter)

    @staticmethod
    def emptyAlphabet():
        return _quackle.AlphabetParameters_emptyAlphabet()

    def setCount(self, letter, count):
        return _quackle.AlphabetParameters_setCount(self, letter, count)

    def setScore(self, letter, score):
        return _quackle.AlphabetParameters_setScore(self, letter, score)

    def isBlankLetter(self, letter):
        return _quackle.AlphabetParameters_isBlankLetter(self, letter)

    def clearBlankness(self, *args):
        return _quackle.AlphabetParameters_clearBlankness(self, *args)

    def setBlankness(self, letter):
        return _quackle.AlphabetParameters_setBlankness(self, letter)

    def isPlainLetter(self, letter):
        return _quackle.AlphabetParameters_isPlainLetter(self, letter)

    def isSomeLetter(self, letter):
        return _quackle.AlphabetParameters_isSomeLetter(self, letter)

    def count(self, letter):
        return _quackle.AlphabetParameters_count(self, letter)

    def score(self, letter):
        return _quackle.AlphabetParameters_score(self, letter)

    def isVowel(self, letter):
        return _quackle.AlphabetParameters_isVowel(self, letter)

    def userVisible(self, *args):
        return _quackle.AlphabetParameters_userVisible(self, *args)

    def encode(self, word, leftover=None):
        return _quackle.AlphabetParameters_encode(self, word, leftover)

    def alphabetName(self):
        return _quackle.AlphabetParameters_alphabetName(self)

    def setAlphabetName(self, name):
        return _quackle.AlphabetParameters_setAlphabetName(self, name)

    @staticmethod
    def findAlphabetFile(alphabet):
        return _quackle.AlphabetParameters_findAlphabetFile(alphabet)
    __swig_destroy__ = _quackle.delete_AlphabetParameters

# Register AlphabetParameters in _quackle:
_quackle.AlphabetParameters_swigregister(AlphabetParameters)
class EnglishAlphabetParameters(AlphabetParameters):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _quackle.EnglishAlphabetParameters_swiginit(self, _quackle.new_EnglishAlphabetParameters())
    __swig_destroy__ = _quackle.delete_EnglishAlphabetParameters

# Register EnglishAlphabetParameters in _quackle:
_quackle.EnglishAlphabetParameters_swigregister(EnglishAlphabetParameters)
class MoveVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _quackle.MoveVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _quackle.MoveVector___nonzero__(self)

    def __bool__(self):
        return _quackle.MoveVector___bool__(self)

    def __len__(self):
        return _quackle.MoveVector___len__(self)

    def __getslice__(self, i, j):
        return _quackle.MoveVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _quackle.MoveVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _quackle.MoveVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _quackle.MoveVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _quackle.MoveVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _quackle.MoveVector___setitem__(self, *args)

    def pop(self):
        return _quackle.MoveVector_pop(self)

    def append(self, x):
        return _quackle.MoveVector_append(self, x)

    def empty(self):
        return _quackle.MoveVector_empty(self)

    def size(self):
        return _quackle.MoveVector_size(self)

    def swap(self, v):
        return _quackle.MoveVector_swap(self, v)

    def begin(self):
        return _quackle.MoveVector_begin(self)

    def end(self):
        return _quackle.MoveVector_end(self)

    def rbegin(self):
        return _quackle.MoveVector_rbegin(self)

    def rend(self):
        return _quackle.MoveVector_rend(self)

    def clear(self):
        return _quackle.MoveVector_clear(self)

    def get_allocator(self):
        return _quackle.MoveVector_get_allocator(self)

    def pop_back(self):
        return _quackle.MoveVector_pop_back(self)

    def erase(self, *args):
        return _quackle.MoveVector_erase(self, *args)

    def __init__(self, *args):
        _quackle.MoveVector_swiginit(self, _quackle.new_MoveVector(*args))

    def push_back(self, x):
        return _quackle.MoveVector_push_back(self, x)

    def front(self):
        return _quackle.MoveVector_front(self)

    def back(self):
        return _quackle.MoveVector_back(self)

    def assign(self, n, x):
        return _quackle.MoveVector_assign(self, n, x)

    def resize(self, *args):
        return _quackle.MoveVector_resize(self, *args)

    def insert(self, *args):
        return _quackle.MoveVector_insert(self, *args)

    def reserve(self, n):
        return _quackle.MoveVector_reserve(self, n)

    def capacity(self):
        return _quackle.MoveVector_capacity(self)
    __swig_destroy__ = _quackle.delete_MoveVector

# Register MoveVector in _quackle:
_quackle.MoveVector_swigregister(MoveVector)
class PlayerVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _quackle.PlayerVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _quackle.PlayerVector___nonzero__(self)

    def __bool__(self):
        return _quackle.PlayerVector___bool__(self)

    def __len__(self):
        return _quackle.PlayerVector___len__(self)

    def __getslice__(self, i, j):
        return _quackle.PlayerVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _quackle.PlayerVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _quackle.PlayerVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _quackle.PlayerVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _quackle.PlayerVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _quackle.PlayerVector___setitem__(self, *args)

    def pop(self):
        return _quackle.PlayerVector_pop(self)

    def append(self, x):
        return _quackle.PlayerVector_append(self, x)

    def empty(self):
        return _quackle.PlayerVector_empty(self)

    def size(self):
        return _quackle.PlayerVector_size(self)

    def swap(self, v):
        return _quackle.PlayerVector_swap(self, v)

    def begin(self):
        return _quackle.PlayerVector_begin(self)

    def end(self):
        return _quackle.PlayerVector_end(self)

    def rbegin(self):
        return _quackle.PlayerVector_rbegin(self)

    def rend(self):
        return _quackle.PlayerVector_rend(self)

    def clear(self):
        return _quackle.PlayerVector_clear(self)

    def get_allocator(self):
        return _quackle.PlayerVector_get_allocator(self)

    def pop_back(self):
        return _quackle.PlayerVector_pop_back(self)

    def erase(self, *args):
        return _quackle.PlayerVector_erase(self, *args)

    def __init__(self, *args):
        _quackle.PlayerVector_swiginit(self, _quackle.new_PlayerVector(*args))

    def push_back(self, x):
        return _quackle.PlayerVector_push_back(self, x)

    def front(self):
        return _quackle.PlayerVector_front(self)

    def back(self):
        return _quackle.PlayerVector_back(self)

    def assign(self, n, x):
        return _quackle.PlayerVector_assign(self, n, x)

    def resize(self, *args):
        return _quackle.PlayerVector_resize(self, *args)

    def insert(self, *args):
        return _quackle.PlayerVector_insert(self, *args)

    def reserve(self, n):
        return _quackle.PlayerVector_reserve(self, n)

    def capacity(self):
        return _quackle.PlayerVector_capacity(self)
    __swig_destroy__ = _quackle.delete_PlayerVector

# Register PlayerVector in _quackle:
_quackle.PlayerVector_swigregister(PlayerVector)
class ProbableRackList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _quackle.ProbableRackList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _quackle.ProbableRackList___nonzero__(self)

    def __bool__(self):
        return _quackle.ProbableRackList___bool__(self)

    def __len__(self):
        return _quackle.ProbableRackList___len__(self)

    def __getslice__(self, i, j):
        return _quackle.ProbableRackList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _quackle.ProbableRackList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _quackle.ProbableRackList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _quackle.ProbableRackList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _quackle.ProbableRackList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _quackle.ProbableRackList___setitem__(self, *args)

    def pop(self):
        return _quackle.ProbableRackList_pop(self)

    def append(self, x):
        return _quackle.ProbableRackList_append(self, x)

    def empty(self):
        return _quackle.ProbableRackList_empty(self)

    def size(self):
        return _quackle.ProbableRackList_size(self)

    def swap(self, v):
        return _quackle.ProbableRackList_swap(self, v)

    def begin(self):
        return _quackle.ProbableRackList_begin(self)

    def end(self):
        return _quackle.ProbableRackList_end(self)

    def rbegin(self):
        return _quackle.ProbableRackList_rbegin(self)

    def rend(self):
        return _quackle.ProbableRackList_rend(self)

    def clear(self):
        return _quackle.ProbableRackList_clear(self)

    def get_allocator(self):
        return _quackle.ProbableRackList_get_allocator(self)

    def pop_back(self):
        return _quackle.ProbableRackList_pop_back(self)

    def erase(self, *args):
        return _quackle.ProbableRackList_erase(self, *args)

    def __init__(self, *args):
        _quackle.ProbableRackList_swiginit(self, _quackle.new_ProbableRackList(*args))

    def push_back(self, x):
        return _quackle.ProbableRackList_push_back(self, x)

    def front(self):
        return _quackle.ProbableRackList_front(self)

    def back(self):
        return _quackle.ProbableRackList_back(self)

    def assign(self, n, x):
        return _quackle.ProbableRackList_assign(self, n, x)

    def resize(self, *args):
        return _quackle.ProbableRackList_resize(self, *args)

    def insert(self, *args):
        return _quackle.ProbableRackList_insert(self, *args)

    def reserve(self, n):
        return _quackle.ProbableRackList_reserve(self, n)

    def capacity(self):
        return _quackle.ProbableRackList_capacity(self)
    __swig_destroy__ = _quackle.delete_ProbableRackList

# Register ProbableRackList in _quackle:
_quackle.ProbableRackList_swigregister(ProbableRackList)
class PositionList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _quackle.PositionList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _quackle.PositionList___nonzero__(self)

    def __bool__(self):
        return _quackle.PositionList___bool__(self)

    def __len__(self):
        return _quackle.PositionList___len__(self)

    def __getslice__(self, i, j):
        return _quackle.PositionList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _quackle.PositionList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _quackle.PositionList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _quackle.PositionList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _quackle.PositionList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _quackle.PositionList___setitem__(self, *args)

    def pop(self):
        return _quackle.PositionList_pop(self)

    def append(self, x):
        return _quackle.PositionList_append(self, x)

    def empty(self):
        return _quackle.PositionList_empty(self)

    def size(self):
        return _quackle.PositionList_size(self)

    def swap(self, v):
        return _quackle.PositionList_swap(self, v)

    def begin(self):
        return _quackle.PositionList_begin(self)

    def end(self):
        return _quackle.PositionList_end(self)

    def rbegin(self):
        return _quackle.PositionList_rbegin(self)

    def rend(self):
        return _quackle.PositionList_rend(self)

    def clear(self):
        return _quackle.PositionList_clear(self)

    def get_allocator(self):
        return _quackle.PositionList_get_allocator(self)

    def pop_back(self):
        return _quackle.PositionList_pop_back(self)

    def erase(self, *args):
        return _quackle.PositionList_erase(self, *args)

    def __init__(self, *args):
        _quackle.PositionList_swiginit(self, _quackle.new_PositionList(*args))

    def push_back(self, x):
        return _quackle.PositionList_push_back(self, x)

    def front(self):
        return _quackle.PositionList_front(self)

    def back(self):
        return _quackle.PositionList_back(self)

    def assign(self, n, x):
        return _quackle.PositionList_assign(self, n, x)

    def resize(self, *args):
        return _quackle.PositionList_resize(self, *args)

    def insert(self, *args):
        return _quackle.PositionList_insert(self, *args)

    def reserve(self, n):
        return _quackle.PositionList_reserve(self, n)

    def capacity(self):
        return _quackle.PositionList_capacity(self)
    __swig_destroy__ = _quackle.delete_PositionList

# Register PositionList in _quackle:
_quackle.PositionList_swigregister(PositionList)
class LetterParameterVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _quackle.LetterParameterVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _quackle.LetterParameterVector___nonzero__(self)

    def __bool__(self):
        return _quackle.LetterParameterVector___bool__(self)

    def __len__(self):
        return _quackle.LetterParameterVector___len__(self)

    def __getslice__(self, i, j):
        return _quackle.LetterParameterVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _quackle.LetterParameterVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _quackle.LetterParameterVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _quackle.LetterParameterVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _quackle.LetterParameterVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _quackle.LetterParameterVector___setitem__(self, *args)

    def pop(self):
        return _quackle.LetterParameterVector_pop(self)

    def append(self, x):
        return _quackle.LetterParameterVector_append(self, x)

    def empty(self):
        return _quackle.LetterParameterVector_empty(self)

    def size(self):
        return _quackle.LetterParameterVector_size(self)

    def swap(self, v):
        return _quackle.LetterParameterVector_swap(self, v)

    def begin(self):
        return _quackle.LetterParameterVector_begin(self)

    def end(self):
        return _quackle.LetterParameterVector_end(self)

    def rbegin(self):
        return _quackle.LetterParameterVector_rbegin(self)

    def rend(self):
        return _quackle.LetterParameterVector_rend(self)

    def clear(self):
        return _quackle.LetterParameterVector_clear(self)

    def get_allocator(self):
        return _quackle.LetterParameterVector_get_allocator(self)

    def pop_back(self):
        return _quackle.LetterParameterVector_pop_back(self)

    def erase(self, *args):
        return _quackle.LetterParameterVector_erase(self, *args)

    def __init__(self, *args):
        _quackle.LetterParameterVector_swiginit(self, _quackle.new_LetterParameterVector(*args))

    def push_back(self, x):
        return _quackle.LetterParameterVector_push_back(self, x)

    def front(self):
        return _quackle.LetterParameterVector_front(self)

    def back(self):
        return _quackle.LetterParameterVector_back(self)

    def assign(self, n, x):
        return _quackle.LetterParameterVector_assign(self, n, x)

    def resize(self, *args):
        return _quackle.LetterParameterVector_resize(self, *args)

    def insert(self, *args):
        return _quackle.LetterParameterVector_insert(self, *args)

    def reserve(self, n):
        return _quackle.LetterParameterVector_reserve(self, n)

    def capacity(self):
        return _quackle.LetterParameterVector_capacity(self)
    __swig_destroy__ = _quackle.delete_LetterParameterVector

# Register LetterParameterVector in _quackle:
_quackle.LetterParameterVector_swigregister(LetterParameterVector)
class LetterStringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _quackle.LetterStringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _quackle.LetterStringVector___nonzero__(self)

    def __bool__(self):
        return _quackle.LetterStringVector___bool__(self)

    def __len__(self):
        return _quackle.LetterStringVector___len__(self)

    def __getslice__(self, i, j):
        return _quackle.LetterStringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _quackle.LetterStringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _quackle.LetterStringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _quackle.LetterStringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _quackle.LetterStringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _quackle.LetterStringVector___setitem__(self, *args)

    def pop(self):
        return _quackle.LetterStringVector_pop(self)

    def append(self, x):
        return _quackle.LetterStringVector_append(self, x)

    def empty(self):
        return _quackle.LetterStringVector_empty(self)

    def size(self):
        return _quackle.LetterStringVector_size(self)

    def swap(self, v):
        return _quackle.LetterStringVector_swap(self, v)

    def begin(self):
        return _quackle.LetterStringVector_begin(self)

    def end(self):
        return _quackle.LetterStringVector_end(self)

    def rbegin(self):
        return _quackle.LetterStringVector_rbegin(self)

    def rend(self):
        return _quackle.LetterStringVector_rend(self)

    def clear(self):
        return _quackle.LetterStringVector_clear(self)

    def get_allocator(self):
        return _quackle.LetterStringVector_get_allocator(self)

    def pop_back(self):
        return _quackle.LetterStringVector_pop_back(self)

    def erase(self, *args):
        return _quackle.LetterStringVector_erase(self, *args)

    def __init__(self, *args):
        _quackle.LetterStringVector_swiginit(self, _quackle.new_LetterStringVector(*args))

    def push_back(self, x):
        return _quackle.LetterStringVector_push_back(self, x)

    def front(self):
        return _quackle.LetterStringVector_front(self)

    def back(self):
        return _quackle.LetterStringVector_back(self)

    def assign(self, n, x):
        return _quackle.LetterStringVector_assign(self, n, x)

    def resize(self, *args):
        return _quackle.LetterStringVector_resize(self, *args)

    def insert(self, *args):
        return _quackle.LetterStringVector_insert(self, *args)

    def reserve(self, n):
        return _quackle.LetterStringVector_reserve(self, n)

    def capacity(self):
        return _quackle.LetterStringVector_capacity(self)
    __swig_destroy__ = _quackle.delete_LetterStringVector

# Register LetterStringVector in _quackle:
_quackle.LetterStringVector_swigregister(LetterStringVector)
class Move(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Place = _quackle.Move_Place
    PlaceError = _quackle.Move_PlaceError
    Exchange = _quackle.Move_Exchange
    BlindExchange = _quackle.Move_BlindExchange
    Pass = _quackle.Move_Pass
    UnusedTilesBonus = _quackle.Move_UnusedTilesBonus
    UnusedTilesBonusError = _quackle.Move_UnusedTilesBonusError
    TimePenalty = _quackle.Move_TimePenalty
    Nonmove = _quackle.Move_Nonmove
    score = property(_quackle.Move_score_get, _quackle.Move_score_set)
    isBingo = property(_quackle.Move_isBingo_get, _quackle.Move_isBingo_set)

    def effectiveScore(self):
        return _quackle.Move_effectiveScore(self)
    equity = property(_quackle.Move_equity_get, _quackle.Move_equity_set)
    win = property(_quackle.Move_win_get, _quackle.Move_win_set)
    possibleWin = property(_quackle.Move_possibleWin_get, _quackle.Move_possibleWin_set)
    action = property(_quackle.Move_action_get, _quackle.Move_action_set)
    horizontal = property(_quackle.Move_horizontal_get, _quackle.Move_horizontal_set)
    startrow = property(_quackle.Move_startrow_get, _quackle.Move_startrow_set)
    startcol = property(_quackle.Move_startcol_get, _quackle.Move_startcol_set)

    def isAMove(self):
        return _quackle.Move_isAMove(self)

    def setTiles(self, tiles):
        return _quackle.Move_setTiles(self, tiles)

    def setPrettyTiles(self, prettyTiles):
        return _quackle.Move_setPrettyTiles(self, prettyTiles)

    def prettyTiles(self):
        return _quackle.Move_prettyTiles(self)

    def usedTiles(self):
        return _quackle.Move_usedTiles(self)

    def wordTiles(self):
        return _quackle.Move_wordTiles(self)

    def wordTilesWithNoPlayThru(self):
        return _quackle.Move_wordTilesWithNoPlayThru(self)

    def tiles(self):
        return _quackle.Move_tiles(self)

    def isChallengedPhoney(self):
        return _quackle.Move_isChallengedPhoney(self)

    def setIsChallengedPhoney(self, isChallengedPhoney):
        return _quackle.Move_setIsChallengedPhoney(self, isChallengedPhoney)

    def scoreAddition(self):
        return _quackle.Move_scoreAddition(self)

    def setScoreAddition(self, scoreAddition):
        return _quackle.Move_setScoreAddition(self, scoreAddition)

    @staticmethod
    def isAlreadyOnBoard(letter):
        return _quackle.Move_isAlreadyOnBoard(letter)

    def xml(self):
        return _quackle.Move_xml(self)

    def toString(self):
        return _quackle.Move_toString(self)

    def debugString(self):
        return _quackle.Move_debugString(self)

    def positionString(self):
        return _quackle.Move_positionString(self)

    @staticmethod
    def createPlaceMove(*args):
        return _quackle.Move_createPlaceMove(*args)

    @staticmethod
    def createChallengedPhoney(*args):
        return _quackle.Move_createChallengedPhoney(*args)

    @staticmethod
    def createExchangeMove(tilesToExchange, isBlind):
        return _quackle.Move_createExchangeMove(tilesToExchange, isBlind)

    @staticmethod
    def createUnusedTilesBonus(unusedTiles, bonus):
        return _quackle.Move_createUnusedTilesBonus(unusedTiles, bonus)

    @staticmethod
    def createTimePenalty(penalty):
        return _quackle.Move_createTimePenalty(penalty)

    @staticmethod
    def createPassMove():
        return _quackle.Move_createPassMove()

    @staticmethod
    def createNonmove():
        return _quackle.Move_createNonmove()

    def __init__(self):
        _quackle.Move_swiginit(self, _quackle.new_Move())
    __swig_destroy__ = _quackle.delete_Move

# Register Move in _quackle:
_quackle.Move_swigregister(Move)
class MoveList(MoveVector):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Equity = _quackle.MoveList_Equity
    Score = _quackle.MoveList_Score
    Alphabetical = _quackle.MoveList_Alphabetical
    Win = _quackle.MoveList_Win

    @staticmethod
    def sort(*args):
        return _quackle.MoveList_sort(*args)

    @staticmethod
    def sortNonReverse(*args):
        return _quackle.MoveList_sortNonReverse(*args)

    @staticmethod
    def winComparator(move1, move2):
        return _quackle.MoveList_winComparator(move1, move2)

    @staticmethod
    def equityComparator(move1, move2):
        return _quackle.MoveList_equityComparator(move1, move2)

    @staticmethod
    def scoreComparator(move1, move2):
        return _quackle.MoveList_scoreComparator(move1, move2)

    @staticmethod
    def alphabeticalComparator(move1, move2):
        return _quackle.MoveList_alphabeticalComparator(move1, move2)

    @staticmethod
    def wordPosComparator(move1, move2):
        return _quackle.MoveList_wordPosComparator(move1, move2)

    def contains(self, move):
        return _quackle.MoveList_contains(self, move)

    def __init__(self):
        _quackle.MoveList_swiginit(self, _quackle.new_MoveList())
    __swig_destroy__ = _quackle.delete_MoveList

# Register MoveList in _quackle:
_quackle.MoveList_swigregister(MoveList)
class Rack(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quackle.Rack_swiginit(self, _quackle.new_Rack(*args))

    def setTiles(self, tiles):
        return _quackle.Rack_setTiles(self, tiles)

    def tiles(self):
        return _quackle.Rack_tiles(self)

    def alphaTiles(self):
        return _quackle.Rack_alphaTiles(self)

    def empty(self):
        return _quackle.Rack_empty(self)

    def equals(self, rack):
        return _quackle.Rack_equals(self, rack)

    def size(self):
        return _quackle.Rack_size(self)

    def unload(self, used):
        return _quackle.Rack_unload(self, used)

    def load(self, tiles):
        return _quackle.Rack_load(self, tiles)

    def contains(self, used):
        return _quackle.Rack_contains(self, used)

    def shuffle(self):
        return _quackle.Rack_shuffle(self)

    def score(self):
        return _quackle.Rack_score(self)

    def xml(self):
        return _quackle.Rack_xml(self)

    def toString(self):
        return _quackle.Rack_toString(self)
    __swig_destroy__ = _quackle.delete_Rack

# Register Rack in _quackle:
_quackle.Rack_swigregister(Rack)
class Bag(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quackle.Bag_swiginit(self, _quackle.new_Bag(*args))

    def clear(self):
        return _quackle.Bag_clear(self)

    def exch(self, move, rack):
        return _quackle.Bag_exch(self, move, rack)

    def pluck(self):
        return _quackle.Bag_pluck(self)

    def removeLetters(self, *args):
        return _quackle.Bag_removeLetters(self, *args)

    def removeLetter(self, letter):
        return _quackle.Bag_removeLetter(self, letter)

    def letterCounts(self, countsArray):
        return _quackle.Bag_letterCounts(self, countsArray)

    def toss(self, *args):
        return _quackle.Bag_toss(self, *args)

    def refill(self, *args):
        return _quackle.Bag_refill(self, *args)

    def prepareFullBag(self):
        return _quackle.Bag_prepareFullBag(self)

    def fullBagTileCount(self):
        return _quackle.Bag_fullBagTileCount(self)

    def empty(self):
        return _quackle.Bag_empty(self)

    def size(self):
        return _quackle.Bag_size(self)

    def tiles(self):
        return _quackle.Bag_tiles(self)

    def shuffledTiles(self):
        return _quackle.Bag_shuffledTiles(self)

    def someShuffledTiles(self):
        return _quackle.Bag_someShuffledTiles(self)

    @staticmethod
    def probabilityOfDrawingFromFullBag(letters):
        return _quackle.Bag_probabilityOfDrawingFromFullBag(letters)

    @staticmethod
    def probabilityOfDrawingFromBag(letters, bag):
        return _quackle.Bag_probabilityOfDrawingFromBag(letters, bag)

    def probabilityOfDrawing(self, letters):
        return _quackle.Bag_probabilityOfDrawing(self, letters)

    def toString(self):
        return _quackle.Bag_toString(self)
    __swig_destroy__ = _quackle.delete_Bag

# Register Bag in _quackle:
_quackle.Bag_swigregister(Bag)
QUACKLE_MAXIMUM_BOARD_SIZE = _quackle.QUACKLE_MAXIMUM_BOARD_SIZE
QUACKLE_MINIMUM_BOARD_SIZE = _quackle.QUACKLE_MINIMUM_BOARD_SIZE
class Board(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quackle.Board_swiginit(self, _quackle.new_Board(*args))

    def prepareEmptyBoard(self):
        return _quackle.Board_prepareEmptyBoard(self)

    def width(self):
        return _quackle.Board_width(self)

    def height(self):
        return _quackle.Board_height(self)

    def tilesNotOnBoard(self):
        return _quackle.Board_tilesNotOnBoard(self)

    def tilesOnBoard(self):
        return _quackle.Board_tilesOnBoard(self)

    def isEmpty(self):
        return _quackle.Board_isEmpty(self)

    def makeMove(self, move):
        return _quackle.Board_makeMove(self, move)

    def allWordsFormedBy(self, move):
        return _quackle.Board_allWordsFormedBy(self, move)

    def isConnected(self, move):
        return _quackle.Board_isConnected(self, move)

    def isUnacceptableOpeningMove(self, move):
        return _quackle.Board_isUnacceptableOpeningMove(self, move)

    def updateBritishness(self):
        return _quackle.Board_updateBritishness(self)

    def score(self, move, isBingo=None):
        return _quackle.Board_score(self, move, isBingo)

    def prettyTilesOfMove(self, move, markPlayThruTiles=True):
        return _quackle.Board_prettyTilesOfMove(self, move, markPlayThruTiles)

    def sanitizedTilesOfMove(self, move):
        return _quackle.Board_sanitizedTilesOfMove(self, move)

    def toString(self):
        return _quackle.Board_toString(self)

    def htmlBoard(self, tileSize):
        return _quackle.Board_htmlBoard(self, tileSize)

    def htmlKey(self):
        return _quackle.Board_htmlKey(self)
    LetterTile = _quackle.Board_LetterTile
    BonusSquareTile = _quackle.Board_BonusSquareTile
    NothingTile = _quackle.Board_NothingTile
    LetterBonus = _quackle.Board_LetterBonus
    WordBonus = _quackle.Board_WordBonus
    NoBonus = _quackle.Board_NoBonus

    def tileInformation(self, row, col):
        return _quackle.Board_tileInformation(self, row, col)

    def letter(self, row, col):
        return _quackle.Board_letter(self, row, col)

    def isBlank(self, row, col):
        return _quackle.Board_isBlank(self, row, col)

    def isBritish(self, row, col):
        return _quackle.Board_isBritish(self, row, col)

    def vcross(self, row, col):
        return _quackle.Board_vcross(self, row, col)

    def setVCross(self, row, col, vcross):
        return _quackle.Board_setVCross(self, row, col, vcross)

    def hcross(self, row, col):
        return _quackle.Board_hcross(self, row, col)

    def setHCross(self, row, col, hcross):
        return _quackle.Board_setHCross(self, row, col, hcross)
    __swig_destroy__ = _quackle.delete_Board

# Register Board in _quackle:
_quackle.Board_swigregister(Board)
class BoardParameters(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _quackle.BoardParameters_swiginit(self, _quackle.new_BoardParameters())

    def Serialize(self, stream):
        return _quackle.BoardParameters_Serialize(self, stream)

    @staticmethod
    def Deserialize(stream):
        return _quackle.BoardParameters_Deserialize(stream)

    def width(self):
        return _quackle.BoardParameters_width(self)

    def setWidth(self, width):
        return _quackle.BoardParameters_setWidth(self, width)

    def height(self):
        return _quackle.BoardParameters_height(self)

    def setHeight(self, width):
        return _quackle.BoardParameters_setHeight(self, width)

    def startRow(self):
        return _quackle.BoardParameters_startRow(self)

    def setStartRow(self, startRow):
        return _quackle.BoardParameters_setStartRow(self, startRow)

    def startColumn(self):
        return _quackle.BoardParameters_startColumn(self)

    def setStartColumn(self, startRow):
        return _quackle.BoardParameters_setStartColumn(self, startRow)
    sls = _quackle.BoardParameters_sls
    dls = _quackle.BoardParameters_dls
    tls = _quackle.BoardParameters_tls
    qls = _quackle.BoardParameters_qls
    lsCount = _quackle.BoardParameters_lsCount

    def letterMultiplier(self, row, column):
        return _quackle.BoardParameters_letterMultiplier(self, row, column)

    def setLetterMultiplier(self, row, column, multiplier):
        return _quackle.BoardParameters_setLetterMultiplier(self, row, column, multiplier)
    sws = _quackle.BoardParameters_sws
    dws = _quackle.BoardParameters_dws
    tws = _quackle.BoardParameters_tws
    qws = _quackle.BoardParameters_qws
    wsCount = _quackle.BoardParameters_wsCount

    def wordMultiplier(self, row, column):
        return _quackle.BoardParameters_wordMultiplier(self, row, column)

    def setWordMultiplier(self, row, column, multiplier):
        return _quackle.BoardParameters_setWordMultiplier(self, row, column, multiplier)

    def name(self):
        return _quackle.BoardParameters_name(self)

    def setName(self, name):
        return _quackle.BoardParameters_setName(self, name)
    __swig_destroy__ = _quackle.delete_BoardParameters

# Register BoardParameters in _quackle:
_quackle.BoardParameters_swigregister(BoardParameters)
class EnglishBoard(BoardParameters):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _quackle.EnglishBoard_swiginit(self, _quackle.new_EnglishBoard())
    __swig_destroy__ = _quackle.delete_EnglishBoard

# Register EnglishBoard in _quackle:
_quackle.EnglishBoard_swigregister(EnglishBoard)
class Evaluator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _quackle.delete_Evaluator

    def equity(self, position, move):
        return _quackle.Evaluator_equity(self, position, move)

    def playerConsideration(self, position, move):
        return _quackle.Evaluator_playerConsideration(self, position, move)

    def sharedConsideration(self, position, move):
        return _quackle.Evaluator_sharedConsideration(self, position, move)

    def leaveValue(self, leave):
        return _quackle.Evaluator_leaveValue(self, leave)

    def __init__(self):
        _quackle.Evaluator_swiginit(self, _quackle.new_Evaluator())

# Register Evaluator in _quackle:
_quackle.Evaluator_swigregister(Evaluator)
class ScorePlusLeaveEvaluator(Evaluator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _quackle.delete_ScorePlusLeaveEvaluator

    def equity(self, position, move):
        return _quackle.ScorePlusLeaveEvaluator_equity(self, position, move)

    def playerConsideration(self, position, move):
        return _quackle.ScorePlusLeaveEvaluator_playerConsideration(self, position, move)

    def sharedConsideration(self, position, move):
        return _quackle.ScorePlusLeaveEvaluator_sharedConsideration(self, position, move)

    def leaveValue(self, leave):
        return _quackle.ScorePlusLeaveEvaluator_leaveValue(self, leave)

    def __init__(self):
        _quackle.ScorePlusLeaveEvaluator_swiginit(self, _quackle.new_ScorePlusLeaveEvaluator())

# Register ScorePlusLeaveEvaluator in _quackle:
_quackle.ScorePlusLeaveEvaluator_swigregister(ScorePlusLeaveEvaluator)
class CatchallEvaluator(ScorePlusLeaveEvaluator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def equity(self, position, move):
        return _quackle.CatchallEvaluator_equity(self, position, move)

    def endgameResult(self, position, move):
        return _quackle.CatchallEvaluator_endgameResult(self, position, move)

    def __init__(self):
        _quackle.CatchallEvaluator_swiginit(self, _quackle.new_CatchallEvaluator())
    __swig_destroy__ = _quackle.delete_CatchallEvaluator

# Register CatchallEvaluator in _quackle:
_quackle.CatchallEvaluator_swigregister(CatchallEvaluator)
class Player(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ComputerPlayerType = _quackle.Player_ComputerPlayerType
    HumanPlayerType = _quackle.Player_HumanPlayerType

    def __init__(self, *args):
        _quackle.Player_swiginit(self, _quackle.new_Player(*args))

    def setName(self, newName):
        return _quackle.Player_setName(self, newName)

    def name(self):
        return _quackle.Player_name(self)

    def setAbbreviatedName(self, newAbbreviatedName):
        return _quackle.Player_setAbbreviatedName(self, newAbbreviatedName)

    def abbreviatedName(self):
        return _quackle.Player_abbreviatedName(self)

    def setType(self, playerType):
        return _quackle.Player_setType(self, playerType)

    def type(self):
        return _quackle.Player_type(self)

    def setComputerPlayer(self, computerPlayer):
        return _quackle.Player_setComputerPlayer(self, computerPlayer)

    def computerPlayer(self):
        return _quackle.Player_computerPlayer(self)

    def id(self):
        return _quackle.Player_id(self)

    def setId(self, id):
        return _quackle.Player_setId(self, id)

    def setRack(self, *args):
        return _quackle.Player_setRack(self, *args)

    def rack(self):
        return _quackle.Player_rack(self)

    def setScore(self, score):
        return _quackle.Player_setScore(self, score)

    def score(self):
        return _quackle.Player_score(self)

    def addToScore(self, addition):
        return _quackle.Player_addToScore(self, addition)

    def drawnLetters(self):
        return _quackle.Player_drawnLetters(self)

    def setDrawnLetters(self, drawnLetters):
        return _quackle.Player_setDrawnLetters(self, drawnLetters)

    def racksAreKnown(self):
        return _quackle.Player_racksAreKnown(self)

    def setRacksAreKnown(self, racksAreKnown):
        return _quackle.Player_setRacksAreKnown(self, racksAreKnown)

    def positionallyEqual(self, otherPlayer):
        return _quackle.Player_positionallyEqual(self, otherPlayer)

    def storeInformationToString(self):
        return _quackle.Player_storeInformationToString(self)

    def loadInformationFromString(self, info):
        return _quackle.Player_loadInformationFromString(self, info)

    @staticmethod
    def makePlayerFromString(info):
        return _quackle.Player_makePlayerFromString(info)
    __swig_destroy__ = _quackle.delete_Player

# Register Player in _quackle:
_quackle.Player_swigregister(Player)
class PlayerList(PlayerVector):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _quackle.PlayerList_swiginit(self, _quackle.new_PlayerList())

    def playerForId(self, id):
        return _quackle.PlayerList_playerForId(self, id)

    def playerForName(self, name):
        return _quackle.PlayerList_playerForName(self, name)
    __swig_destroy__ = _quackle.delete_PlayerList

# Register PlayerList in _quackle:
_quackle.PlayerList_swigregister(PlayerList)
class HistoryLocation(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, playerId, turnNumber):
        _quackle.HistoryLocation_swiginit(self, _quackle.new_HistoryLocation(playerId, turnNumber))

    def playerId(self):
        return _quackle.HistoryLocation_playerId(self)

    def turnNumber(self):
        return _quackle.HistoryLocation_turnNumber(self)
    __swig_destroy__ = _quackle.delete_HistoryLocation

# Register HistoryLocation in _quackle:
_quackle.HistoryLocation_swigregister(HistoryLocation)

def __lt__(*args):
    return _quackle.__lt__(*args)
class GamePosition(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quackle.GamePosition_swiginit(self, _quackle.new_GamePosition(*args))

    def kibitz(self, nmoves=10):
        return _quackle.GamePosition_kibitz(self, nmoves)

    def moves(self):
        return _quackle.GamePosition_moves(self)

    def setMoves(self, moves):
        return _quackle.GamePosition_setMoves(self, moves)

    def staticBestMove(self):
        return _quackle.GamePosition_staticBestMove(self)

    def removeMove(self, move):
        return _quackle.GamePosition_removeMove(self, move)

    def removeAllMoves(self):
        return _quackle.GamePosition_removeAllMoves(self)

    def addMove(self, move):
        return _quackle.GamePosition_addMove(self, move)

    def makeSureMoveListContainsMoves(self, moves):
        return _quackle.GamePosition_makeSureMoveListContainsMoves(self, moves)

    def kibitzAs(self, computerPlayer, nmoves):
        return _quackle.GamePosition_kibitzAs(self, computerPlayer, nmoves)

    def ensureMovePrettiness(self, move):
        return _quackle.GamePosition_ensureMovePrettiness(self, move)

    def ensureMoveTilesDoNotIncludePlayThru(self, move):
        return _quackle.GamePosition_ensureMoveTilesDoNotIncludePlayThru(self, move)

    def addAndSetMoveMade(self, move):
        return _quackle.GamePosition_addAndSetMoveMade(self, move)
    ValidMove = _quackle.GamePosition_ValidMove
    InvalidTiles = _quackle.GamePosition_InvalidTiles
    TooLateExchange = _quackle.GamePosition_TooLateExchange
    InvalidPlace = _quackle.GamePosition_InvalidPlace
    InvalidOpeningPlace = _quackle.GamePosition_InvalidOpeningPlace
    UnacceptableWord = _quackle.GamePosition_UnacceptableWord
    InvalidAction = _quackle.GamePosition_InvalidAction

    def validateMove(self, move):
        return _quackle.GamePosition_validateMove(self, move)

    def formsAcceptableWords(self, move):
        return _quackle.GamePosition_formsAcceptableWords(self, move)

    def allWordsFormedBy(self, move):
        return _quackle.GamePosition_allWordsFormedBy(self, move)

    def isConnected(self, move):
        return _quackle.GamePosition_isConnected(self, move)

    def isAcceptableWord(self, word):
        return _quackle.GamePosition_isAcceptableWord(self, word)

    def exchangeAllowed(self):
        return _quackle.GamePosition_exchangeAllowed(self)
    ValidOverdraw = _quackle.GamePosition_ValidOverdraw
    InvalidOverdrawNumber = _quackle.GamePosition_InvalidOverdrawNumber
    OverdrawnTilesNotUnseen = _quackle.GamePosition_OverdrawnTilesNotUnseen

    def handleOverdraw(self, letters, throwback):
        return _quackle.GamePosition_handleOverdraw(self, letters, throwback)

    def makeMove(self, move, maintainBoard=True):
        return _quackle.GamePosition_makeMove(self, move, maintainBoard)

    def ensureBoardIsPreparedForAnalysis(self):
        return _quackle.GamePosition_ensureBoardIsPreparedForAnalysis(self)

    def scoreMove(self, move):
        return _quackle.GamePosition_scoreMove(self, move)

    def calculateEquity(self, move):
        return _quackle.GamePosition_calculateEquity(self, move)

    def calculateScore(self, move):
        return _quackle.GamePosition_calculateScore(self, move)

    def calculatePlayerConsideration(self, move):
        return _quackle.GamePosition_calculatePlayerConsideration(self, move)

    def leaveValue(self, leave):
        return _quackle.GamePosition_leaveValue(self, leave)

    def calculateSharedConsideration(self, move):
        return _quackle.GamePosition_calculateSharedConsideration(self, move)

    def setBoard(self, board):
        return _quackle.GamePosition_setBoard(self, board)

    def board(self):
        return _quackle.GamePosition_board(self)

    def bag(self):
        return _quackle.GamePosition_bag(self)

    def setDrawingOrder(self, drawingOrder):
        return _quackle.GamePosition_setDrawingOrder(self, drawingOrder)

    def drawingOrder(self):
        return _quackle.GamePosition_drawingOrder(self)

    def unseenBag(self):
        return _quackle.GamePosition_unseenBag(self)

    def unseenBagFromPlayerPerspective(self, player):
        return _quackle.GamePosition_unseenBagFromPlayerPerspective(self, player)

    def ensureProperBag(self):
        return _quackle.GamePosition_ensureProperBag(self)

    def setEmptyBoard(self):
        return _quackle.GamePosition_setEmptyBoard(self)

    def currentPlayer(self, *args):
        return _quackle.GamePosition_currentPlayer(self, *args)

    def setCurrentPlayer(self, playerID):
        return _quackle.GamePosition_setCurrentPlayer(self, playerID)

    def playerOnTurn(self, *args):
        return _quackle.GamePosition_playerOnTurn(self, *args)

    def setPlayerOnTurn(self, playerID):
        return _quackle.GamePosition_setPlayerOnTurn(self, playerID)

    def humanPlayer(self):
        return _quackle.GamePosition_humanPlayer(self)

    def nextPlayer(self):
        return _quackle.GamePosition_nextPlayer(self)

    def nextPlayerOfType(self, type, found):
        return _quackle.GamePosition_nextPlayerOfType(self, type, found)

    def playerWithAbbreviatedName(self, abbreviatedName, found):
        return _quackle.GamePosition_playerWithAbbreviatedName(self, abbreviatedName, found)

    def players(self):
        return _quackle.GamePosition_players(self)

    def endgameAdjustedScores(self):
        return _quackle.GamePosition_endgameAdjustedScores(self)

    def leadingPlayers(self):
        return _quackle.GamePosition_leadingPlayers(self)

    def spread(self, *args):
        return _quackle.GamePosition_spread(self, *args)

    def gameOver(self):
        return _quackle.GamePosition_gameOver(self)

    def adjustScoresToFinishGame(self):
        return _quackle.GamePosition_adjustScoresToFinishGame(self)

    def adjustScoresToFinishPassedOutGame(self):
        return _quackle.GamePosition_adjustScoresToFinishPassedOutGame(self)

    def doesMoveEndGame(self, move):
        return _quackle.GamePosition_doesMoveEndGame(self, move)

    def deadwood(self, tiles):
        return _quackle.GamePosition_deadwood(self, tiles)

    def replenishAndSetRack(self, *args):
        return _quackle.GamePosition_replenishAndSetRack(self, *args)

    def setCurrentPlayerRack(self, rack, adjustBag=True):
        return _quackle.GamePosition_setCurrentPlayerRack(self, rack, adjustBag)

    def setPlayerRack(self, playerID, rack, adjustBag=True):
        return _quackle.GamePosition_setPlayerRack(self, playerID, rack, adjustBag)

    def setOppRack(self, rack, adjustBag=True):
        return _quackle.GamePosition_setOppRack(self, rack, adjustBag)

    def oppRack(self):
        return _quackle.GamePosition_oppRack(self)

    def canSetCurrentPlayerRackWithoutBagExpansion(self, rack):
        return _quackle.GamePosition_canSetCurrentPlayerRackWithoutBagExpansion(self, rack)

    def canSetPlayerRackWithoutBagExpansion(self, playerID, rack):
        return _quackle.GamePosition_canSetPlayerRackWithoutBagExpansion(self, playerID, rack)

    def resetBag(self):
        return _quackle.GamePosition_resetBag(self)

    def setBag(self, bag):
        return _quackle.GamePosition_setBag(self, bag)

    def setMoveMade(self, move):
        return _quackle.GamePosition_setMoveMade(self, move)

    def moveMade(self):
        return _quackle.GamePosition_moveMade(self)

    def setCommittedMove(self, move):
        return _quackle.GamePosition_setCommittedMove(self, move)

    def committedMove(self):
        return _quackle.GamePosition_committedMove(self)

    def setTileBonus(self, player, allegedTiles, allegedTileBonus):
        return _quackle.GamePosition_setTileBonus(self, player, allegedTiles, allegedTileBonus)

    def prepareForCommit(self):
        return _quackle.GamePosition_prepareForCommit(self)

    def boardAfterMoveMade(self):
        return _quackle.GamePosition_boardAfterMoveMade(self)

    def resetMoveMade(self):
        return _quackle.GamePosition_resetMoveMade(self)

    def incrementTurn(self, history=None):
        return _quackle.GamePosition_incrementTurn(self, history)

    def turnNumber(self):
        return _quackle.GamePosition_turnNumber(self)

    def setNestedness(self, nestedness):
        return _quackle.GamePosition_setNestedness(self, nestedness)

    def incrementNestedness(self):
        return _quackle.GamePosition_incrementNestedness(self)

    def nestedness(self):
        return _quackle.GamePosition_nestedness(self)

    def nestednessIndentation(self):
        return _quackle.GamePosition_nestednessIndentation(self)

    def scorelessTurnsInARow(self):
        return _quackle.GamePosition_scorelessTurnsInARow(self)

    def location(self):
        return _quackle.GamePosition_location(self)

    def explanatoryNote(self):
        return _quackle.GamePosition_explanatoryNote(self)

    def setExplanatoryNote(self, explanatoryNote):
        return _quackle.GamePosition_setExplanatoryNote(self, explanatoryNote)

    def underlyingBoardReference(self):
        return _quackle.GamePosition_underlyingBoardReference(self)
    __swig_destroy__ = _quackle.delete_GamePosition

# Register GamePosition in _quackle:
_quackle.GamePosition_swigregister(GamePosition)
class History(PositionList):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _quackle.History_swiginit(self, _quackle.new_History())

    def players(self):
        return _quackle.History_players(self)

    def lastPlayer(self):
        return _quackle.History_lastPlayer(self)

    def lastPosition(self):
        return _quackle.History_lastPosition(self)

    def maximumTurnNumber(self):
        return _quackle.History_maximumTurnNumber(self)

    def lastLocation(self):
        return _quackle.History_lastLocation(self)

    def currentLocation(self):
        return _quackle.History_currentLocation(self)

    def currentPosition(self, *args):
        return _quackle.History_currentPosition(self, *args)

    def positionsFacedBy(self, playerID):
        return _quackle.History_positionsFacedBy(self, playerID)

    def nextPosition(self, exists=None):
        return _quackle.History_nextPosition(self, exists)

    def nextPositionFacedBy(self, playerID, exists=None):
        return _quackle.History_nextPositionFacedBy(self, playerID, exists)

    def previousPosition(self, exists=None):
        return _quackle.History_previousPosition(self, exists)

    def firstPosition(self, exists=None):
        return _quackle.History_firstPosition(self, exists)

    def positionAt(self, location, exists=None):
        return _quackle.History_positionAt(self, location, exists)
    __swig_destroy__ = _quackle.delete_History

# Register History in _quackle:
_quackle.History_swigregister(History)
class Game(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _quackle.Game_swiginit(self, _quackle.new_Game())
    __swig_destroy__ = _quackle.delete_Game

    def reset(self):
        return _quackle.Game_reset(self)

    def setPlayers(self, list):
        return _quackle.Game_setPlayers(self, list)

    def players(self):
        return _quackle.Game_players(self)

    def hasPositions(self):
        return _quackle.Game_hasPositions(self)

    def history(self):
        return _quackle.Game_history(self)

    def addPosition(self):
        return _quackle.Game_addPosition(self)

    def currentPosition(self, *args):
        return _quackle.Game_currentPosition(self, *args)

    def setCurrentPosition(self, *args):
        return _quackle.Game_setCurrentPosition(self, *args)

    def associateComputerPlayer(self, playerId, computerPlayer):
        return _quackle.Game_associateComputerPlayer(self, playerId, computerPlayer)

    def computerPlayer(self, playerId):
        return _quackle.Game_computerPlayer(self, playerId)

    def setDefaultComputerPlayer(self, computerPlayer):
        return _quackle.Game_setDefaultComputerPlayer(self, computerPlayer)

    def associateKnownComputerPlayers(self):
        return _quackle.Game_associateKnownComputerPlayers(self)

    def defaultComputerPlayer(self):
        return _quackle.Game_defaultComputerPlayer(self)

    def haveComputerPlay(self, computerPlayer=None):
        return _quackle.Game_haveComputerPlay(self, computerPlayer)

    def advanceToNoncomputerPlayer(self):
        return _quackle.Game_advanceToNoncomputerPlayer(self)

    def setCandidate(self, move):
        return _quackle.Game_setCandidate(self, move)

    def candidate(self):
        return _quackle.Game_candidate(self)

    def resetCandidature(self):
        return _quackle.Game_resetCandidature(self)

    def commitCandidate(self, maintainBoard=True):
        return _quackle.Game_commitCandidate(self, maintainBoard)

    def commitMove(self, move):
        return _quackle.Game_commitMove(self, move)

    def description(self):
        return _quackle.Game_description(self)

    def setDescription(self, description):
        return _quackle.Game_setDescription(self, description)

    def title(self):
        return _quackle.Game_title(self)

    def setTitle(self, title):
        return _quackle.Game_setTitle(self, title)

# Register Game in _quackle:
_quackle.Game_swigregister(Game)
class GameParameters(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _quackle.GameParameters_swiginit(self, _quackle.new_GameParameters())

    def minimumTilesForExchange(self):
        return _quackle.GameParameters_minimumTilesForExchange(self)

    def setMinimumTilesForExchange(self, minimumTilesForExchange):
        return _quackle.GameParameters_setMinimumTilesForExchange(self, minimumTilesForExchange)

    def numberOfScorelessTurnsThatEndsGame(self):
        return _quackle.GameParameters_numberOfScorelessTurnsThatEndsGame(self)

    def setNumberOfScorelessTurnsThatEndsGame(self, numberOfScorelessTurnsThatEndsGame):
        return _quackle.GameParameters_setNumberOfScorelessTurnsThatEndsGame(self, numberOfScorelessTurnsThatEndsGame)

    def bingoBonus(self):
        return _quackle.GameParameters_bingoBonus(self)

    def setBingoBonus(self, bingoBonus):
        return _quackle.GameParameters_setBingoBonus(self, bingoBonus)

    def rackSize(self):
        return _quackle.GameParameters_rackSize(self)

    def setRackSize(self, rackSize):
        return _quackle.GameParameters_setRackSize(self, rackSize)

    def overdrawPenalty(self):
        return _quackle.GameParameters_overdrawPenalty(self)

    def setOverdrawPenalty(self, overdrawPenalty):
        return _quackle.GameParameters_setOverdrawPenalty(self, overdrawPenalty)
    __swig_destroy__ = _quackle.delete_GameParameters

# Register GameParameters in _quackle:
_quackle.GameParameters_swigregister(GameParameters)
class EnglishParameters(GameParameters):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _quackle.EnglishParameters_swiginit(self, _quackle.new_EnglishParameters())
    __swig_destroy__ = _quackle.delete_EnglishParameters

# Register EnglishParameters in _quackle:
_quackle.EnglishParameters_swigregister(EnglishParameters)
class AveragedValue(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _quackle.AveragedValue_swiginit(self, _quackle.new_AveragedValue())

    def incorporateValue(self, newValue):
        return _quackle.AveragedValue_incorporateValue(self, newValue)

    def clear(self):
        return _quackle.AveragedValue_clear(self)

    def valueSum(self):
        return _quackle.AveragedValue_valueSum(self)

    def squaredValueSum(self):
        return _quackle.AveragedValue_squaredValueSum(self)

    def incorporatedValues(self):
        return _quackle.AveragedValue_incorporatedValues(self)

    def hasValues(self):
        return _quackle.AveragedValue_hasValues(self)

    def averagedValue(self):
        return _quackle.AveragedValue_averagedValue(self)

    def standardDeviation(self):
        return _quackle.AveragedValue_standardDeviation(self)
    __swig_destroy__ = _quackle.delete_AveragedValue

# Register AveragedValue in _quackle:
_quackle.AveragedValue_swigregister(AveragedValue)
class PositionStatistics(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    StatisticScore = _quackle.PositionStatistics_StatisticScore
    StatisticBingos = _quackle.PositionStatistics_StatisticBingos

    def getStatistic(self, type):
        return _quackle.PositionStatistics_getStatistic(self, type)
    score = property(_quackle.PositionStatistics_score_get, _quackle.PositionStatistics_score_set)
    bingos = property(_quackle.PositionStatistics_bingos_get, _quackle.PositionStatistics_bingos_set)

    def __init__(self):
        _quackle.PositionStatistics_swiginit(self, _quackle.new_PositionStatistics())
    __swig_destroy__ = _quackle.delete_PositionStatistics

# Register PositionStatistics in _quackle:
_quackle.PositionStatistics_swigregister(PositionStatistics)
class Level(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def setNumberScores(self, number):
        return _quackle.Level_setNumberScores(self, number)
    statistics = property(_quackle.Level_statistics_get, _quackle.Level_statistics_set)

    def __init__(self):
        _quackle.Level_swiginit(self, _quackle.new_Level())
    __swig_destroy__ = _quackle.delete_Level

# Register Level in _quackle:
_quackle.Level_swigregister(Level)
class LevelList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def setNumberLevels(self, number):
        return _quackle.LevelList_setNumberLevels(self, number)

    def __init__(self):
        _quackle.LevelList_swiginit(self, _quackle.new_LevelList())
    __swig_destroy__ = _quackle.delete_LevelList

# Register LevelList in _quackle:
_quackle.LevelList_swigregister(LevelList)
class SimmedMove(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, _move):
        _quackle.SimmedMove_swiginit(self, _quackle.new_SimmedMove(_move))

    def calculateEquity(self):
        return _quackle.SimmedMove_calculateEquity(self)

    def calculateWinPercentage(self):
        return _quackle.SimmedMove_calculateWinPercentage(self)

    def clear(self):
        return _quackle.SimmedMove_clear(self)

    def includeInSimulation(self):
        return _quackle.SimmedMove_includeInSimulation(self)

    def setIncludeInSimulation(self, includeInSimulation):
        return _quackle.SimmedMove_setIncludeInSimulation(self, includeInSimulation)

    def id(self):
        return _quackle.SimmedMove_id(self)
    move = property(_quackle.SimmedMove_move_get, _quackle.SimmedMove_move_set)
    levels = property(_quackle.SimmedMove_levels_get, _quackle.SimmedMove_levels_set)
    residual = property(_quackle.SimmedMove_residual_get, _quackle.SimmedMove_residual_set)
    gameSpread = property(_quackle.SimmedMove_gameSpread_get, _quackle.SimmedMove_gameSpread_set)
    wins = property(_quackle.SimmedMove_wins_get, _quackle.SimmedMove_wins_set)

    def getPositionStatistics(self, level, playerIndex):
        return _quackle.SimmedMove_getPositionStatistics(self, level, playerIndex)
    __swig_destroy__ = _quackle.delete_SimmedMove

# Register SimmedMove in _quackle:
_quackle.SimmedMove_swigregister(SimmedMove)
class SimmedMoveMessage(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    id = property(_quackle.SimmedMoveMessage_id_get, _quackle.SimmedMoveMessage_id_set)
    move = property(_quackle.SimmedMoveMessage_move_get, _quackle.SimmedMoveMessage_move_set)
    levels = property(_quackle.SimmedMoveMessage_levels_get, _quackle.SimmedMoveMessage_levels_set)
    score = property(_quackle.SimmedMoveMessage_score_get, _quackle.SimmedMoveMessage_score_set)
    bingos = property(_quackle.SimmedMoveMessage_bingos_get, _quackle.SimmedMoveMessage_bingos_set)
    residual = property(_quackle.SimmedMoveMessage_residual_get, _quackle.SimmedMoveMessage_residual_set)
    gameSpread = property(_quackle.SimmedMoveMessage_gameSpread_get, _quackle.SimmedMoveMessage_gameSpread_set)
    wins = property(_quackle.SimmedMoveMessage_wins_get, _quackle.SimmedMoveMessage_wins_set)
    bogowin = property(_quackle.SimmedMoveMessage_bogowin_get, _quackle.SimmedMoveMessage_bogowin_set)
    xmlIndent = property(_quackle.SimmedMoveMessage_xmlIndent_get, _quackle.SimmedMoveMessage_xmlIndent_set)

    def __init__(self):
        _quackle.SimmedMoveMessage_swiginit(self, _quackle.new_SimmedMoveMessage())
    __swig_destroy__ = _quackle.delete_SimmedMoveMessage

# Register SimmedMoveMessage in _quackle:
_quackle.SimmedMoveMessage_swigregister(SimmedMoveMessage)
class SimmedMoveConstants(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    game = property(_quackle.SimmedMoveConstants_game_get, _quackle.SimmedMoveConstants_game_set)
    startPlayerId = property(_quackle.SimmedMoveConstants_startPlayerId_get, _quackle.SimmedMoveConstants_startPlayerId_set)
    playerCount = property(_quackle.SimmedMoveConstants_playerCount_get, _quackle.SimmedMoveConstants_playerCount_set)
    decimalTurns = property(_quackle.SimmedMoveConstants_decimalTurns_get, _quackle.SimmedMoveConstants_decimalTurns_set)
    levelCount = property(_quackle.SimmedMoveConstants_levelCount_get, _quackle.SimmedMoveConstants_levelCount_set)
    ignoreOppos = property(_quackle.SimmedMoveConstants_ignoreOppos_get, _quackle.SimmedMoveConstants_ignoreOppos_set)
    isLogging = property(_quackle.SimmedMoveConstants_isLogging_get, _quackle.SimmedMoveConstants_isLogging_set)

    def __init__(self):
        _quackle.SimmedMoveConstants_swiginit(self, _quackle.new_SimmedMoveConstants())
    __swig_destroy__ = _quackle.delete_SimmedMoveConstants

# Register SimmedMoveConstants in _quackle:
_quackle.SimmedMoveConstants_swigregister(SimmedMoveConstants)
class SimmedMoveMessageQueue(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _quackle.SimmedMoveMessageQueue_swiginit(self, _quackle.new_SimmedMoveMessageQueue())

    def push(self, msg):
        return _quackle.SimmedMoveMessageQueue_push(self, msg)

    def send_terminate_all(self):
        return _quackle.SimmedMoveMessageQueue_send_terminate_all(self)

    def send_terminate_one(self, id):
        return _quackle.SimmedMoveMessageQueue_send_terminate_one(self, id)

    def constants(self):
        return _quackle.SimmedMoveMessageQueue_constants(self)

    def setConstants(self, constants):
        return _quackle.SimmedMoveMessageQueue_setConstants(self, constants)
    __swig_destroy__ = _quackle.delete_SimmedMoveMessageQueue

# Register SimmedMoveMessageQueue in _quackle:
_quackle.SimmedMoveMessageQueue_swigregister(SimmedMoveMessageQueue)
class Simulator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _quackle.Simulator_swiginit(self, _quackle.new_Simulator())
    __swig_destroy__ = _quackle.delete_Simulator

    def setPosition(self, position):
        return _quackle.Simulator_setPosition(self, position)

    def currentPosition(self, *args):
        return _quackle.Simulator_currentPosition(self, *args)

    def history(self):
        return _quackle.Simulator_history(self)

    def setLogfile(self, logfile, append=True):
        return _quackle.Simulator_setLogfile(self, logfile, append)

    def logfile(self):
        return _quackle.Simulator_logfile(self)

    def setDispatch(self, dispatch):
        return _quackle.Simulator_setDispatch(self, dispatch)

    def dispatch(self):
        return _quackle.Simulator_dispatch(self)

    def logMessage(self, message):
        return _quackle.Simulator_logMessage(self, message)

    def isLogging(self):
        return _quackle.Simulator_isLogging(self)

    def closeLogfile(self):
        return _quackle.Simulator_closeLogfile(self)

    def setIncludedMoves(self, moves):
        return _quackle.Simulator_setIncludedMoves(self, moves)

    def makeSureConsideredMovesAreIncluded(self):
        return _quackle.Simulator_makeSureConsideredMovesAreIncluded(self)

    def moveConsideredMovesToBeginning(self, moves):
        return _quackle.Simulator_moveConsideredMovesToBeginning(self, moves)

    def setConsideredMoves(self, moves):
        return _quackle.Simulator_setConsideredMoves(self, moves)

    def consideredMoves(self):
        return _quackle.Simulator_consideredMoves(self)

    def addConsideredMove(self, move):
        return _quackle.Simulator_addConsideredMove(self, move)

    def isConsideredMove(self, move):
        return _quackle.Simulator_isConsideredMove(self, move)

    def pruneTo(self, equityThreshold, maxNumberOfMoves):
        return _quackle.Simulator_pruneTo(self, equityThreshold, maxNumberOfMoves)

    def setIgnoreOppos(self, ignore):
        return _quackle.Simulator_setIgnoreOppos(self, ignore)

    def ignoreOppos(self):
        return _quackle.Simulator_ignoreOppos(self)

    @staticmethod
    def simThreadFunc(incoming, outgoing):
        return _quackle.Simulator_simThreadFunc(incoming, outgoing)

    def setThreadCount(self, count):
        return _quackle.Simulator_setThreadCount(self, count)

    def resetNumbers(self):
        return _quackle.Simulator_resetNumbers(self)

    def simulate(self, *args):
        return _quackle.Simulator_simulate(self, *args)

    @staticmethod
    def simulateOnePosition(message, constants):
        return _quackle.Simulator_simulateOnePosition(message, constants)

    def incorporateMessage(self, message):
        return _quackle.Simulator_incorporateMessage(self, message)

    def setPartialOppoRack(self, rack):
        return _quackle.Simulator_setPartialOppoRack(self, rack)

    def partialOppoRack(self):
        return _quackle.Simulator_partialOppoRack(self)

    def randomizeOppoRacks(self):
        return _quackle.Simulator_randomizeOppoRacks(self)

    def randomizeDrawingOrder(self):
        return _quackle.Simulator_randomizeDrawingOrder(self)

    def iterations(self):
        return _quackle.Simulator_iterations(self)

    def hasSimulationResults(self):
        return _quackle.Simulator_hasSimulationResults(self)

    def simmedMoves(self):
        return _quackle.Simulator_simmedMoves(self)

    def moves(self, prune=False, byWin=False):
        return _quackle.Simulator_moves(self, prune, byWin)

    def simmedMoveForMove(self, move):
        return _quackle.Simulator_simmedMoveForMove(self, move)

    def numLevels(self):
        return _quackle.Simulator_numLevels(self)

    def numPlayersAtLevel(self, levelIndex):
        return _quackle.Simulator_numPlayersAtLevel(self, levelIndex)

# Register Simulator in _quackle:
_quackle.Simulator_swigregister(Simulator)
QUACKLE_NULL_COMPUTER_PLAYER_ID = _quackle.QUACKLE_NULL_COMPUTER_PLAYER_ID
QUACKLE_STATIC_COMPUTER_PLAYER_ID = _quackle.QUACKLE_STATIC_COMPUTER_PLAYER_ID
class ComputerParameters(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    secondsPerTurn = property(_quackle.ComputerParameters_secondsPerTurn_get, _quackle.ComputerParameters_secondsPerTurn_set)
    inferring = property(_quackle.ComputerParameters_inferring_get, _quackle.ComputerParameters_inferring_set)

    def __init__(self):
        _quackle.ComputerParameters_swiginit(self, _quackle.new_ComputerParameters())
    __swig_destroy__ = _quackle.delete_ComputerParameters

# Register ComputerParameters in _quackle:
_quackle.ComputerParameters_swigregister(ComputerParameters)
class ComputerDispatch(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _quackle.delete_ComputerDispatch

    def shouldAbort(self):
        return _quackle.ComputerDispatch_shouldAbort(self)

    def signalFractionDone(self, fractionDone):
        return _quackle.ComputerDispatch_signalFractionDone(self, fractionDone)

# Register ComputerDispatch in _quackle:
_quackle.ComputerDispatch_swigregister(ComputerDispatch)
class ScalingDispatch(ComputerDispatch):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, shadow, scale, addition):
        _quackle.ScalingDispatch_swiginit(self, _quackle.new_ScalingDispatch(shadow, scale, addition))
    __swig_destroy__ = _quackle.delete_ScalingDispatch

    def shouldAbort(self):
        return _quackle.ScalingDispatch_shouldAbort(self)

    def signalFractionDone(self, fractionDone):
        return _quackle.ScalingDispatch_signalFractionDone(self, fractionDone)

# Register ScalingDispatch in _quackle:
_quackle.ScalingDispatch_swigregister(ScalingDispatch)
class ComputerPlayer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _quackle.delete_ComputerPlayer

    def setParameters(self, parameters):
        return _quackle.ComputerPlayer_setParameters(self, parameters)

    def parameters(self):
        return _quackle.ComputerPlayer_parameters(self)

    def setPosition(self, position):
        return _quackle.ComputerPlayer_setPosition(self, position)

    def currentPosition(self, *args):
        return _quackle.ComputerPlayer_currentPosition(self, *args)

    def shouldAbort(self):
        return _quackle.ComputerPlayer_shouldAbort(self)

    def signalFractionDone(self, fractionDone):
        return _quackle.ComputerPlayer_signalFractionDone(self, fractionDone)

    def considerMove(self, move):
        return _quackle.ComputerPlayer_considerMove(self, move)

    def setConsideredMoves(self, moves):
        return _quackle.ComputerPlayer_setConsideredMoves(self, moves)

    def name(self):
        return _quackle.ComputerPlayer_name(self)

    def id(self):
        return _quackle.ComputerPlayer_id(self)

    def move(self):
        return _quackle.ComputerPlayer_move(self)

    def clone(self):
        return _quackle.ComputerPlayer_clone(self)

    def moves(self, nmoves):
        return _quackle.ComputerPlayer_moves(self, nmoves)

    def isSlow(self):
        return _quackle.ComputerPlayer_isSlow(self)

    def isUserVisible(self):
        return _quackle.ComputerPlayer_isUserVisible(self)

    def dispatch(self):
        return _quackle.ComputerPlayer_dispatch(self)

    def setDispatch(self, dispatch):
        return _quackle.ComputerPlayer_setDispatch(self, dispatch)

# Register ComputerPlayer in _quackle:
_quackle.ComputerPlayer_swigregister(ComputerPlayer)
class StaticPlayer(ComputerPlayer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _quackle.StaticPlayer_swiginit(self, _quackle.new_StaticPlayer())
    __swig_destroy__ = _quackle.delete_StaticPlayer

    def clone(self):
        return _quackle.StaticPlayer_clone(self)

    def move(self):
        return _quackle.StaticPlayer_move(self)

    def moves(self, nmoves):
        return _quackle.StaticPlayer_moves(self, nmoves)

# Register StaticPlayer in _quackle:
_quackle.StaticPlayer_swigregister(StaticPlayer)
class ComputerPlayerCollection(PlayerList):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _quackle.ComputerPlayerCollection_swiginit(self, _quackle.new_ComputerPlayerCollection())

    def addPlayer(self, computerPlayer):
        return _quackle.ComputerPlayerCollection_addPlayer(self, computerPlayer)

    @staticmethod
    def createPlayer(computerPlayer):
        return _quackle.ComputerPlayerCollection_createPlayer(computerPlayer)

    @staticmethod
    def fullCollection():
        return _quackle.ComputerPlayerCollection_fullCollection()
    __swig_destroy__ = _quackle.delete_ComputerPlayerCollection

# Register ComputerPlayerCollection in _quackle:
_quackle.ComputerPlayerCollection_swigregister(ComputerPlayerCollection)
class DataManager(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _quackle.DataManager_swiginit(self, _quackle.new_DataManager())
    __swig_destroy__ = _quackle.delete_DataManager

    @staticmethod
    def _self():
        return _quackle.DataManager__self()

    @staticmethod
    def exists():
        return _quackle.DataManager_exists()

    def isGood(self):
        return _quackle.DataManager_isGood(self)

    def evaluator(self):
        return _quackle.DataManager_evaluator(self)

    def setEvaluator(self, evaluator):
        return _quackle.DataManager_setEvaluator(self, evaluator)

    def parameters(self):
        return _quackle.DataManager_parameters(self)

    def setParameters(self, parameters):
        return _quackle.DataManager_setParameters(self, parameters)

    def alphabetParameters(self):
        return _quackle.DataManager_alphabetParameters(self)

    def setAlphabetParameters(self, alphabetParameters):
        return _quackle.DataManager_setAlphabetParameters(self, alphabetParameters)

    def boardParameters(self):
        return _quackle.DataManager_boardParameters(self)

    def setBoardParameters(self, boardParameters):
        return _quackle.DataManager_setBoardParameters(self, boardParameters)

    def lexiconParameters(self):
        return _quackle.DataManager_lexiconParameters(self)

    def setLexiconParameters(self, lexiconParameters):
        return _quackle.DataManager_setLexiconParameters(self, lexiconParameters)

    def strategyParameters(self):
        return _quackle.DataManager_strategyParameters(self)

    def setStrategyParameters(self, strategyParameters):
        return _quackle.DataManager_setStrategyParameters(self, strategyParameters)

    def computerPlayers(self):
        return _quackle.DataManager_computerPlayers(self)

    def setComputerPlayers(self, playerList):
        return _quackle.DataManager_setComputerPlayers(self, playerList)

    def cleanupComputerPlayers(self):
        return _quackle.DataManager_cleanupComputerPlayers(self)

    def findDataFile(self, *args):
        return _quackle.DataManager_findDataFile(self, *args)

    def hasUserDataFile(self, subDirectory, file):
        return _quackle.DataManager_hasUserDataFile(self, subDirectory, file)

    def makeDataFilename(self, *args):
        return _quackle.DataManager_makeDataFilename(self, *args)

    def setBackupLexicon(self, backupLexicon):
        return _quackle.DataManager_setBackupLexicon(self, backupLexicon)

    def backupLexicon(self):
        return _quackle.DataManager_backupLexicon(self)

    def setAppDataDirectory(self, directory):
        return _quackle.DataManager_setAppDataDirectory(self, directory)

    def appDataDirectory(self):
        return _quackle.DataManager_appDataDirectory(self)

    def setUserDataDirectory(self, directory):
        return _quackle.DataManager_setUserDataDirectory(self, directory)

    def userDataDirectory(self):
        return _quackle.DataManager_userDataDirectory(self)

    def seedRandomNumbers(self, *args):
        return _quackle.DataManager_seedRandomNumbers(self, *args)

    def randomInteger(self, low, high):
        return _quackle.DataManager_randomInteger(self, low, high)

# Register DataManager in _quackle:
_quackle.DataManager_swigregister(DataManager)
class EndgameMove(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, _move):
        _quackle.EndgameMove_swiginit(self, _quackle.new_EndgameMove(_move))
    move = property(_quackle.EndgameMove_move_get, _quackle.EndgameMove_move_set)
    optimistic = property(_quackle.EndgameMove_optimistic_get, _quackle.EndgameMove_optimistic_set)
    pessimistic = property(_quackle.EndgameMove_pessimistic_get, _quackle.EndgameMove_pessimistic_set)
    estimated = property(_quackle.EndgameMove_estimated_get, _quackle.EndgameMove_estimated_set)
    outplay = property(_quackle.EndgameMove_outplay_get, _quackle.EndgameMove_outplay_set)
    __swig_destroy__ = _quackle.delete_EndgameMove

# Register EndgameMove in _quackle:
_quackle.EndgameMove_swigregister(EndgameMove)
class EndgameMoveList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def optimisticComparator(move1, move2):
        return _quackle.EndgameMoveList_optimisticComparator(move1, move2)

    def __init__(self):
        _quackle.EndgameMoveList_swiginit(self, _quackle.new_EndgameMoveList())
    __swig_destroy__ = _quackle.delete_EndgameMoveList

# Register EndgameMoveList in _quackle:
_quackle.EndgameMoveList_swigregister(EndgameMoveList)
class Endgame(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _quackle.Endgame_swiginit(self, _quackle.new_Endgame())
    __swig_destroy__ = _quackle.delete_Endgame

    def setPosition(self, position):
        return _quackle.Endgame_setPosition(self, position)

    def currentPosition(self, *args):
        return _quackle.Endgame_currentPosition(self, *args)

    def setDispatch(self, dispatch):
        return _quackle.Endgame_setDispatch(self, dispatch)

    def setLogfile(self, logfile, append=True):
        return _quackle.Endgame_setLogfile(self, logfile, append)

    def logfile(self):
        return _quackle.Endgame_logfile(self)

    def logMessage(self, message):
        return _quackle.Endgame_logMessage(self, message)

    def isLogging(self):
        return _quackle.Endgame_isLogging(self)

    def closeLogfile(self):
        return _quackle.Endgame_closeLogfile(self)

    def setIncludedMoves(self, moves):
        return _quackle.Endgame_setIncludedMoves(self, moves)

    def moves(self, nmoves):
        return _quackle.Endgame_moves(self, nmoves)

    def endgameMoves(self):
        return _quackle.Endgame_endgameMoves(self)

    def solve(self, nestedness):
        return _quackle.Endgame_solve(self, nestedness)

    def reallyPlayOut(self, move, nestedness):
        return _quackle.Endgame_reallyPlayOut(self, move, nestedness)

    def disappoint(self, hope, bestPessimistic):
        return _quackle.Endgame_disappoint(self, hope, bestPessimistic)

# Register Endgame in _quackle:
_quackle.Endgame_swigregister(Endgame)
class EndgamePlayer(ComputerPlayer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _quackle.EndgamePlayer_swiginit(self, _quackle.new_EndgamePlayer())
    __swig_destroy__ = _quackle.delete_EndgamePlayer

    def move(self):
        return _quackle.EndgamePlayer_move(self)

    def moves(self, nmoves):
        return _quackle.EndgamePlayer_moves(self, nmoves)

    def clone(self):
        return _quackle.EndgamePlayer_clone(self)

    def isUserVisible(self):
        return _quackle.EndgamePlayer_isUserVisible(self)

    def setDispatch(self, dispatch):
        return _quackle.EndgamePlayer_setDispatch(self, dispatch)

# Register EndgamePlayer in _quackle:
_quackle.EndgamePlayer_swigregister(EndgamePlayer)
class ProbableRack(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    rack = property(_quackle.ProbableRack_rack_get, _quackle.ProbableRack_rack_set)
    probability = property(_quackle.ProbableRack_probability_get, _quackle.ProbableRack_probability_set)
    possibility = property(_quackle.ProbableRack_possibility_get, _quackle.ProbableRack_possibility_set)

    def __init__(self):
        _quackle.ProbableRack_swiginit(self, _quackle.new_ProbableRack())
    __swig_destroy__ = _quackle.delete_ProbableRack

# Register ProbableRack in _quackle:
_quackle.ProbableRack_swigregister(ProbableRack)
class Enumerator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, B):
        _quackle.Enumerator_swiginit(self, _quackle.new_Enumerator(B))

    def enumerate(self, *args):
        return _quackle.Enumerator_enumerate(self, *args)

    def enumeratePossible(self, racks, bag):
        return _quackle.Enumerator_enumeratePossible(self, racks, bag)

    @staticmethod
    def normalizeProbabilities(racks):
        return _quackle.Enumerator_normalizeProbabilities(racks)
    __swig_destroy__ = _quackle.delete_Enumerator

# Register Enumerator in _quackle:
_quackle.Enumerator_swigregister(Enumerator)
class SmartBogowin(ComputerPlayer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _quackle.SmartBogowin_swiginit(self, _quackle.new_SmartBogowin())
    __swig_destroy__ = _quackle.delete_SmartBogowin

    def move(self):
        return _quackle.SmartBogowin_move(self)

    def moves(self, nmoves):
        return _quackle.SmartBogowin_moves(self, nmoves)

    def clone(self):
        return _quackle.SmartBogowin_clone(self)

    def isSlow(self):
        return _quackle.SmartBogowin_isSlow(self)

    def isUserVisible(self):
        return _quackle.SmartBogowin_isUserVisible(self)

    def bogopoints(self, move):
        return _quackle.SmartBogowin_bogopoints(self, move)

# Register SmartBogowin in _quackle:
_quackle.SmartBogowin_swigregister(SmartBogowin)
class Stopwatch(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _quackle.Stopwatch_swiginit(self, _quackle.new_Stopwatch())

    def start(self):
        return _quackle.Stopwatch_start(self)

    def elapsed(self):
        return _quackle.Stopwatch_elapsed(self)

    def exceeded(self, seconds):
        return _quackle.Stopwatch_exceeded(self, seconds)
    __swig_destroy__ = _quackle.delete_Stopwatch

# Register Stopwatch in _quackle:
_quackle.Stopwatch_swigregister(Stopwatch)
class ExtensionWithInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _quackle.ExtensionWithInfo_swiginit(self, _quackle.new_ExtensionWithInfo())
    extensionLetterString = property(_quackle.ExtensionWithInfo_extensionLetterString_get, _quackle.ExtensionWithInfo_extensionLetterString_set)
    playability = property(_quackle.ExtensionWithInfo_playability_get, _quackle.ExtensionWithInfo_playability_set)
    probability = property(_quackle.ExtensionWithInfo_probability_get, _quackle.ExtensionWithInfo_probability_set)
    british = property(_quackle.ExtensionWithInfo_british_get, _quackle.ExtensionWithInfo_british_set)
    __swig_destroy__ = _quackle.delete_ExtensionWithInfo

# Register ExtensionWithInfo in _quackle:
_quackle.ExtensionWithInfo_swigregister(ExtensionWithInfo)
class WordWithInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _quackle.WordWithInfo_swiginit(self, _quackle.new_WordWithInfo())
    wordLetterString = property(_quackle.WordWithInfo_wordLetterString_get, _quackle.WordWithInfo_wordLetterString_set)
    playability = property(_quackle.WordWithInfo_playability_get, _quackle.WordWithInfo_playability_set)
    probability = property(_quackle.WordWithInfo_probability_get, _quackle.WordWithInfo_probability_set)
    british = property(_quackle.WordWithInfo_british_get, _quackle.WordWithInfo_british_set)
    frontExtensions = property(_quackle.WordWithInfo_frontExtensions_get, _quackle.WordWithInfo_frontExtensions_set)
    backExtensions = property(_quackle.WordWithInfo_backExtensions_get, _quackle.WordWithInfo_backExtensions_set)
    __swig_destroy__ = _quackle.delete_WordWithInfo

# Register WordWithInfo in _quackle:
_quackle.WordWithInfo_swigregister(WordWithInfo)
class Generator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quackle.Generator_swiginit(self, _quackle.new_Generator(*args))
    __swig_destroy__ = _quackle.delete_Generator
    RegularKibitz = _quackle.Generator_RegularKibitz
    CannotExchange = _quackle.Generator_CannotExchange

    def kibitz(self, *args):
        return _quackle.Generator_kibitz(self, *args)

    def kibitzList(self):
        return _quackle.Generator_kibitzList(self)

    def allPossiblePlays(self):
        return _quackle.Generator_allPossiblePlays(self)

    def setPosition(self, position):
        return _quackle.Generator_setPosition(self, position)

    def position(self):
        return _quackle.Generator_position(self)

    def makeMove(self, move, regenerateCrosses):
        return _quackle.Generator_makeMove(self, move, regenerateCrosses)
    AnagramRearrange = _quackle.Generator_AnagramRearrange
    NoRequireAllLetters = _quackle.Generator_NoRequireAllLetters
    AddAnyLetters = _quackle.Generator_AddAnyLetters
    ClearBlanknesses = _quackle.Generator_ClearBlanknesses
    SingleMatch = _quackle.Generator_SingleMatch

    def isAcceptableWord(self, word):
        return _quackle.Generator_isAcceptableWord(self, word)

    def anagramLetters(self, *args):
        return _quackle.Generator_anagramLetters(self, *args)

    def storeWordInfo(self, wordWithInfo):
        return _quackle.Generator_storeWordInfo(self, wordWithInfo)

    def storeExtensions(self, wordWithInfo):
        return _quackle.Generator_storeExtensions(self, wordWithInfo)

    def allCrosses(self):
        return _quackle.Generator_allCrosses(self)

# Register Generator in _quackle:
_quackle.Generator_swigregister(Generator)
QUACKLE_GADDAG_SEPARATOR = _quackle.QUACKLE_GADDAG_SEPARATOR
class GaddagNode(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def letter(self):
        return _quackle.GaddagNode_letter(self)

    def isTerminal(self):
        return _quackle.GaddagNode_isTerminal(self)

    def firstChild(self):
        return _quackle.GaddagNode_firstChild(self)

    def nextSibling(self):
        return _quackle.GaddagNode_nextSibling(self)

    def child(self, l):
        return _quackle.GaddagNode_child(self, l)

    def __init__(self):
        _quackle.GaddagNode_swiginit(self, _quackle.new_GaddagNode())
    __swig_destroy__ = _quackle.delete_GaddagNode

# Register GaddagNode in _quackle:
_quackle.GaddagNode_swigregister(GaddagNode)
class LexiconInterpreter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def loadDawg(self, file, lexparams):
        return _quackle.LexiconInterpreter_loadDawg(self, file, lexparams)

    def loadGaddag(self, file, lexparams):
        return _quackle.LexiconInterpreter_loadGaddag(self, file, lexparams)

    def dawgAt(self, dawg, index, p, letter, t, lastchild, british, playability):
        return _quackle.LexiconInterpreter_dawgAt(self, dawg, index, p, letter, t, lastchild, british, playability)

    def versionNumber(self):
        return _quackle.LexiconInterpreter_versionNumber(self)
    __swig_destroy__ = _quackle.delete_LexiconInterpreter

# Register LexiconInterpreter in _quackle:
_quackle.LexiconInterpreter_swigregister(LexiconInterpreter)
class LexiconParameters(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _quackle.LexiconParameters_swiginit(self, _quackle.new_LexiconParameters())
    __swig_destroy__ = _quackle.delete_LexiconParameters

    def unloadAll(self):
        return _quackle.LexiconParameters_unloadAll(self)

    def hasSomething(self):
        return _quackle.LexiconParameters_hasSomething(self)

    def loadDawg(self, filename):
        return _quackle.LexiconParameters_loadDawg(self, filename)

    def unloadDawg(self):
        return _quackle.LexiconParameters_unloadDawg(self)

    def hasDawg(self):
        return _quackle.LexiconParameters_hasDawg(self)

    def dawgVersion(self):
        return _quackle.LexiconParameters_dawgVersion(self)

    def loadGaddag(self, filename):
        return _quackle.LexiconParameters_loadGaddag(self, filename)

    def unloadGaddag(self):
        return _quackle.LexiconParameters_unloadGaddag(self)

    def hasGaddag(self):
        return _quackle.LexiconParameters_hasGaddag(self)

    @staticmethod
    def findDictionaryFile(lexicon):
        return _quackle.LexiconParameters_findDictionaryFile(lexicon)

    @staticmethod
    def hasUserDictionaryFile(lexicon):
        return _quackle.LexiconParameters_hasUserDictionaryFile(lexicon)

    def lexiconName(self):
        return _quackle.LexiconParameters_lexiconName(self)

    def setLexiconName(self, name):
        return _quackle.LexiconParameters_setLexiconName(self, name)

    def dawgAt(self, index, p, letter, t, lastchild, british, playability):
        return _quackle.LexiconParameters_dawgAt(self, index, p, letter, t, lastchild, british, playability)

    def gaddagRoot(self):
        return _quackle.LexiconParameters_gaddagRoot(self)

    def hashString(self, shortened):
        return _quackle.LexiconParameters_hashString(self, shortened)

    def copyrightString(self):
        return _quackle.LexiconParameters_copyrightString(self)

    def logoFileName(self):
        return _quackle.LexiconParameters_logoFileName(self)

    def utf8Alphabet(self):
        return _quackle.LexiconParameters_utf8Alphabet(self)

# Register LexiconParameters in _quackle:
_quackle.LexiconParameters_swigregister(LexiconParameters)
class Preendgame(ComputerPlayer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _quackle.Preendgame_swiginit(self, _quackle.new_Preendgame())
    __swig_destroy__ = _quackle.delete_Preendgame

    def move(self):
        return _quackle.Preendgame_move(self)

    def moves(self, nmoves):
        return _quackle.Preendgame_moves(self, nmoves)

    def clone(self):
        return _quackle.Preendgame_clone(self)

    def isUserVisible(self):
        return _quackle.Preendgame_isUserVisible(self)

    def isSlow(self):
        return _quackle.Preendgame_isSlow(self)

    @staticmethod
    def maximumTilesInBagToEngage():
        return _quackle.Preendgame_maximumTilesInBagToEngage()

# Register Preendgame in _quackle:
_quackle.Preendgame_swigregister(Preendgame)
class Reporter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _quackle.Reporter_swiginit(self, _quackle.new_Reporter())

    @staticmethod
    def reportPosition(position, computerPlayer, report):
        return _quackle.Reporter_reportPosition(position, computerPlayer, report)

    @staticmethod
    def reportGameStatistics(game, report):
        return _quackle.Reporter_reportGameStatistics(game, report)

    @staticmethod
    def reportHeader(game, report):
        return _quackle.Reporter_reportHeader(game, report)

    @staticmethod
    def reportGame(game, computerPlayer, report):
        return _quackle.Reporter_reportGame(game, computerPlayer, report)
    __swig_destroy__ = _quackle.delete_Reporter

# Register Reporter in _quackle:
_quackle.Reporter_swigregister(Reporter)
class Resolvent(ComputerPlayer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _quackle.Resolvent_swiginit(self, _quackle.new_Resolvent())
    __swig_destroy__ = _quackle.delete_Resolvent

    def move(self):
        return _quackle.Resolvent_move(self)

    def moves(self, nmoves):
        return _quackle.Resolvent_moves(self, nmoves)

    def clone(self):
        return _quackle.Resolvent_clone(self)

    def isSlow(self):
        return _quackle.Resolvent_isSlow(self)

    def isUserVisible(self):
        return _quackle.Resolvent_isUserVisible(self)

# Register Resolvent in _quackle:
_quackle.Resolvent_swigregister(Resolvent)
class InferringPlayer(Resolvent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _quackle.InferringPlayer_swiginit(self, _quackle.new_InferringPlayer())
    __swig_destroy__ = _quackle.delete_InferringPlayer

    def clone(self):
        return _quackle.InferringPlayer_clone(self)

# Register InferringPlayer in _quackle:
_quackle.InferringPlayer_swigregister(InferringPlayer)
class TorontoPlayer(Resolvent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _quackle.TorontoPlayer_swiginit(self, _quackle.new_TorontoPlayer())
    __swig_destroy__ = _quackle.delete_TorontoPlayer

    def clone(self):
        return _quackle.TorontoPlayer_clone(self)

# Register TorontoPlayer in _quackle:
_quackle.TorontoPlayer_swigregister(TorontoPlayer)
class FiveMinutePlayer(Resolvent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _quackle.FiveMinutePlayer_swiginit(self, _quackle.new_FiveMinutePlayer())
    __swig_destroy__ = _quackle.delete_FiveMinutePlayer

    def clone(self):
        return _quackle.FiveMinutePlayer_clone(self)

# Register FiveMinutePlayer in _quackle:
_quackle.FiveMinutePlayer_swigregister(FiveMinutePlayer)
class TwentySecondPlayer(Resolvent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _quackle.TwentySecondPlayer_swiginit(self, _quackle.new_TwentySecondPlayer())
    __swig_destroy__ = _quackle.delete_TwentySecondPlayer

    def clone(self):
        return _quackle.TwentySecondPlayer_clone(self)

# Register TwentySecondPlayer in _quackle:
_quackle.TwentySecondPlayer_swigregister(TwentySecondPlayer)
class StrategyParameters(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _quackle.StrategyParameters_swiginit(self, _quackle.new_StrategyParameters())

    def initialize(self, lexicon):
        return _quackle.StrategyParameters_initialize(self, lexicon)

    def hasSyn2(self):
        return _quackle.StrategyParameters_hasSyn2(self)

    def hasWorths(self):
        return _quackle.StrategyParameters_hasWorths(self)

    def hasVcPlace(self):
        return _quackle.StrategyParameters_hasVcPlace(self)

    def hasBogowin(self):
        return _quackle.StrategyParameters_hasBogowin(self)

    def hasSuperleaves(self):
        return _quackle.StrategyParameters_hasSuperleaves(self)

    def syn2(self, letter1, letter2):
        return _quackle.StrategyParameters_syn2(self, letter1, letter2)

    def tileWorth(self, letter):
        return _quackle.StrategyParameters_tileWorth(self, letter)

    def vcPlace(self, start, length, consbits):
        return _quackle.StrategyParameters_vcPlace(self, start, length, consbits)

    def bogowin(self, lead, unseen, blanks):
        return _quackle.StrategyParameters_bogowin(self, lead, unseen, blanks)

    def superleave(self, leave):
        return _quackle.StrategyParameters_superleave(self, leave)
    __swig_destroy__ = _quackle.delete_StrategyParameters

# Register StrategyParameters in _quackle:
_quackle.StrategyParameters_swigregister(StrategyParameters)
class FlexibleAlphabetParameters(AlphabetParameters):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _quackle.FlexibleAlphabetParameters_swiginit(self, _quackle.new_FlexibleAlphabetParameters())

    def load(self, filename):
        return _quackle.FlexibleAlphabetParameters_load(self, filename)
    __swig_destroy__ = _quackle.delete_FlexibleAlphabetParameters

# Register FlexibleAlphabetParameters in _quackle:
_quackle.FlexibleAlphabetParameters_swigregister(FlexibleAlphabetParameters)
class UtilSettings(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _quackle.UtilSettings_swiginit(self, _quackle.new_UtilSettings())

    @staticmethod
    def _self():
        return _quackle.UtilSettings__self()
    octothorpBritish = property(_quackle.UtilSettings_octothorpBritish_get, _quackle.UtilSettings_octothorpBritish_set)
    vowelFirst = property(_quackle.UtilSettings_vowelFirst_get, _quackle.UtilSettings_vowelFirst_set)
    scoreInvalidAsZero = property(_quackle.UtilSettings_scoreInvalidAsZero_get, _quackle.UtilSettings_scoreInvalidAsZero_set)
    __swig_destroy__ = _quackle.delete_UtilSettings

# Register UtilSettings in _quackle:
_quackle.UtilSettings_swigregister(UtilSettings)
class Util(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def qstringToString(qstring):
        return _quackle.Util_qstringToString(qstring)

    @staticmethod
    def encode(qstring):
        return _quackle.Util_encode(qstring)

    @staticmethod
    def nonBlankEncode(qstring):
        return _quackle.Util_nonBlankEncode(qstring)

    @staticmethod
    def uvStringToQString(stdWString):
        return _quackle.Util_uvStringToQString(stdWString)

    @staticmethod
    def letterStringToQString(letterString):
        return _quackle.Util_letterStringToQString(letterString)

    @staticmethod
    def letterToQString(letter):
        return _quackle.Util_letterToQString(letter)

    @staticmethod
    def qstringToStdString(qstring):
        return _quackle.Util_qstringToStdString(qstring)

    @staticmethod
    def stdStringToQString(stdString):
        return _quackle.Util_stdStringToQString(stdString)

    @staticmethod
    def moveToDetailedString(move):
        return _quackle.Util_moveToDetailedString(move)

    @staticmethod
    def moveToSensitiveString(move):
        return _quackle.Util_moveToSensitiveString(move)

    @staticmethod
    def alphagram(*args):
        return _quackle.Util_alphagram(*args)

    @staticmethod
    def arrangeLettersForUser(*args):
        return _quackle.Util_arrangeLettersForUser(*args)

    @staticmethod
    def makeRack(letters):
        return _quackle.Util_makeRack(letters)

    @staticmethod
    def sanitizeUserVisibleLetterString(pipedString):
        return _quackle.Util_sanitizeUserVisibleLetterString(pipedString)

    @staticmethod
    def symbolsFor(word):
        return _quackle.Util_symbolsFor(word)

    def __init__(self):
        _quackle.Util_swiginit(self, _quackle.new_Util())
    __swig_destroy__ = _quackle.delete_Util

# Register Util in _quackle:
_quackle.Util_swigregister(Util)
class Logania(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _quackle.delete_Logania
    BasicLoad = _quackle.Logania_BasicLoad
    MaintainBoardPreparation = _quackle.Logania_MaintainBoardPreparation

    def read(self, stream, flags):
        return _quackle.Logania_read(self, stream, flags)

    def canRead(self, stream):
        return _quackle.Logania_canRead(self, stream)

    def write(self, game, stream):
        return _quackle.Logania_write(self, game, stream)

    def filter(self):
        return _quackle.Logania_filter(self)

# Register Logania in _quackle:
_quackle.Logania_swigregister(Logania)
class GCGIO(Logania):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _quackle.GCGIO_swiginit(self, _quackle.new_GCGIO())
    __swig_destroy__ = _quackle.delete_GCGIO

    def read(self, *args):
        return _quackle.GCGIO_read(self, *args)

    def canRead(self, stream):
        return _quackle.GCGIO_canRead(self, stream)

    def write(self, game, stream):
        return _quackle.GCGIO_write(self, game, stream)

    def filter(self):
        return _quackle.GCGIO_filter(self)

# Register GCGIO in _quackle:
_quackle.GCGIO_swigregister(GCGIO)

