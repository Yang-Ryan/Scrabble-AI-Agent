/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.2.0
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


#define SWIG_VERSION 0x040200
#define SWIGPYTHON
#define SWIG_PYTHON_DIRECTOR_NO_VTABLE

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

#if __cplusplus >=201103L
# define SWIG_NULLPTR nullptr
#else
# define SWIG_NULLPTR NULL
#endif 


#if defined(__GNUC__) && defined(_WIN32) && !defined(SWIG_PYTHON_NO_HYPOT_WORKAROUND)
/* Workaround for '::hypot' has not been declared', see https://bugs.python.org/issue11566 */
# include <math.h>
#endif

#if !defined(PY_SSIZE_T_CLEAN) && !defined(SWIG_NO_PY_SSIZE_T_CLEAN)
#define PY_SSIZE_T_CLEAN
#endif

#if __GNUC__ >= 7
#pragma GCC diagnostic push
#if defined(__cplusplus) && __cplusplus >=201703L
#pragma GCC diagnostic ignored "-Wregister" /* For python-2.7 headers that use register */
#endif
#endif

#if defined(_DEBUG) && defined(SWIG_PYTHON_INTERPRETER_NO_DEBUG)
/* Use debug wrappers with the Python release dll */

#if defined(_MSC_VER) && _MSC_VER >= 1929
/* Workaround compilation errors when redefining _DEBUG in MSVC 2019 version 16.10 and later
 * See https://github.com/swig/swig/issues/2090 */
# include <corecrt.h>
#endif

# undef _DEBUG
# include <Python.h>
# define _DEBUG 1
#else
# include <Python.h>
#endif

#if __GNUC__ >= 7
#pragma GCC diagnostic pop
#endif

#include <stdio.h>

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2
#define SWIG_POINTER_NO_NULL       0x4
#define SWIG_POINTER_CLEAR         0x8
#define SWIG_POINTER_RELEASE       (SWIG_POINTER_CLEAR | SWIG_POINTER_DISOWN)

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows returning the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
/* Runtime errors are < 0 */
#define SWIG_ERROR                 (-1)
/* Errors in range -1 to -99 are in swigerrors.swg (errors for all languages including those not using the runtime) */
/* Errors in range -100 to -199 are language specific errors defined in *errors.swg */
/* Errors < -200 are generic runtime specific errors */
#define SWIG_ERROR_RELEASE_NOT_OWNED (-200)

#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporary objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del object mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif

/* C99 and C++11 should provide snprintf, but define SWIG_NO_SNPRINTF
 * if you're missing it.
 */
#if ((defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L) || \
     (defined __cplusplus && __cplusplus >= 201103L) || \
     defined SWIG_HAVE_SNPRINTF) && \
    !defined SWIG_NO_SNPRINTF
# define SWIG_snprintf(O,S,F,A) snprintf(O,S,F,A)
# define SWIG_snprintf2(O,S,F,A,B) snprintf(O,S,F,A,B)
#else
/* Fallback versions ignore the buffer size, but most of our uses either have a
 * fixed maximum possible size or dynamically allocate a buffer that's large
 * enough.
 */
# define SWIG_snprintf(O,S,F,A) sprintf(O,F,A)
# define SWIG_snprintf2(O,S,F,A,B) sprintf(O,F,A,B)
#endif

#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(const swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  Choose the last
     name. It should be the most specific; a fully resolved name
     but not necessarily with default template parameters expanded. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/* SWIG Errors applicable to all language modules, values are reserved from -1 to -99 */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13


/* Compatibility macros for Python 3 */
#if PY_VERSION_HEX >= 0x03000000

#define PyClass_Check(obj) PyObject_IsInstance(obj, (PyObject *)&PyType_Type)
#define PyInt_Check(x) PyLong_Check(x)
#define PyInt_AsLong(x) PyLong_AsLong(x)
#define PyInt_FromLong(x) PyLong_FromLong(x)
#define PyInt_FromSize_t(x) PyLong_FromSize_t(x)
#define PyString_Check(name) PyBytes_Check(name)
#define PyString_FromString(x) PyUnicode_FromString(x)
#define PyString_Format(fmt, args)  PyUnicode_Format(fmt, args)
#define PyString_AsString(str) PyBytes_AsString(str)
#define PyString_Size(str) PyBytes_Size(str)	
#define PyString_InternFromString(key) PyUnicode_InternFromString(key)
#define Py_TPFLAGS_HAVE_CLASS Py_TPFLAGS_BASETYPE
#define _PyLong_FromSsize_t(x) PyLong_FromSsize_t(x)

#endif

#ifndef Py_TYPE
#  define Py_TYPE(op) ((op)->ob_type)
#endif

/* SWIG APIs for compatibility of both Python 2 & 3 */

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_FromFormat PyUnicode_FromFormat
#else
#  define SWIG_Python_str_FromFormat PyString_FromFormat
#endif


/* Wrapper around PyUnicode_AsUTF8AndSize - call Py_XDECREF on the returned pbytes when finished with the returned string */
SWIGINTERN const char *
SWIG_PyUnicode_AsUTF8AndSize(PyObject *str, Py_ssize_t *psize, PyObject **pbytes)
{
#if PY_VERSION_HEX >= 0x03030000
# if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x030A0000
  *pbytes = NULL;
  return PyUnicode_AsUTF8AndSize(str, psize);
# else
   *pbytes = PyUnicode_AsUTF8String(str);
   const char *chars = *pbytes ? PyBytes_AsString(*pbytes) : NULL;
   if (chars && psize)
     *psize = PyBytes_Size(*pbytes);
  return chars;
# endif
#else
  char *chars = NULL;
  *pbytes = NULL;
  PyString_AsStringAndSize(str, &chars, psize);
  return chars;
#endif
}

SWIGINTERN PyObject*
SWIG_Python_str_FromChar(const char *c)
{
#if PY_VERSION_HEX >= 0x03000000
  return PyUnicode_FromString(c); 
#else
  return PyString_FromString(c);
#endif
}

#ifndef PyObject_DEL
# define PyObject_DEL PyObject_Del
#endif

/* SWIGPY_USE_CAPSULE is no longer used within SWIG itself, but some user interface files check for it. */
# define SWIGPY_USE_CAPSULE
#ifdef SWIGPYTHON_BUILTIN
# define SWIGPY_CAPSULE_ATTR_NAME "type_pointer_capsule_builtin" SWIG_TYPE_TABLE_NAME
#else
# define SWIGPY_CAPSULE_ATTR_NAME "type_pointer_capsule" SWIG_TYPE_TABLE_NAME
#endif
# define SWIGPY_CAPSULE_NAME ("swig_runtime_data" SWIG_RUNTIME_VERSION "." SWIGPY_CAPSULE_ATTR_NAME)

#if PY_VERSION_HEX < 0x03020000
#define PyDescr_TYPE(x) (((PyDescrObject *)(x))->d_type)
#define PyDescr_NAME(x) (((PyDescrObject *)(x))->d_name)
#define Py_hash_t long
#endif

#ifdef Py_LIMITED_API
# define PyTuple_GET_ITEM PyTuple_GetItem
/* Note that PyTuple_SetItem() has different semantics from PyTuple_SET_ITEM as it decref's the original tuple item, so in general they cannot be used
  interchangeably. However in SWIG-generated code PyTuple_SET_ITEM is only used with newly initialized tuples without any items and for them this does work. */
# define PyTuple_SET_ITEM PyTuple_SetItem
# define PyTuple_GET_SIZE PyTuple_Size
# define PyCFunction_GET_FLAGS PyCFunction_GetFlags
# define PyCFunction_GET_FUNCTION PyCFunction_GetFunction
# define PyCFunction_GET_SELF PyCFunction_GetSelf
# define PyList_GET_ITEM PyList_GetItem
# define PyList_SET_ITEM PyList_SetItem
# define PySliceObject PyObject
#endif

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIME PyObject*
SWIG_Python_ErrorType(int code) {
  PyObject* type = 0;
  switch(code) {
  case SWIG_MemoryError:
    type = PyExc_MemoryError;
    break;
  case SWIG_IOError:
    type = PyExc_IOError;
    break;
  case SWIG_RuntimeError:
    type = PyExc_RuntimeError;
    break;
  case SWIG_IndexError:
    type = PyExc_IndexError;
    break;
  case SWIG_TypeError:
    type = PyExc_TypeError;
    break;
  case SWIG_DivisionByZero:
    type = PyExc_ZeroDivisionError;
    break;
  case SWIG_OverflowError:
    type = PyExc_OverflowError;
    break;
  case SWIG_SyntaxError:
    type = PyExc_SyntaxError;
    break;
  case SWIG_ValueError:
    type = PyExc_ValueError;
    break;
  case SWIG_SystemError:
    type = PyExc_SystemError;
    break;
  case SWIG_AttributeError:
    type = PyExc_AttributeError;
    break;
  default:
    type = PyExc_RuntimeError;
  }
  return type;
}


SWIGRUNTIME void
SWIG_Python_AddErrorMsg(const char* mesg)
{
  PyObject *type = 0;
  PyObject *value = 0;
  PyObject *traceback = 0;

  if (PyErr_Occurred())
    PyErr_Fetch(&type, &value, &traceback);
  if (value) {
    PyObject *old_str = PyObject_Str(value);
    PyObject *bytes = NULL;
    const char *tmp = SWIG_PyUnicode_AsUTF8AndSize(old_str, NULL, &bytes);
    PyErr_Clear();
    Py_XINCREF(type);
    if (tmp)
      PyErr_Format(type, "%s %s", tmp, mesg);
    else
      PyErr_Format(type, "%s", mesg);
    Py_XDECREF(bytes);
    Py_DECREF(old_str);
    Py_DECREF(value);
  } else {
    PyErr_SetString(PyExc_RuntimeError, mesg);
  }
}

SWIGRUNTIME int
SWIG_Python_TypeErrorOccurred(PyObject *obj)
{
  PyObject *error;
  if (obj)
    return 0;
  error = PyErr_Occurred();
  return error && PyErr_GivenExceptionMatches(error, PyExc_TypeError);
}

SWIGRUNTIME void
SWIG_Python_RaiseOrModifyTypeError(const char *message)
{
  if (SWIG_Python_TypeErrorOccurred(NULL)) {
    /* Use existing TypeError to preserve stacktrace and enhance with given message */
    PyObject *newvalue;
    PyObject *type = NULL, *value = NULL, *traceback = NULL;
    PyErr_Fetch(&type, &value, &traceback);
#if PY_VERSION_HEX >= 0x03000000
    newvalue = PyUnicode_FromFormat("%S\nAdditional information:\n%s", value, message);
#else
    newvalue = PyString_FromFormat("%s\nAdditional information:\n%s", PyString_AsString(value), message);
#endif
    if (newvalue) {
      Py_XDECREF(value);
      PyErr_Restore(type, newvalue, traceback);
    } else {
      PyErr_Restore(type, value, traceback);
    }
  } else {
    /* Raise TypeError using given message */
    PyErr_SetString(PyExc_TypeError, message);
  }
}

#if defined(SWIG_PYTHON_NO_THREADS)
#  if defined(SWIG_PYTHON_THREADS)
#    undef SWIG_PYTHON_THREADS
#  endif
#endif
#if defined(SWIG_PYTHON_THREADS) /* Threading support is enabled */
#  if !defined(SWIG_PYTHON_USE_GIL) && !defined(SWIG_PYTHON_NO_USE_GIL)
#    define SWIG_PYTHON_USE_GIL
#  endif
#  if defined(SWIG_PYTHON_USE_GIL) /* Use PyGILState threads calls */
#    if !defined(SWIG_PYTHON_INITIALIZE_THREADS)
#      if PY_VERSION_HEX < 0x03070000
#        define SWIG_PYTHON_INITIALIZE_THREADS PyEval_InitThreads()
#      else
#        define SWIG_PYTHON_INITIALIZE_THREADS
#      endif
#    endif
#    ifdef __cplusplus /* C++ code */
       class SWIG_Python_Thread_Block {
         bool status;
         PyGILState_STATE state;
       public:
         void end() { if (status) { PyGILState_Release(state); status = false;} }
         SWIG_Python_Thread_Block() : status(true), state(PyGILState_Ensure()) {}
         ~SWIG_Python_Thread_Block() { end(); }
       };
       class SWIG_Python_Thread_Allow {
         bool status;
         PyThreadState *save;
       public:
         void end() { if (status) { status = false; PyEval_RestoreThread(save); }}
         SWIG_Python_Thread_Allow() : status(true), save(PyEval_SaveThread()) {}
         ~SWIG_Python_Thread_Allow() { end(); }
       };
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   SWIG_Python_Thread_Block _swig_thread_block
#      define SWIG_PYTHON_THREAD_END_BLOCK     _swig_thread_block.end()
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   SWIG_Python_Thread_Allow _swig_thread_allow
#      define SWIG_PYTHON_THREAD_END_ALLOW     _swig_thread_allow.end()
#    else /* C code */
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   PyGILState_STATE _swig_thread_block = PyGILState_Ensure()
#      define SWIG_PYTHON_THREAD_END_BLOCK     PyGILState_Release(_swig_thread_block)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   PyThreadState *_swig_thread_allow = PyEval_SaveThread()
#      define SWIG_PYTHON_THREAD_END_ALLOW     PyEval_RestoreThread(_swig_thread_allow)
#    endif
#  else /* Old thread way, not implemented, user must provide it */
#    if !defined(SWIG_PYTHON_INITIALIZE_THREADS)
#      define SWIG_PYTHON_INITIALIZE_THREADS
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_BLOCK)
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_BLOCK)
#      define SWIG_PYTHON_THREAD_END_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_ALLOW)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_ALLOW)
#      define SWIG_PYTHON_THREAD_END_ALLOW
#    endif
#  endif
#else /* No thread support */
#  define SWIG_PYTHON_INITIALIZE_THREADS
#  define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#  define SWIG_PYTHON_THREAD_END_BLOCK
#  define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#  define SWIG_PYTHON_THREAD_END_ALLOW
#endif

/* -----------------------------------------------------------------------------
 * Python API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
  int type;
  const char *name;
  long lvalue;
  double dvalue;
  void   *pvalue;
  swig_type_info **ptype;
} swig_const_info;

#ifdef __cplusplus
}
#endif


/* -----------------------------------------------------------------------------
 * pyrun.swg
 *
 * This file contains the runtime support for Python modules
 * and includes code for managing global variables and pointer
 * type checking.
 *
 * ----------------------------------------------------------------------------- */

#if PY_VERSION_HEX < 0x02070000 /* 2.7.0 */
# error "This version of SWIG only supports Python >= 2.7"
#endif

#if PY_VERSION_HEX >= 0x03000000 && PY_VERSION_HEX < 0x03030000
# error "This version of SWIG only supports Python 3 >= 3.3"
#endif

/* Common SWIG API */

/* for raw pointers */
#define SWIG_Python_ConvertPtr(obj, pptr, type, flags)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Python_ConvertPtr(obj, pptr, type, flags)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, own)

#ifdef SWIGPYTHON_BUILTIN
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(self, ptr, type, flags)
#else
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(NULL, ptr, type, flags)
#endif

#define SWIG_InternalNewPointerObj(ptr, type, flags)	SWIG_Python_NewPointerObj(NULL, ptr, type, flags)

#define SWIG_CheckImplicit(ty)                          SWIG_Python_CheckImplicit(ty) 
#define SWIG_AcquirePtr(ptr, src)                       SWIG_Python_AcquirePtr(ptr, src)
#define swig_owntype                                    int

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_Python_ConvertFunctionPtr(obj, pptr, type)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_Python_NewPointerObj(NULL, ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Python_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer)             SWIG_Python_SetModule(pointer)
#define SWIG_NewClientData(obj)                         SwigPyClientData_New(obj)

#define SWIG_SetErrorObj                                SWIG_Python_SetErrorObj                            
#define SWIG_SetErrorMsg                        	SWIG_Python_SetErrorMsg				   
#define SWIG_ErrorType(code)                    	SWIG_Python_ErrorType(code)                        
#define SWIG_Error(code, msg)            		SWIG_Python_SetErrorMsg(SWIG_ErrorType(code), msg) 
#define SWIG_fail                        		goto fail					   


/* Runtime API implementation */

/* Error manipulation */

SWIGINTERN void 
SWIG_Python_SetErrorObj(PyObject *errtype, PyObject *obj) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK; 
  PyErr_SetObject(errtype, obj);
  Py_DECREF(obj);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

SWIGINTERN void 
SWIG_Python_SetErrorMsg(PyObject *errtype, const char *msg) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  PyErr_SetString(errtype, msg);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

#define SWIG_Python_Raise(obj, type, desc)  SWIG_Python_SetErrorObj(SWIG_Python_ExceptionType(desc), obj)

/* Set a constant value */

#if defined(SWIGPYTHON_BUILTIN)

SWIGINTERN void
SwigPyBuiltin_AddPublicSymbol(PyObject *seq, const char *key) {
  PyObject *s = PyString_InternFromString(key);
  PyList_Append(seq, s);
  Py_DECREF(s);
}

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, PyObject *public_interface, const char *name, PyObject *obj) {   
  PyDict_SetItemString(d, name, obj);
  Py_DECREF(obj);
  if (public_interface)
    SwigPyBuiltin_AddPublicSymbol(public_interface, name);
}

#else

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, const char *name, PyObject *obj) {   
  PyDict_SetItemString(d, name, obj);
  Py_DECREF(obj);                            
}

#endif

/* Append a value to the result obj */

SWIGINTERN PyObject*
SWIG_Python_AppendOutput(PyObject* result, PyObject* obj) {
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyList_Check(result)) {
      PyObject *o2 = result;
      result = PyList_New(1);
      if (result) {
        PyList_SET_ITEM(result, 0, o2);
      } else {
        Py_DECREF(obj);
        return o2;
      }
    }
    PyList_Append(result,obj);
    Py_DECREF(obj);
  }
  return result;
}

/* Unpack the argument tuple */

SWIGINTERN Py_ssize_t
SWIG_Python_UnpackTuple(PyObject *args, const char *name, Py_ssize_t min, Py_ssize_t max, PyObject **objs)
{
  if (!args) {
    if (!min && !max) {
      return 1;
    } else {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got none", 
		   name, (min == max ? "" : "at least "), (int)min);
      return 0;
    }
  }  
  if (!PyTuple_Check(args)) {
    if (min <= 1 && max >= 1) {
      Py_ssize_t i;
      objs[0] = args;
      for (i = 1; i < max; ++i) {
	objs[i] = 0;
      }
      return 2;
    }
    PyErr_SetString(PyExc_SystemError, "UnpackTuple() argument list is not a tuple");
    return 0;
  } else {
    Py_ssize_t l = PyTuple_GET_SIZE(args);
    if (l < min) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at least "), (int)min, (int)l);
      return 0;
    } else if (l > max) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at most "), (int)max, (int)l);
      return 0;
    } else {
      Py_ssize_t i;
      for (i = 0; i < l; ++i) {
	objs[i] = PyTuple_GET_ITEM(args, i);
      }
      for (; l < max; ++l) {
	objs[l] = 0;
      }
      return i + 1;
    }    
  }
}

SWIGINTERN int
SWIG_Python_CheckNoKeywords(PyObject *kwargs, const char *name) {
  int no_kwargs = 1;
  if (kwargs) {
    assert(PyDict_Check(kwargs));
    if (PyDict_Size(kwargs) > 0) {
      PyErr_Format(PyExc_TypeError, "%s() does not take keyword arguments", name);
      no_kwargs = 0;
    }
  }
  return no_kwargs;
}

/* A functor is a function object with one single object argument */
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunctionObjArgs(functor, obj, NULL);

/*
  Helper for static pointer initialization for both C and C++ code, for example
  static PyObject *SWIG_STATIC_POINTER(MyVar) = NewSomething(...);
*/
#ifdef __cplusplus
#define SWIG_STATIC_POINTER(var)  var
#else
#define SWIG_STATIC_POINTER(var)  var = 0; if (!var) var
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Python-specific SWIG API */
#define SWIG_newvarlink()                             SWIG_Python_newvarlink()
#define SWIG_addvarlink(p, name, get_attr, set_attr)  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define SWIG_InstallConstants(d, constants)           SWIG_Python_InstallConstants(d, constants)
 
/* -----------------------------------------------------------------------------
 * global variable support code.
 * ----------------------------------------------------------------------------- */
 
typedef struct swig_globalvar {   
  char       *name;                  /* Name of global variable */
  PyObject *(*get_attr)(void);       /* Return the current value */
  int       (*set_attr)(PyObject *); /* Set the value */
  struct swig_globalvar *next;
} swig_globalvar;

typedef struct swig_varlinkobject {
  PyObject_HEAD
  swig_globalvar *vars;
} swig_varlinkobject;

SWIGINTERN PyObject *
swig_varlink_repr(PyObject *SWIGUNUSEDPARM(v)) {
#if PY_VERSION_HEX >= 0x03000000
  return PyUnicode_InternFromString("<Swig global variables>");
#else
  return PyString_FromString("<Swig global variables>");
#endif
}

SWIGINTERN PyObject *
swig_varlink_str(PyObject *o) {
  swig_varlinkobject *v = (swig_varlinkobject *) o;
#if PY_VERSION_HEX >= 0x03000000
  PyObject *str = PyUnicode_InternFromString("(");
  PyObject *tail;
  PyObject *joined;
  swig_globalvar *var;
  for (var = v->vars; var; var=var->next) {
    tail = PyUnicode_FromString(var->name);
    joined = PyUnicode_Concat(str, tail);
    Py_DecRef(str);
    Py_DecRef(tail);
    str = joined;
    if (var->next) {
        tail = PyUnicode_InternFromString(", ");
        joined = PyUnicode_Concat(str, tail);
        Py_DecRef(str);
        Py_DecRef(tail);
        str = joined;
    }
  }
  tail = PyUnicode_InternFromString(")");
  joined = PyUnicode_Concat(str, tail);
  Py_DecRef(str);
  Py_DecRef(tail);
  str = joined;
#else
  PyObject *str = PyString_FromString("(");
  swig_globalvar *var;
  for (var = v->vars; var; var=var->next) {
    PyString_ConcatAndDel(&str,PyString_FromString(var->name));
    if (var->next) PyString_ConcatAndDel(&str,PyString_FromString(", "));
  }
  PyString_ConcatAndDel(&str,PyString_FromString(")"));
#endif
  return str;
}

SWIGINTERN void
swig_varlink_dealloc(PyObject *o) {
  swig_varlinkobject *v = (swig_varlinkobject *) o;
  swig_globalvar *var = v->vars;
  while (var) {
    swig_globalvar *n = var->next;
    free(var->name);
    free(var);
    var = n;
  }
}

SWIGINTERN PyObject *
swig_varlink_getattr(PyObject *o, char *n) {
  swig_varlinkobject *v = (swig_varlinkobject *) o;
  PyObject *res = NULL;
  swig_globalvar *var = v->vars;
  while (var) {
    if (strcmp(var->name,n) == 0) {
      res = (*var->get_attr)();
      break;
    }
    var = var->next;
  }
  if (res == NULL && !PyErr_Occurred()) {
    PyErr_Format(PyExc_AttributeError, "Unknown C global variable '%s'", n);
  }
  return res;
}

SWIGINTERN int
swig_varlink_setattr(PyObject *o, char *n, PyObject *p) {
  swig_varlinkobject *v = (swig_varlinkobject *) o;
  int res = 1;
  swig_globalvar *var = v->vars;
  while (var) {
    if (strcmp(var->name,n) == 0) {
      res = (*var->set_attr)(p);
      break;
    }
    var = var->next;
  }
  if (res == 1 && !PyErr_Occurred()) {
    PyErr_Format(PyExc_AttributeError, "Unknown C global variable '%s'", n);
  }
  return res;
}

SWIGINTERN PyTypeObject*
swig_varlink_type(void) {
  static char varlink__doc__[] = "Swig var link object";
#ifndef Py_LIMITED_API
  static PyTypeObject varlink_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
#if PY_VERSION_HEX >= 0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                  /* ob_size */
#endif
      "swigvarlink",                      /* tp_name */
      sizeof(swig_varlinkobject),         /* tp_basicsize */
      0,                                  /* tp_itemsize */
      (destructor) swig_varlink_dealloc,  /* tp_dealloc */
#if PY_VERSION_HEX < 0x030800b4
      (printfunc)0,                       /*tp_print*/
#else
      (Py_ssize_t)0,                      /*tp_vectorcall_offset*/
#endif
      (getattrfunc) swig_varlink_getattr, /* tp_getattr */
      (setattrfunc) swig_varlink_setattr, /* tp_setattr */
      0,                                  /* tp_compare */
      (reprfunc) swig_varlink_repr,       /* tp_repr */
      0,                                  /* tp_as_number */
      0,                                  /* tp_as_sequence */
      0,                                  /* tp_as_mapping */
      0,                                  /* tp_hash */
      0,                                  /* tp_call */
      (reprfunc) swig_varlink_str,        /* tp_str */
      0,                                  /* tp_getattro */
      0,                                  /* tp_setattro */
      0,                                  /* tp_as_buffer */
      0,                                  /* tp_flags */
      varlink__doc__,                     /* tp_doc */
      0,                                  /* tp_traverse */
      0,                                  /* tp_clear */
      0,                                  /* tp_richcompare */
      0,                                  /* tp_weaklistoffset */
      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
      0,                                  /* tp_del */
      0,                                  /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
      0,                                  /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
      0,                                  /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
      0,                                  /* tp_print */
#endif
#if PY_VERSION_HEX >= 0x030C0000
      0,                                  /* tp_watched */
#endif
#ifdef COUNT_ALLOCS
      0,                                  /* tp_allocs */
      0,                                  /* tp_frees */
      0,                                  /* tp_maxalloc */
      0,                                  /* tp_prev */
      0                                   /* tp_next */
#endif
    };
    varlink_type = tmp;
    type_init = 1;
    if (PyType_Ready(&varlink_type) < 0)
      return NULL;
  }
  return &varlink_type;
#else
  PyType_Slot slots[] = {
    { Py_tp_dealloc, (void *)swig_varlink_dealloc },
    { Py_tp_repr, (void *)swig_varlink_repr },
    { Py_tp_getattr, (void *)swig_varlink_getattr },
    { Py_tp_setattr, (void *)swig_varlink_setattr },
    { Py_tp_str, (void *)swig_varlink_str },
    { Py_tp_doc, (void *)varlink__doc__ },
    { 0, NULL }
  };
  PyType_Spec spec = {
    "swigvarlink",
    sizeof(swig_varlinkobject),
    0,
    Py_TPFLAGS_DEFAULT,
    slots
  };
  return (PyTypeObject *)PyType_FromSpec(&spec);
#endif
}

/* Create a variable linking object for use later */
SWIGINTERN PyObject *
SWIG_Python_newvarlink(void) {
  swig_varlinkobject *result = PyObject_New(swig_varlinkobject, swig_varlink_type());
  if (result) {
    result->vars = 0;
  }
  return ((PyObject*) result);
}

SWIGINTERN void 
SWIG_Python_addvarlink(PyObject *p, const char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
  swig_varlinkobject *v = (swig_varlinkobject *) p;
  swig_globalvar *gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
  if (gv) {
    size_t size = strlen(name)+1;
    gv->name = (char *)malloc(size);
    if (gv->name) {
      memcpy(gv->name, name, size);
      gv->get_attr = get_attr;
      gv->set_attr = set_attr;
      gv->next = v->vars;
    }
  }
  v->vars = gv;
}


static PyObject *Swig_Globals_global = NULL;
  
SWIGINTERN PyObject *
SWIG_globals(void) {
  if (Swig_Globals_global == NULL) {
    Swig_Globals_global = SWIG_newvarlink();
  }
  return Swig_Globals_global;
}

#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * Pointer declarations
 * ----------------------------------------------------------------------------- */

/* Flags for new pointer objects */
#define SWIG_POINTER_NOSHADOW       (SWIG_POINTER_OWN      << 1)
#define SWIG_POINTER_NEW            (SWIG_POINTER_NOSHADOW | SWIG_POINTER_OWN)

#define SWIG_POINTER_IMPLICIT_CONV  (SWIG_POINTER_DISOWN   << 1)

#define SWIG_BUILTIN_TP_INIT	    (SWIG_POINTER_OWN << 2)
#define SWIG_BUILTIN_INIT	    (SWIG_BUILTIN_TP_INIT | SWIG_POINTER_OWN)

#ifdef __cplusplus
extern "C" {
#endif

/* The python void return value */

SWIGRUNTIMEINLINE PyObject * 
SWIG_Py_Void(void)
{
  PyObject *none = Py_None;
  Py_INCREF(none);
  return none;
}

/* SwigPyClientData */

typedef struct {
  PyObject *klass;
  PyObject *newraw;
  PyObject *newargs;
  PyObject *destroy;
  int delargs;
  int implicitconv;
  PyTypeObject *pytype;
} SwigPyClientData;

SWIGRUNTIMEINLINE int 
SWIG_Python_CheckImplicit(swig_type_info *ty)
{
  SwigPyClientData *data = (SwigPyClientData *)ty->clientdata;
  int fail = data ? data->implicitconv : 0;
  if (fail)
    PyErr_SetString(PyExc_TypeError, "Implicit conversion is prohibited for explicit constructors.");
  return fail;
}

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_ExceptionType(swig_type_info *desc) {
  SwigPyClientData *data = desc ? (SwigPyClientData *) desc->clientdata : 0;
  PyObject *klass = data ? data->klass : 0;
  return (klass ? klass : PyExc_RuntimeError);
}


SWIGRUNTIME SwigPyClientData * 
SwigPyClientData_New(PyObject* obj)
{
  if (!obj) {
    return 0;
  } else {
    SwigPyClientData *data = (SwigPyClientData *)malloc(sizeof(SwigPyClientData));
    /* the klass element */
    data->klass = obj;
    Py_INCREF(data->klass);
    /* the newraw method and newargs arguments used to create a new raw instance */
    if (PyClass_Check(obj)) {
      data->newraw = 0;
      Py_INCREF(obj);
      data->newargs = obj;
    } else {
      data->newraw = PyObject_GetAttrString(data->klass, "__new__");
      if (data->newraw) {
        data->newargs = PyTuple_New(1);
        if (data->newargs) {
          Py_INCREF(obj);
          PyTuple_SET_ITEM(data->newargs, 0, obj);
        } else {
          Py_DECREF(data->newraw);
          Py_DECREF(data->klass);
          free(data);
          return 0;
        }
      } else {
        Py_INCREF(obj);
        data->newargs = obj;
      }
    }
    /* the destroy method, aka as the C++ delete method */
    data->destroy = PyObject_GetAttrString(data->klass, "__swig_destroy__");
    if (PyErr_Occurred()) {
      PyErr_Clear();
      data->destroy = 0;
    }
    if (data->destroy) {
      data->delargs = !(PyCFunction_GET_FLAGS(data->destroy) & METH_O);
    } else {
      data->delargs = 0;
    }
    data->implicitconv = 0;
    data->pytype = 0;
    return data;
  }
}

SWIGRUNTIME void 
SwigPyClientData_Del(SwigPyClientData *data)
{
  Py_XDECREF(data->klass);
  Py_XDECREF(data->newraw);
  Py_XDECREF(data->newargs);
  Py_XDECREF(data->destroy);
  free(data);
}

/* =============== SwigPyObject =====================*/

typedef struct {
  PyObject_HEAD
  void *ptr;
  swig_type_info *ty;
  int own;
  PyObject *next;
#ifdef SWIGPYTHON_BUILTIN
  PyObject *dict;
#endif
} SwigPyObject;


#ifdef SWIGPYTHON_BUILTIN

SWIGRUNTIME PyObject *
SwigPyObject_get___dict__(PyObject *v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *)v;

  if (!sobj->dict)
    sobj->dict = PyDict_New();

  Py_XINCREF(sobj->dict);
  return sobj->dict;
}

#endif

SWIGRUNTIME PyObject *
SwigPyObject_long(SwigPyObject *v)
{
  return PyLong_FromVoidPtr(v->ptr);
}

SWIGRUNTIME PyObject *
SwigPyObject_format(const char* fmt, SwigPyObject *v)
{
  PyObject *res = NULL;
  PyObject *args = PyTuple_New(1);
  if (args) {
    PyObject *val = SwigPyObject_long(v);
    if (val) {
      PyObject *ofmt;
      PyTuple_SET_ITEM(args, 0, val);
      ofmt = SWIG_Python_str_FromChar(fmt);
      if (ofmt) {
#if PY_VERSION_HEX >= 0x03000000
        res = PyUnicode_Format(ofmt,args);
#else
        res = PyString_Format(ofmt,args);
#endif
        Py_DECREF(ofmt);
      }
    }
    Py_DECREF(args);
  }
  return res;
}

SWIGRUNTIME PyObject *
SwigPyObject_oct(SwigPyObject *v)
{
  return SwigPyObject_format("%o",v);
}

SWIGRUNTIME PyObject *
SwigPyObject_hex(SwigPyObject *v)
{
  return SwigPyObject_format("%x",v);
}

SWIGRUNTIME PyObject *
SwigPyObject_repr(SwigPyObject *v)
{
  const char *name = SWIG_TypePrettyName(v->ty);
  PyObject *repr = SWIG_Python_str_FromFormat("<Swig Object of type '%s' at %p>", (name ? name : "unknown"), (void *)v);
  if (repr && v->next) {
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next);
    if (nrep) {
# if PY_VERSION_HEX >= 0x03000000
      PyObject *joined = PyUnicode_Concat(repr, nrep);
      Py_DecRef(repr);
      Py_DecRef(nrep);
      repr = joined;
# else
      PyString_ConcatAndDel(&repr,nrep);
# endif
    } else {
      Py_DecRef(repr);
      repr = NULL;
    }
  }
  return repr;
}

/* We need a version taking two PyObject* parameters so it's a valid
 * PyCFunction to use in swigobject_methods[]. */
SWIGRUNTIME PyObject *
SwigPyObject_repr2(PyObject *v, PyObject *SWIGUNUSEDPARM(args))
{
  return SwigPyObject_repr((SwigPyObject*)v);
}

SWIGRUNTIME int
SwigPyObject_compare(SwigPyObject *v, SwigPyObject *w)
{
  void *i = v->ptr;
  void *j = w->ptr;
  return (i < j) ? -1 : ((i > j) ? 1 : 0);
}

/* Added for Python 3.x, would it also be useful for Python 2.x? */
SWIGRUNTIME PyObject*
SwigPyObject_richcompare(SwigPyObject *v, SwigPyObject *w, int op)
{
  PyObject* res = NULL;
  if (!PyErr_Occurred()) {
    if (op != Py_EQ && op != Py_NE) {
      Py_INCREF(Py_NotImplemented);
      return Py_NotImplemented;
    }
    res = PyBool_FromLong( (SwigPyObject_compare(v, w)==0) == (op == Py_EQ) ? 1 : 0);
  }
  return res;  
}


SWIGRUNTIME PyTypeObject* SwigPyObject_TypeOnce(void);

#ifdef SWIGPYTHON_BUILTIN
static swig_type_info *SwigPyObject_stype = 0;
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
    SwigPyClientData *cd;
    assert(SwigPyObject_stype);
    cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
    assert(cd);
    assert(cd->pytype);
    return cd->pytype;
}
#else
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyObject_TypeOnce();
  return type;
}
#endif

SWIGRUNTIMEINLINE int
SwigPyObject_Check(PyObject *op) {
  PyTypeObject *target_tp = SwigPyObject_type();
  PyTypeObject *op_type = Py_TYPE(op);
#ifdef SWIGPYTHON_BUILTIN
  if (PyType_IsSubtype(op_type, target_tp))
    return 1;
  return (strcmp(op_type->tp_name, "SwigPyObject") == 0);
#else
  if (op_type == target_tp)
    return 1;
# ifdef Py_LIMITED_API
  int cmp;
  PyObject *tp_name = PyObject_GetAttrString((PyObject *)op_type, "__name__");
  if (!tp_name)
    return 0;
  cmp = PyUnicode_CompareWithASCIIString(tp_name, "SwigPyObject");
  Py_DECREF(tp_name);
  return cmp == 0;
# else
  return (strcmp(op_type->tp_name, "SwigPyObject") == 0);
# endif
#endif
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own);

static PyObject* Swig_Capsule_global = NULL;

SWIGRUNTIME void
SwigPyObject_dealloc(PyObject *v)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  PyObject *next = sobj->next;
  if (sobj->own == SWIG_POINTER_OWN) {
    swig_type_info *ty = sobj->ty;
    SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
    PyObject *destroy = data ? data->destroy : 0;
    if (destroy) {
      /* destroy is always a VARARGS method */
      PyObject *res;

      /* PyObject_CallFunction() has the potential to silently drop
         the active exception.  In cases of unnamed temporary
         variable or where we just finished iterating over a generator
         StopIteration will be active right now, and this needs to
         remain true upon return from SwigPyObject_dealloc.  So save
         and restore. */
      
      PyObject *type = NULL, *value = NULL, *traceback = NULL;
      PyErr_Fetch(&type, &value, &traceback);

      if (data->delargs) {
        /* we need to create a temporary object to carry the destroy operation */
        PyObject *tmp = SwigPyObject_New(sobj->ptr, ty, 0);
        if (tmp) {
          res = SWIG_Python_CallFunctor(destroy, tmp);
        } else {
          res = 0;
        }
        Py_XDECREF(tmp);
      } else {
        PyCFunction meth = PyCFunction_GET_FUNCTION(destroy);
        PyObject *mself = PyCFunction_GET_SELF(destroy);
        res = ((*meth)(mself, v));
      }
      if (!res)
        PyErr_WriteUnraisable(destroy);

      PyErr_Restore(type, value, traceback);

      Py_XDECREF(res);
    } 
#if !defined(SWIG_PYTHON_SILENT_MEMLEAK)
    else {
      const char *name = SWIG_TypePrettyName(ty);
      printf("swig/python detected a memory leak of type '%s', no destructor found.\n", (name ? name : "unknown"));
    }
#endif
    Py_XDECREF(Swig_Capsule_global);
  }
  Py_XDECREF(next);
#ifdef SWIGPYTHON_BUILTIN
  Py_XDECREF(sobj->dict);
#endif
  PyObject_DEL(v);
}

SWIGRUNTIME PyObject* 
SwigPyObject_append(PyObject* v, PyObject* next)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  if (!SwigPyObject_Check(next)) {
    PyErr_SetString(PyExc_TypeError, "Attempt to append a non SwigPyObject");
    return NULL;
  }
  ((SwigPyObject *)next)->next = sobj->next;
  sobj->next = next;
  Py_INCREF(next);
  return SWIG_Py_Void();
}

SWIGRUNTIME PyObject* 
SwigPyObject_next(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  if (sobj->next) {    
    Py_INCREF(sobj->next);
    return sobj->next;
  } else {
    return SWIG_Py_Void();
  }
}

SWIGINTERN PyObject*
SwigPyObject_disown(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = 0;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
SwigPyObject_acquire(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = SWIG_POINTER_OWN;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
SwigPyObject_own(PyObject *v, PyObject *args)
{
  PyObject *val = 0;
  if (!PyArg_UnpackTuple(args, "own", 0, 1, &val)) {
    return NULL;
  } else {
    SwigPyObject *sobj = (SwigPyObject *)v;
    PyObject *obj = PyBool_FromLong(sobj->own);
    if (val) {
      if (PyObject_IsTrue(val)) {
        Py_DECREF(SwigPyObject_acquire(v,args));
      } else {
        Py_DECREF(SwigPyObject_disown(v,args));
      }
    } 
    return obj;
  }
}

static PyMethodDef
swigobject_methods[] = {
  {"disown",  SwigPyObject_disown,  METH_NOARGS,  "releases ownership of the pointer"},
  {"acquire", SwigPyObject_acquire, METH_NOARGS,  "acquires ownership of the pointer"},
  {"own",     SwigPyObject_own,     METH_VARARGS, "returns/sets ownership of the pointer"},
  {"append",  SwigPyObject_append,  METH_O,       "appends another 'this' object"},
  {"next",    SwigPyObject_next,    METH_NOARGS,  "returns the next 'this' object"},
  {"__repr__",SwigPyObject_repr2,   METH_NOARGS,  "returns object representation"},
  {0, 0, 0, 0}  
};

SWIGRUNTIME PyTypeObject*
SwigPyObject_TypeOnce(void) {
  static char swigobject_doc[] = "Swig object carries a C/C++ instance pointer";
#ifndef Py_LIMITED_API
  static PyNumberMethods SwigPyObject_as_number = {
    (binaryfunc)0, /*nb_add*/
    (binaryfunc)0, /*nb_subtract*/
    (binaryfunc)0, /*nb_multiply*/
    /* nb_divide removed in Python 3 */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc)0, /*nb_divide*/
#endif
    (binaryfunc)0, /*nb_remainder*/
    (binaryfunc)0, /*nb_divmod*/
    (ternaryfunc)0,/*nb_power*/
    (unaryfunc)0,  /*nb_negative*/
    (unaryfunc)0,  /*nb_positive*/
    (unaryfunc)0,  /*nb_absolute*/
    (inquiry)0,    /*nb_nonzero*/
    0,		   /*nb_invert*/
    0,		   /*nb_lshift*/
    0,		   /*nb_rshift*/
    0,		   /*nb_and*/
    0,		   /*nb_xor*/
    0,		   /*nb_or*/
#if PY_VERSION_HEX < 0x03000000
    0,   /*nb_coerce*/
#endif
    (unaryfunc)SwigPyObject_long, /*nb_int*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_long, /*nb_long*/
#else
    0, /*nb_reserved*/
#endif
    (unaryfunc)0,                 /*nb_float*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_oct,  /*nb_oct*/
    (unaryfunc)SwigPyObject_hex,  /*nb_hex*/
#endif
#if PY_VERSION_HEX >= 0x03050000 /* 3.5 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_matrix_multiply */
#elif PY_VERSION_HEX >= 0x03000000 /* 3.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index, nb_inplace_divide removed */
#else
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index */
#endif
  };

  static PyTypeObject swigpyobject_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
#if PY_VERSION_HEX >= 0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      "SwigPyObject",                       /* tp_name */
      sizeof(SwigPyObject),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyObject_dealloc,     /* tp_dealloc */
#if PY_VERSION_HEX < 0x030800b4
      (printfunc)0,                         /*tp_print*/
#else
      (Py_ssize_t)0,                        /*tp_vectorcall_offset*/
#endif
      (getattrfunc)0,                       /* tp_getattr */
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
      0, /* tp_reserved in 3.0.1, tp_compare in 3.0.0 but not used */
#else
      (cmpfunc)SwigPyObject_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyObject_repr,          /* tp_repr */
      &SwigPyObject_as_number,              /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      0,                                    /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigobject_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      (richcmpfunc)SwigPyObject_richcompare,/* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      swigobject_methods,                   /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
      0,                                    /* tp_del */
      0,                                    /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
      0,                                    /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
      0,                                    /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
      0,                                    /* tp_print */
#endif
#if PY_VERSION_HEX >= 0x030C0000
      0,                                    /* tp_watched */
#endif
#ifdef COUNT_ALLOCS
      0,                                    /* tp_allocs */
      0,                                    /* tp_frees */
      0,                                    /* tp_maxalloc */
      0,                                    /* tp_prev */
      0                                     /* tp_next */
#endif
    };
    swigpyobject_type = tmp;
    type_init = 1;
    if (PyType_Ready(&swigpyobject_type) != 0)
      return NULL;
  }
  return &swigpyobject_type;
#else
  PyType_Slot slots[] = {
    { Py_tp_dealloc, (void *)SwigPyObject_dealloc },
    { Py_tp_repr, (void *)SwigPyObject_repr },
    { Py_tp_getattro, (void *)PyObject_GenericGetAttr },
    { Py_tp_doc, (void *)swigobject_doc },
    { Py_tp_richcompare, (void *)SwigPyObject_richcompare },
    { Py_tp_methods, (void *)swigobject_methods },
    { Py_nb_int, (void *)SwigPyObject_long },
    { 0, NULL }
  };
  PyType_Spec spec = {
    "SwigPyObject",
    sizeof(SwigPyObject),
    0,
    Py_TPFLAGS_DEFAULT,
    slots
  };
  return (PyTypeObject *)PyType_FromSpec(&spec);
#endif
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own)
{
  SwigPyObject *sobj = PyObject_New(SwigPyObject, SwigPyObject_type());
  if (sobj) {
    sobj->ptr  = ptr;
    sobj->ty   = ty;
    sobj->own  = own;
    sobj->next = 0;
#ifdef SWIGPYTHON_BUILTIN
    sobj->dict = 0;
#endif
    if (own == SWIG_POINTER_OWN) {
      /* Obtain a reference to the Python capsule wrapping the module information, so that the
       * module information is correctly destroyed after all SWIG python objects have been freed
       * by the GC (and corresponding destructors invoked) */
      Py_XINCREF(Swig_Capsule_global);
    }
  }
  return (PyObject *)sobj;
}

/* -----------------------------------------------------------------------------
 * Implements a simple Swig Packed type, and use it instead of string
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *pack;
  swig_type_info *ty;
  size_t size;
} SwigPyPacked;

SWIGRUNTIME PyObject *
SwigPyPacked_repr(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    return SWIG_Python_str_FromFormat("<Swig Packed at %s%s>", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromFormat("<Swig Packed %s>", v->ty->name);
  }  
}

SWIGRUNTIME PyObject *
SwigPyPacked_str(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))){
    return SWIG_Python_str_FromFormat("%s%s", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromChar(v->ty->name);
  }  
}

SWIGRUNTIME int
SwigPyPacked_compare(SwigPyPacked *v, SwigPyPacked *w)
{
  size_t i = v->size;
  size_t j = w->size;
  int s = (i < j) ? -1 : ((i > j) ? 1 : 0);
  return s ? s : strncmp((const char *)v->pack, (const char *)w->pack, 2*v->size);
}

SWIGRUNTIME PyTypeObject* SwigPyPacked_TypeOnce(void);

SWIGRUNTIME PyTypeObject*
SwigPyPacked_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyPacked_TypeOnce();
  return type;
}

SWIGRUNTIMEINLINE int
SwigPyPacked_Check(PyObject *op) {
  PyTypeObject* op_type = Py_TYPE(op);
  if (op_type == SwigPyPacked_TypeOnce())
    return 1;
#ifdef Py_LIMITED_API
  int cmp;
  PyObject *tp_name = PyObject_GetAttrString((PyObject *)op_type, "__name__");
  if (!tp_name)
    return 0;
  cmp = PyUnicode_CompareWithASCIIString(tp_name, "SwigPyPacked");
  Py_DECREF(tp_name);
  return cmp == 0;
#else
  return (strcmp(op_type->tp_name, "SwigPyPacked") == 0);
#endif
}

SWIGRUNTIME void
SwigPyPacked_dealloc(PyObject *v)
{
  if (SwigPyPacked_Check(v)) {
    SwigPyPacked *sobj = (SwigPyPacked *) v;
    free(sobj->pack);
  }
  PyObject_DEL(v);
}

SWIGRUNTIME PyTypeObject*
SwigPyPacked_TypeOnce(void) {
  static char swigpacked_doc[] = "Swig object carries a C/C++ instance pointer";
#ifndef Py_LIMITED_API
  static PyTypeObject swigpypacked_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
#if PY_VERSION_HEX>=0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      "SwigPyPacked",                       /* tp_name */
      sizeof(SwigPyPacked),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyPacked_dealloc,     /* tp_dealloc */
#if PY_VERSION_HEX < 0x030800b4
      (printfunc)0,                         /*tp_print*/
#else
      (Py_ssize_t)0,                        /*tp_vectorcall_offset*/
#endif
      (getattrfunc)0,                       /* tp_getattr */
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX>=0x03000000
      0, /* tp_reserved in 3.0.1 */
#else
      (cmpfunc)SwigPyPacked_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyPacked_repr,          /* tp_repr */
      0,                                    /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      (reprfunc)SwigPyPacked_str,           /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigpacked_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      0,                                    /* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      0,                                    /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
      0,                                    /* tp_del */
      0,                                    /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
      0,                                    /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
      0,                                    /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
      0,                                    /* tp_print */
#endif
#if PY_VERSION_HEX >= 0x030C0000
      0,                                    /* tp_watched */
#endif
#ifdef COUNT_ALLOCS
      0,                                    /* tp_allocs */
      0,                                    /* tp_frees */
      0,                                    /* tp_maxalloc */
      0,                                    /* tp_prev */
      0                                     /* tp_next */
#endif
    };
    swigpypacked_type = tmp;
    type_init = 1;
    if (PyType_Ready(&swigpypacked_type) != 0)
      return NULL;
  }
  return &swigpypacked_type;
#else
  PyType_Slot slots[] = {
    { Py_tp_dealloc, (void *)SwigPyPacked_dealloc },
    { Py_tp_repr, (void *)SwigPyPacked_repr },
    { Py_tp_str, (void *)SwigPyPacked_str },
    { Py_tp_getattro, (void *)PyObject_GenericGetAttr },
    { Py_tp_doc, (void *)swigpacked_doc },
    { 0, NULL }
  };
  PyType_Spec spec = {
    "SwigPyPacked",
    sizeof(SwigPyPacked),
    0,
    Py_TPFLAGS_DEFAULT,
    slots
  };
  return (PyTypeObject *)PyType_FromSpec(&spec);
#endif
}

SWIGRUNTIME PyObject *
SwigPyPacked_New(void *ptr, size_t size, swig_type_info *ty)
{
  SwigPyPacked *sobj = PyObject_New(SwigPyPacked, SwigPyPacked_type());
  if (sobj) {
    void *pack = malloc(size);
    if (pack) {
      memcpy(pack, ptr, size);
      sobj->pack = pack;
      sobj->ty   = ty;
      sobj->size = size;
    } else {
      PyObject_DEL((PyObject *) sobj);
      sobj = 0;
    }
  }
  return (PyObject *) sobj;
}

SWIGRUNTIME swig_type_info *
SwigPyPacked_UnpackData(PyObject *obj, void *ptr, size_t size)
{
  if (SwigPyPacked_Check(obj)) {
    SwigPyPacked *sobj = (SwigPyPacked *)obj;
    if (sobj->size != size) return 0;
    memcpy(ptr, sobj->pack, size);
    return sobj->ty;
  } else {
    return 0;
  }
}

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

static PyObject *Swig_This_global = NULL;

SWIGRUNTIME PyObject *
SWIG_This(void)
{
  if (Swig_This_global == NULL)
    Swig_This_global = SWIG_Python_str_FromChar("this");
  return Swig_This_global;
}

/* #define SWIG_PYTHON_SLOW_GETSET_THIS */

/* TODO: I don't know how to implement the fast getset in Python 3 right now */
#if PY_VERSION_HEX>=0x03000000
#define SWIG_PYTHON_SLOW_GETSET_THIS 
#endif

SWIGRUNTIME SwigPyObject *
SWIG_Python_GetSwigThis(PyObject *pyobj) 
{
  PyObject *obj;

  if (SwigPyObject_Check(pyobj))
    return (SwigPyObject *) pyobj;

#ifdef SWIGPYTHON_BUILTIN
  (void)obj;
# ifdef PyWeakref_CheckProxy
  if (PyWeakref_CheckProxy(pyobj)) {
    pyobj = PyWeakref_GET_OBJECT(pyobj);
    if (pyobj && SwigPyObject_Check(pyobj))
      return (SwigPyObject*) pyobj;
  }
# endif
  return NULL;
#else

  obj = 0;

#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
  if (PyInstance_Check(pyobj)) {
    obj = _PyInstance_Lookup(pyobj, SWIG_This());      
  } else {
    PyObject **dictptr = _PyObject_GetDictPtr(pyobj);
    if (dictptr != NULL) {
      PyObject *dict = *dictptr;
      obj = dict ? PyDict_GetItem(dict, SWIG_This()) : 0;
    } else {
#ifdef PyWeakref_CheckProxy
      if (PyWeakref_CheckProxy(pyobj)) {
	PyObject *wobj = PyWeakref_GET_OBJECT(pyobj);
	return wobj ? SWIG_Python_GetSwigThis(wobj) : 0;
      }
#endif
      obj = PyObject_GetAttr(pyobj,SWIG_This());
      if (obj) {
	Py_DECREF(obj);
      } else {
	if (PyErr_Occurred()) PyErr_Clear();
	return 0;
      }
    }
  }
#else
  obj = PyObject_GetAttr(pyobj,SWIG_This());
  if (obj) {
    Py_DECREF(obj);
  } else {
    if (PyErr_Occurred()) PyErr_Clear();
    return 0;
  }
#endif
  if (obj && !SwigPyObject_Check(obj)) {
    /* a PyObject is called 'this', try to get the 'real this'
       SwigPyObject from it */ 
    return SWIG_Python_GetSwigThis(obj);
  }
  return (SwigPyObject *)obj;
#endif
}

/* Acquire a pointer value */

SWIGRUNTIME int
SWIG_Python_AcquirePtr(PyObject *obj, int own) {
  if (own == SWIG_POINTER_OWN) {
    SwigPyObject *sobj = SWIG_Python_GetSwigThis(obj);
    if (sobj) {
      int oldown = sobj->own;
      sobj->own = own;
      return oldown;
    }
  }
  return 0;
}

/* Convert a pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPtrAndOwn(PyObject *obj, void **ptr, swig_type_info *ty, int flags, int *own) {
  int res;
  SwigPyObject *sobj;
  int implicit_conv = (flags & SWIG_POINTER_IMPLICIT_CONV) != 0;

  if (!obj)
    return SWIG_ERROR;
  if (obj == Py_None && !implicit_conv) {
    if (ptr)
      *ptr = 0;
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  }

  res = SWIG_ERROR;

  sobj = SWIG_Python_GetSwigThis(obj);
  if (own)
    *own = 0;
  while (sobj) {
    void *vptr = sobj->ptr;
    if (ty) {
      swig_type_info *to = sobj->ty;
      if (to == ty) {
        /* no type cast needed */
        if (ptr) *ptr = vptr;
        break;
      } else {
        swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
        if (!tc) {
          sobj = (SwigPyObject *)sobj->next;
        } else {
          if (ptr) {
            int newmemory = 0;
            *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
            if (newmemory == SWIG_CAST_NEW_MEMORY) {
              assert(own); /* badly formed typemap which will lead to a memory leak - it must set and use own to delete *ptr */
              if (own)
                *own = *own | SWIG_CAST_NEW_MEMORY;
            }
          }
          break;
        }
      }
    } else {
      if (ptr) *ptr = vptr;
      break;
    }
  }
  if (sobj) {
    if (((flags & SWIG_POINTER_RELEASE) == SWIG_POINTER_RELEASE) && !sobj->own) {
      res = SWIG_ERROR_RELEASE_NOT_OWNED;
    } else {
      if (own)
        *own = *own | sobj->own;
      if (flags & SWIG_POINTER_DISOWN) {
        sobj->own = 0;
      }
      if (flags & SWIG_POINTER_CLEAR) {
        sobj->ptr = 0;
      }
      res = SWIG_OK;
    }
  } else {
    if (implicit_conv) {
      SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
      if (data && !data->implicitconv) {
        PyObject *klass = data->klass;
        if (klass) {
          PyObject *impconv;
          data->implicitconv = 1; /* avoid recursion and call 'explicit' constructors*/
          impconv = SWIG_Python_CallFunctor(klass, obj);
          data->implicitconv = 0;
          if (PyErr_Occurred()) {
            PyErr_Clear();
            impconv = 0;
          }
          if (impconv) {
            SwigPyObject *iobj = SWIG_Python_GetSwigThis(impconv);
            if (iobj) {
              void *vptr;
              res = SWIG_Python_ConvertPtrAndOwn((PyObject*)iobj, &vptr, ty, 0, 0);
              if (SWIG_IsOK(res)) {
                if (ptr) {
                  *ptr = vptr;
                  /* transfer the ownership to 'ptr' */
                  iobj->own = 0;
                  res = SWIG_AddCast(res);
                  res = SWIG_AddNewMask(res);
                } else {
                  res = SWIG_AddCast(res);		    
                }
              }
            }
            Py_DECREF(impconv);
          }
        }
      }
      if (!SWIG_IsOK(res) && obj == Py_None) {
        if (ptr)
          *ptr = 0;
        if (PyErr_Occurred())
          PyErr_Clear();
        res = SWIG_OK;
      }
    }
  }
  return res;
}

/* Convert a function ptr value */

SWIGRUNTIME int
SWIG_Python_ConvertFunctionPtr(PyObject *obj, void **ptr, swig_type_info *ty) {
  if (!PyCFunction_Check(obj)) {
    return SWIG_ConvertPtr(obj, ptr, ty, 0);
  } else {
    void *vptr = 0;
    swig_cast_info *tc;

    /* here we get the method pointer for callbacks */
#ifndef Py_LIMITED_API
    const char *doc = (((PyCFunctionObject *)obj) -> m_ml -> ml_doc);
#else
    PyObject* pystr_doc = PyObject_GetAttrString(obj, "__doc__");
    PyObject *bytes = NULL;
    const char *doc = pystr_doc ? SWIG_PyUnicode_AsUTF8AndSize(pystr_doc, NULL, &bytes) : 0;
#endif
    const char *desc = doc ? strstr(doc, "swig_ptr: ") : 0;
    if (desc)
      desc = ty ? SWIG_UnpackVoidPtr(desc + 10, &vptr, ty->name) : 0;
#ifdef Py_LIMITED_API
    Py_XDECREF(bytes);
    Py_XDECREF(pystr_doc);
#endif
    if (!desc)
      return SWIG_ERROR;
    tc = SWIG_TypeCheck(desc,ty);
    if (tc) {
      int newmemory = 0;
      *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
    } else {
      return SWIG_ERROR;
    }
    return SWIG_OK;
  }
}

/* Convert a packed pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, size_t sz, swig_type_info *ty) {
  swig_type_info *to = SwigPyPacked_UnpackData(obj, ptr, sz);
  if (!to) return SWIG_ERROR;
  if (ty) {
    if (to != ty) {
      /* check type cast? */
      swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
      if (!tc) return SWIG_ERROR;
    }
  }
  return SWIG_OK;
}  

/* -----------------------------------------------------------------------------
 * Create a new pointer object
 * ----------------------------------------------------------------------------- */

/*
  Create a new instance object, without calling __init__, and set the
  'this' attribute.
*/

SWIGRUNTIME PyObject* 
SWIG_Python_NewShadowInstance(SwigPyClientData *data, PyObject *swig_this)
{
  PyObject *inst = 0;
  PyObject *newraw = data->newraw;
  if (newraw) {
    inst = PyObject_Call(newraw, data->newargs, NULL);
    if (inst) {
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
      PyObject **dictptr = _PyObject_GetDictPtr(inst);
      if (dictptr != NULL) {
        PyObject *dict = *dictptr;
        if (dict == NULL) {
          dict = PyDict_New();
          *dictptr = dict;
        }
        if (dict) {
          PyDict_SetItem(dict, SWIG_This(), swig_this);
        } else{
          Py_DECREF(inst);
          inst = 0;
        }
      }
#else
      if (PyObject_SetAttr(inst, SWIG_This(), swig_this) == -1) {
        Py_DECREF(inst);
        inst = 0;
      }
#endif
    }
  } else {
#if PY_VERSION_HEX >= 0x03000000
    PyObject *empty_args = PyTuple_New(0);
    if (empty_args) {
      PyObject *empty_kwargs = PyDict_New();
      if (empty_kwargs) {
#ifndef Py_LIMITED_API
        newfunc newfn = ((PyTypeObject *)data->newargs)->tp_new;
#else
        newfunc newfn = (newfunc)PyType_GetSlot((PyTypeObject *)data->newargs, Py_tp_new);
#endif
        inst = newfn((PyTypeObject *)data->newargs, empty_args, empty_kwargs);
        Py_DECREF(empty_kwargs);
        if (inst) {
          if (PyObject_SetAttr(inst, SWIG_This(), swig_this) == -1) {
            Py_DECREF(inst);
            inst = 0;
          } else {
            PyType_Modified(Py_TYPE(inst));
          }
        }
      }
      Py_DECREF(empty_args);
    }
#else
    PyObject *dict = PyDict_New();
    if (dict) {
      PyDict_SetItem(dict, SWIG_This(), swig_this);
      inst = PyInstance_NewRaw(data->newargs, dict);
      Py_DECREF(dict);
    }
#endif
  }
  return inst;
}

SWIGRUNTIME int
SWIG_Python_SetSwigThis(PyObject *inst, PyObject *swig_this)
{
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
  PyObject **dictptr = _PyObject_GetDictPtr(inst);
  if (dictptr != NULL) {
    PyObject *dict = *dictptr;
    if (dict == NULL) {
      dict = PyDict_New();
      *dictptr = dict;
    }
    if (dict) {
      return PyDict_SetItem(dict, SWIG_This(), swig_this);
    } else{
      return -1;
    }
  }
#endif
  return PyObject_SetAttr(inst, SWIG_This(), swig_this);
} 


SWIGINTERN PyObject *
SWIG_Python_InitShadowInstance(PyObject *args) {
  PyObject *obj[2];
  if (!SWIG_Python_UnpackTuple(args, "swiginit", 2, 2, obj)) {
    return NULL;
  } else {
    SwigPyObject *sthis = SWIG_Python_GetSwigThis(obj[0]);
    if (sthis) {
      Py_DECREF(SwigPyObject_append((PyObject*) sthis, obj[1]));
    } else {
      if (SWIG_Python_SetSwigThis(obj[0], obj[1]) != 0)
        return NULL;
    }
    return SWIG_Py_Void();
  }
}

/* Create a new pointer object */

SWIGRUNTIME PyObject *
SWIG_Python_NewPointerObj(PyObject *self, void *ptr, swig_type_info *type, int flags) {
  SwigPyClientData *clientdata;
  PyObject * robj;
  int own;

  if (!ptr)
    return SWIG_Py_Void();

  clientdata = type ? (SwigPyClientData *)(type->clientdata) : 0;
  own = (flags & SWIG_POINTER_OWN) ? SWIG_POINTER_OWN : 0;
  if (clientdata && clientdata->pytype) {
    SwigPyObject *newobj;
    if (flags & SWIG_BUILTIN_TP_INIT) {
      newobj = (SwigPyObject*) self;
      if (newobj->ptr) {
#ifndef Py_LIMITED_API
        allocfunc alloc = clientdata->pytype->tp_alloc;
#else
        allocfunc alloc = (allocfunc)PyType_GetSlot(clientdata->pytype, Py_tp_alloc);
#endif
        PyObject *next_self = alloc(clientdata->pytype, 0);
        while (newobj->next)
	  newobj = (SwigPyObject *) newobj->next;
        newobj->next = next_self;
        newobj = (SwigPyObject *)next_self;
#ifdef SWIGPYTHON_BUILTIN
        newobj->dict = 0;
#endif
      }
    } else {
      newobj = PyObject_New(SwigPyObject, clientdata->pytype);
#ifdef SWIGPYTHON_BUILTIN
      if (newobj) {
        newobj->dict = 0;
      }
#endif
    }
    if (newobj) {
      newobj->ptr = ptr;
      newobj->ty = type;
      newobj->own = own;
      newobj->next = 0;
      return (PyObject*) newobj;
    }
    return SWIG_Py_Void();
  }

  assert(!(flags & SWIG_BUILTIN_TP_INIT));

  robj = SwigPyObject_New(ptr, type, own);
  if (robj && clientdata && !(flags & SWIG_POINTER_NOSHADOW)) {
    PyObject *inst = SWIG_Python_NewShadowInstance(clientdata, robj);
    Py_DECREF(robj);
    robj = inst;
  }
  return robj;
}

/* Create a new packed object */

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
  return ptr ? SwigPyPacked_New((void *) ptr, sz, type) : SWIG_Py_Void();
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

#ifdef SWIG_LINK_RUNTIME
void *SWIG_ReturnGlobalTypeList(void *);
#endif

static PyObject *Swig_TypeCache_global = NULL;

/* The python cached type query */
SWIGRUNTIME PyObject *
SWIG_Python_TypeCache(void) {
  if (Swig_TypeCache_global == NULL) {
    Swig_TypeCache_global = PyDict_New();
  }
  return Swig_TypeCache_global;
}

SWIGRUNTIME swig_module_info *
SWIG_Python_GetModule(void *SWIGUNUSEDPARM(clientdata)) {
#ifdef SWIG_LINK_RUNTIME
  static void *type_pointer = (void *)0;
  /* first check if module already created */
  if (!type_pointer) {
    type_pointer = SWIG_ReturnGlobalTypeList((void *)0);
  }
#else
  void *type_pointer = PyCapsule_Import(SWIGPY_CAPSULE_NAME, 0);
  if (PyErr_Occurred()) {
    PyErr_Clear();
    type_pointer = (void *)0;
  }
#endif
  return (swig_module_info *) type_pointer;
}


static int interpreter_counter = 0; /* how many (sub-)interpreters are using swig_module's types */

SWIGRUNTIME void
SWIG_Python_DestroyModule(PyObject *obj)
{
  swig_module_info *swig_module = (swig_module_info *) PyCapsule_GetPointer(obj, SWIGPY_CAPSULE_NAME);
  swig_type_info **types = swig_module->types;
  size_t i;
  if (--interpreter_counter != 0) /* another sub-interpreter may still be using the swig_module's types */
    return;
  for (i =0; i < swig_module->size; ++i) {
    swig_type_info *ty = types[i];
    if (ty->owndata) {
      SwigPyClientData *data = (SwigPyClientData *) ty->clientdata;
      ty->clientdata = 0;
      if (data) SwigPyClientData_Del(data);
    }
  }
  Py_DECREF(SWIG_This());
  Swig_This_global = NULL;
  Py_DECREF(SWIG_globals());
  Swig_Globals_global = NULL;
  Py_DECREF(SWIG_Python_TypeCache());
  Swig_TypeCache_global = NULL;
  Swig_Capsule_global = NULL;
}

SWIGRUNTIME void
SWIG_Python_SetModule(swig_module_info *swig_module) {
#if PY_VERSION_HEX >= 0x03000000
 /* Add a dummy module object into sys.modules */
  PyObject *module = PyImport_AddModule("swig_runtime_data" SWIG_RUNTIME_VERSION);
#else
  static PyMethodDef swig_empty_runtime_method_table[] = { {NULL, NULL, 0, NULL} }; /* Sentinel */
  PyObject *module = Py_InitModule("swig_runtime_data" SWIG_RUNTIME_VERSION, swig_empty_runtime_method_table);
#endif
  PyObject *pointer = PyCapsule_New((void *) swig_module, SWIGPY_CAPSULE_NAME, SWIG_Python_DestroyModule);
  if (pointer && module) {
    if (PyModule_AddObject(module, SWIGPY_CAPSULE_ATTR_NAME, pointer) == 0) {
      ++interpreter_counter;
      Swig_Capsule_global = pointer;
    } else {
      Py_DECREF(pointer);
    }
  } else {
    Py_XDECREF(pointer);
  }
}

SWIGRUNTIME swig_type_info *
SWIG_Python_TypeQuery(const char *type)
{
  PyObject *cache = SWIG_Python_TypeCache();
  PyObject *key = SWIG_Python_str_FromChar(type); 
  PyObject *obj = PyDict_GetItem(cache, key);
  swig_type_info *descriptor;
  if (obj) {
    descriptor = (swig_type_info *) PyCapsule_GetPointer(obj, NULL);
  } else {
    swig_module_info *swig_module = SWIG_GetModule(0);
    descriptor = SWIG_TypeQueryModule(swig_module, swig_module, type);
    if (descriptor) {
      obj = PyCapsule_New((void*) descriptor, NULL, NULL);
      if (obj) {
        PyDict_SetItem(cache, key, obj);
        Py_DECREF(obj);
      }
    }
  }
  Py_DECREF(key);
  return descriptor;
}

/* 
   For backward compatibility only
*/
#define SWIG_POINTER_EXCEPTION  0
#define SWIG_arg_fail(arg)      SWIG_Python_ArgFail(arg)
#define SWIG_MustGetPtr(p, type, argnum, flags)  SWIG_Python_MustGetPtr(p, type, argnum, flags)

SWIGRUNTIME int
SWIG_Python_AddErrMesg(const char* mesg, int infront)
{  
  if (PyErr_Occurred()) {
    PyObject *type = 0;
    PyObject *value = 0;
    PyObject *traceback = 0;
    PyErr_Fetch(&type, &value, &traceback);
    if (value) {
      PyObject *old_str = PyObject_Str(value);
      PyObject *bytes = NULL;
      const char *tmp = SWIG_PyUnicode_AsUTF8AndSize(old_str, NULL, &bytes);
      const char *errmesg = tmp ? tmp : "Invalid error message";
      Py_XINCREF(type);
      PyErr_Clear();
      if (infront) {
	PyErr_Format(type, "%s %s", mesg, errmesg);
      } else {
	PyErr_Format(type, "%s %s", errmesg, mesg);
      }
      Py_XDECREF(bytes);
      Py_DECREF(old_str);
    }
    return 1;
  } else {
    return 0;
  }
}
  
SWIGRUNTIME int
SWIG_Python_ArgFail(int argnum)
{
  if (PyErr_Occurred()) {
    /* add information about failing argument */
    char mesg[256];
    PyOS_snprintf(mesg, sizeof(mesg), "argument number %d:", argnum);
    return SWIG_Python_AddErrMesg(mesg, 1);
  } else {
    return 0;
  }
}

SWIGRUNTIMEINLINE const char *
SwigPyObject_GetDesc(PyObject *self)
{
  SwigPyObject *v = (SwigPyObject *)self;
  swig_type_info *ty = v ? v->ty : 0;
  return ty ? ty->str : "";
}

SWIGRUNTIME void
SWIG_Python_TypeError(const char *type, PyObject *obj)
{
  if (type) {
#if defined(SWIG_COBJECT_TYPES)
    if (obj && SwigPyObject_Check(obj)) {
      const char *otype = (const char *) SwigPyObject_GetDesc(obj);
      if (otype) {
	PyErr_Format(PyExc_TypeError, "a '%s' is expected, 'SwigPyObject(%s)' is received",
		     type, otype);
	return;
      }
    } else 
#endif      
    {
#ifndef Py_LIMITED_API
      /* tp_name is not accessible */
      const char *otype = (obj ? obj->ob_type->tp_name : 0); 
      if (otype) {
	PyObject *str = PyObject_Str(obj);
	PyObject *bytes = NULL;
	const char *cstr = str ? SWIG_PyUnicode_AsUTF8AndSize(str, NULL, &bytes) : 0;
	if (cstr) {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s(%s)' is received",
		       type, otype, cstr);
	} else {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s' is received",
		       type, otype);
	}
	Py_XDECREF(bytes);
	Py_XDECREF(str);
	return;
      }
#endif
    }   
    PyErr_Format(PyExc_TypeError, "a '%s' is expected", type);
  } else {
    PyErr_Format(PyExc_TypeError, "unexpected type is received");
  }
}


/* Convert a pointer value, signal an exception on a type mismatch */
SWIGRUNTIME void *
SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int SWIGUNUSEDPARM(argnum), int flags) {
  void *result;
  if (SWIG_Python_ConvertPtr(obj, &result, ty, flags) == -1) {
    PyErr_Clear();
  }
  return result;
}

#ifdef SWIGPYTHON_BUILTIN
SWIGRUNTIME int
SWIG_Python_NonDynamicSetAttr(PyObject *obj, PyObject *name, PyObject *value) {
  PyTypeObject *tp = obj->ob_type;
  PyObject *descr;
  PyObject *encoded_name;
  descrsetfunc f;
  int res = -1;

# ifdef Py_USING_UNICODE
  if (PyString_Check(name)) {
    name = PyUnicode_Decode(PyString_AsString(name), PyString_Size(name), NULL, NULL);
    if (!name)
      return -1;
  } else if (!PyUnicode_Check(name))
# else
  if (!PyString_Check(name))
# endif
  {
    PyErr_Format(PyExc_TypeError, "attribute name must be string, not '%.200s'", name->ob_type->tp_name);
    return -1;
  } else {
    Py_INCREF(name);
  }

  if (!tp->tp_dict) {
    if (PyType_Ready(tp) != 0)
      goto done;
  }

  descr = _PyType_Lookup(tp, name);
  f = NULL;
  if (descr != NULL)
    f = descr->ob_type->tp_descr_set;
  if (!f) {
    if (PyString_Check(name)) {
      encoded_name = name;
      Py_INCREF(name);
    } else {
      encoded_name = PyUnicode_AsUTF8String(name);
      if (!encoded_name)
        goto done;
    }
    PyErr_Format(PyExc_AttributeError, "'%.100s' object has no attribute '%.200s'", tp->tp_name, PyString_AsString(encoded_name));
    Py_DECREF(encoded_name);
  } else {
    res = f(descr, obj, value);
  }
  
  done:
  Py_DECREF(name);
  return res;
}
#endif


#ifdef __cplusplus
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) do { if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } } while (0) 



  #define SWIG_exception(code, msg) do { SWIG_Error(code, msg); SWIG_fail;; } while(0) 


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_QString swig_types[0]
#define SWIGTYPE_p_QTextStream swig_types[1]
#define SWIGTYPE_p_QuackleIO__FlexibleAlphabetParameters swig_types[2]
#define SWIGTYPE_p_QuackleIO__GCGIO swig_types[3]
#define SWIGTYPE_p_QuackleIO__Logania swig_types[4]
#define SWIGTYPE_p_QuackleIO__Util swig_types[5]
#define SWIGTYPE_p_QuackleIO__UtilSettings swig_types[6]
#define SWIGTYPE_p_Quackle__AlphabetParameters swig_types[7]
#define SWIGTYPE_p_Quackle__AveragedValue swig_types[8]
#define SWIGTYPE_p_Quackle__Bag swig_types[9]
#define SWIGTYPE_p_Quackle__Board swig_types[10]
#define SWIGTYPE_p_Quackle__BoardParameters swig_types[11]
#define SWIGTYPE_p_Quackle__Board__TileInformation swig_types[12]
#define SWIGTYPE_p_Quackle__CatchallEvaluator swig_types[13]
#define SWIGTYPE_p_Quackle__ComputerDispatch swig_types[14]
#define SWIGTYPE_p_Quackle__ComputerParameters swig_types[15]
#define SWIGTYPE_p_Quackle__ComputerPlayer swig_types[16]
#define SWIGTYPE_p_Quackle__ComputerPlayerCollection swig_types[17]
#define SWIGTYPE_p_Quackle__DataManager swig_types[18]
#define SWIGTYPE_p_Quackle__Endgame swig_types[19]
#define SWIGTYPE_p_Quackle__EndgameMove swig_types[20]
#define SWIGTYPE_p_Quackle__EndgameMoveList swig_types[21]
#define SWIGTYPE_p_Quackle__EndgamePlayer swig_types[22]
#define SWIGTYPE_p_Quackle__EnglishAlphabetParameters swig_types[23]
#define SWIGTYPE_p_Quackle__EnglishBoard swig_types[24]
#define SWIGTYPE_p_Quackle__EnglishParameters swig_types[25]
#define SWIGTYPE_p_Quackle__Enumerator swig_types[26]
#define SWIGTYPE_p_Quackle__Evaluator swig_types[27]
#define SWIGTYPE_p_Quackle__ExtensionWithInfo swig_types[28]
#define SWIGTYPE_p_Quackle__FiveMinutePlayer swig_types[29]
#define SWIGTYPE_p_Quackle__FixedLengthString swig_types[30]
#define SWIGTYPE_p_Quackle__GaddagNode swig_types[31]
#define SWIGTYPE_p_Quackle__Game swig_types[32]
#define SWIGTYPE_p_Quackle__GameParameters swig_types[33]
#define SWIGTYPE_p_Quackle__GamePosition swig_types[34]
#define SWIGTYPE_p_Quackle__Generator swig_types[35]
#define SWIGTYPE_p_Quackle__History swig_types[36]
#define SWIGTYPE_p_Quackle__HistoryLocation swig_types[37]
#define SWIGTYPE_p_Quackle__InferringPlayer swig_types[38]
#define SWIGTYPE_p_Quackle__LetterParameter swig_types[39]
#define SWIGTYPE_p_Quackle__Level swig_types[40]
#define SWIGTYPE_p_Quackle__LevelList swig_types[41]
#define SWIGTYPE_p_Quackle__LexiconInterpreter swig_types[42]
#define SWIGTYPE_p_Quackle__LexiconParameters swig_types[43]
#define SWIGTYPE_p_Quackle__Move swig_types[44]
#define SWIGTYPE_p_Quackle__MoveList swig_types[45]
#define SWIGTYPE_p_Quackle__Player swig_types[46]
#define SWIGTYPE_p_Quackle__PlayerList swig_types[47]
#define SWIGTYPE_p_Quackle__PositionStatistics swig_types[48]
#define SWIGTYPE_p_Quackle__Preendgame swig_types[49]
#define SWIGTYPE_p_Quackle__ProbableRack swig_types[50]
#define SWIGTYPE_p_Quackle__Rack swig_types[51]
#define SWIGTYPE_p_Quackle__Reporter swig_types[52]
#define SWIGTYPE_p_Quackle__Resolvent swig_types[53]
#define SWIGTYPE_p_Quackle__ScalingDispatch swig_types[54]
#define SWIGTYPE_p_Quackle__ScorePlusLeaveEvaluator swig_types[55]
#define SWIGTYPE_p_Quackle__SimmedMove swig_types[56]
#define SWIGTYPE_p_Quackle__SimmedMoveConstants swig_types[57]
#define SWIGTYPE_p_Quackle__SimmedMoveMessage swig_types[58]
#define SWIGTYPE_p_Quackle__SimmedMoveMessageQueue swig_types[59]
#define SWIGTYPE_p_Quackle__Simulator swig_types[60]
#define SWIGTYPE_p_Quackle__SmartBogowin swig_types[61]
#define SWIGTYPE_p_Quackle__StaticPlayer swig_types[62]
#define SWIGTYPE_p_Quackle__Stopwatch swig_types[63]
#define SWIGTYPE_p_Quackle__StrategyParameters swig_types[64]
#define SWIGTYPE_p_Quackle__TorontoPlayer swig_types[65]
#define SWIGTYPE_p_Quackle__TwentySecondPlayer swig_types[66]
#define SWIGTYPE_p_Quackle__WordWithInfo swig_types[67]
#define SWIGTYPE_p_allocator_type swig_types[68]
#define SWIGTYPE_p_bool swig_types[69]
#define SWIGTYPE_p_char swig_types[70]
#define SWIGTYPE_p_difference_type swig_types[71]
#define SWIGTYPE_p_int swig_types[72]
#define SWIGTYPE_p_long_double swig_types[73]
#define SWIGTYPE_p_p_PyObject swig_types[74]
#define SWIGTYPE_p_size_type swig_types[75]
#define SWIGTYPE_p_std__allocatorT_Quackle__FixedLengthString_t swig_types[76]
#define SWIGTYPE_p_std__allocatorT_Quackle__GamePosition_t swig_types[77]
#define SWIGTYPE_p_std__allocatorT_Quackle__LetterParameter_t swig_types[78]
#define SWIGTYPE_p_std__allocatorT_Quackle__Move_t swig_types[79]
#define SWIGTYPE_p_std__allocatorT_Quackle__Player_t swig_types[80]
#define SWIGTYPE_p_std__allocatorT_Quackle__ProbableRack_t swig_types[81]
#define SWIGTYPE_p_std__bitsetT_55_t swig_types[82]
#define SWIGTYPE_p_std__ifstream swig_types[83]
#define SWIGTYPE_p_std__invalid_argument swig_types[84]
#define SWIGTYPE_p_std__istream swig_types[85]
#define SWIGTYPE_p_std__istringstream swig_types[86]
#define SWIGTYPE_p_std__ofstream swig_types[87]
#define SWIGTYPE_p_std__ostream swig_types[88]
#define SWIGTYPE_p_std__ostringstream swig_types[89]
#define SWIGTYPE_p_std__seed_seq swig_types[90]
#define SWIGTYPE_p_std__string swig_types[91]
#define SWIGTYPE_p_std__stringstream swig_types[92]
#define SWIGTYPE_p_std__thread__id swig_types[93]
#define SWIGTYPE_p_std__vectorT_Quackle__ExtensionWithInfo_std__allocatorT_Quackle__ExtensionWithInfo_t_t swig_types[94]
#define SWIGTYPE_p_std__vectorT_Quackle__GamePosition_t swig_types[95]
#define SWIGTYPE_p_std__vectorT_Quackle__LetterParameter_t swig_types[96]
#define SWIGTYPE_p_std__vectorT_Quackle__LetterString_t swig_types[97]
#define SWIGTYPE_p_std__vectorT_Quackle__Move_t swig_types[98]
#define SWIGTYPE_p_std__vectorT_Quackle__Player_t swig_types[99]
#define SWIGTYPE_p_std__vectorT_Quackle__PositionStatistics_std__allocatorT_Quackle__PositionStatistics_t_t swig_types[100]
#define SWIGTYPE_p_std__vectorT_Quackle__ProbableRack_t swig_types[101]
#define SWIGTYPE_p_std__vectorT_Quackle__SimmedMove_std__allocatorT_Quackle__SimmedMove_t_t swig_types[102]
#define SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t swig_types[103]
#define SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t swig_types[104]
#define SWIGTYPE_p_swig__SwigPyIterator swig_types[105]
#define SWIGTYPE_p_unsigned_char swig_types[106]
#define SWIGTYPE_p_unsigned_int swig_types[107]
#define SWIGTYPE_p_value_type swig_types[108]
static swig_type_info *swig_types[110];
static swig_module_info swig_module = {swig_types, 109, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#ifdef SWIG_TypeQuery
# undef SWIG_TypeQuery
#endif
#define SWIG_TypeQuery SWIG_Python_TypeQuery

/*-----------------------------------------------
              @(target):= _quackle.so
  ------------------------------------------------*/
#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_init    PyInit__quackle

#else
#  define SWIG_init    init_quackle

#endif
#define SWIG_name    "_quackle"

#ifdef __cplusplus
#include <utility>
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigSmartPointer {
    T *ptr;
    SwigSmartPointer(T *p) : ptr(p) { }
    ~SwigSmartPointer() { delete ptr; }
    SwigSmartPointer& operator=(SwigSmartPointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
    void reset(T *p) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = p; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigSmartPointer tmp(new T(t)); pointer = tmp; return *this; }
#if __cplusplus >=201103L
  SwigValueWrapper& operator=(T&& t) { SwigSmartPointer tmp(new T(std::move(t))); pointer = tmp; return *this; }
  operator T&&() const { return std::move(*pointer.ptr); }
#else
  operator T&() const { return *pointer.ptr; }
#endif
  T *operator&() const { return pointer.ptr; }
  static void reset(SwigValueWrapper& t, T *p) { t.pointer.reset(p); }
};

/*
 * SwigValueInit() is a generic initialisation solution as the following approach:
 * 
 *       T c_result = T();
 * 
 * doesn't compile for all types for example:
 * 
 *       unsigned int c_result = unsigned int();
 */
template <typename T> T SwigValueInit() {
  return T();
}

#if __cplusplus >=201103L
# define SWIG_STD_MOVE(OBJ) std::move(OBJ)
#else
# define SWIG_STD_MOVE(OBJ) OBJ
#endif

#endif


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


namespace swig {
  class SwigPtr_PyObject {
  protected:
    PyObject *_obj;

  public:
    SwigPtr_PyObject() :_obj(0)
    {
    }

    SwigPtr_PyObject(const SwigPtr_PyObject& item) : _obj(item._obj)
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XINCREF(_obj);      
      SWIG_PYTHON_THREAD_END_BLOCK;
    }
    
    SwigPtr_PyObject(PyObject *obj, bool initial_ref = true) :_obj(obj)
    {
      if (initial_ref) {
        SWIG_PYTHON_THREAD_BEGIN_BLOCK;
        Py_XINCREF(_obj);
        SWIG_PYTHON_THREAD_END_BLOCK;
      }
    }
    
    SwigPtr_PyObject & operator=(const SwigPtr_PyObject& item) 
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XINCREF(item._obj);
      Py_XDECREF(_obj);
      _obj = item._obj;
      SWIG_PYTHON_THREAD_END_BLOCK;
      return *this;      
    }
    
    ~SwigPtr_PyObject() 
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XDECREF(_obj);
      SWIG_PYTHON_THREAD_END_BLOCK;
    }
    
    operator PyObject *() const
    {
      return _obj;
    }

    PyObject *operator->() const
    {
      return _obj;
    }
  };
}


namespace swig {
  struct SwigVar_PyObject : SwigPtr_PyObject {
    SwigVar_PyObject(PyObject* obj = 0) : SwigPtr_PyObject(obj, false) { }
    
    SwigVar_PyObject & operator = (PyObject* obj)
    {
      Py_XDECREF(_obj);
      _obj = obj;
      return *this;      
    }
  };
}


#include "fixedstring.h"
#include "uv.h"
#include "alphabetparameters.h"
#include "move.h"
#include "rack.h"
#include "bag.h"
#include "board.h"
#include "boardparameters.h"
#include "evaluator.h"
#include "catchall.h"
#include "player.h"
#include "game.h"
#include "gameparameters.h"
#include "sim.h"
#include "computerplayer.h"
#include "computerplayercollection.h"
#include "datamanager.h"
#include "endgame.h"
#include "endgameplayer.h"
#include "enumerator.h"
#include "bogowinplayer.h"
#include "clock.h"
#include "generator.h"
#include "gaddag.h"
#include "lexiconparameters.h"
#include "preendgame.h"
#include "reporter.h"
#include "resolvent.h"
#include "strategyparameters.h"

#include <QString>
#include "quackleio/flexiblealphabet.h"
#include "quackleio/util.h"
#include "quackleio/logania.h"
#include "quackleio/gcgio.h"


#include <string>


#include <iostream>

#if PY_VERSION_HEX >= 0x03020000
# define SWIGPY_SLICE_ARG(obj) ((PyObject*) (obj))
#else
# define SWIGPY_SLICE_ARG(obj) ((PySliceObject*) (obj))
#endif


#include <typeinfo>
#include <stdexcept>


#if defined(__GNUC__)
#  if __GNUC__ == 2 && __GNUC_MINOR <= 96
#     define SWIG_STD_NOMODERN_STL
#  endif
#endif


#include <stddef.h>


namespace swig {
  struct stop_iteration {
  };

  struct SwigPyIterator {
  private:
    SwigPtr_PyObject _seq;

  protected:
    SwigPyIterator(PyObject *seq) : _seq(seq)
    {
    }
      
  public:
    virtual ~SwigPyIterator() {}

    // Access iterator method, required by Python
    virtual PyObject *value() const = 0;

    // Forward iterator method, required by Python
    virtual SwigPyIterator *incr(size_t n = 1) = 0;
    
    // Backward iterator method, very common in C++, but not required in Python
    virtual SwigPyIterator *decr(size_t /*n*/ = 1)
    {
      throw stop_iteration();
    }

    // Random access iterator methods, but not required in Python
    virtual ptrdiff_t distance(const SwigPyIterator &/*x*/) const
    {
      throw std::invalid_argument("operation not supported");
    }

    virtual bool equal (const SwigPyIterator &/*x*/) const
    {
      throw std::invalid_argument("operation not supported");
    }
    
    // C++ common/needed methods
    virtual SwigPyIterator *copy() const = 0;

    PyObject *next()     
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       
      PyObject *obj = value();
      incr();       
      SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads
      return obj;     
    }

    /* Make an alias for Python 3.x */
    PyObject *__next__()
    {
      return next();
    }

    PyObject *previous()
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       
      decr();
      PyObject *obj = value();
      SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads       
      return obj;
    }

    SwigPyIterator *advance(ptrdiff_t n)
    {
      return  (n > 0) ?  incr(n) : decr(-n);
    }
      
    bool operator == (const SwigPyIterator& x)  const
    {
      return equal(x);
    }
      
    bool operator != (const SwigPyIterator& x) const
    {
      return ! operator==(x);
    }
      
    SwigPyIterator& operator += (ptrdiff_t n)
    {
      return *advance(n);
    }

    SwigPyIterator& operator -= (ptrdiff_t n)
    {
      return *advance(-n);
    }
      
    SwigPyIterator* operator + (ptrdiff_t n) const
    {
      return copy()->advance(n);
    }

    SwigPyIterator* operator - (ptrdiff_t n) const
    {
      return copy()->advance(-n);
    }
      
    ptrdiff_t operator - (const SwigPyIterator& x) const
    {
      return x.distance(*this);
    }
      
    static swig_type_info* descriptor() {
      static int init = 0;
      static swig_type_info* desc = 0;
      if (!init) {
	desc = SWIG_TypeQuery("swig::SwigPyIterator *");
	init = 1;
      }	
      return desc;
    }    
  };

#if defined(SWIGPYTHON_BUILTIN)
  inline PyObject* make_output_iterator_builtin (PyObject *pyself)
  {
    Py_INCREF(pyself);
    return pyself;
  }
#endif
}


SWIGINTERN int
SWIG_AsVal_double (PyObject *obj, double *val)
{
  int res = SWIG_TypeError;
  if (PyFloat_Check(obj)) {
    if (val) *val = PyFloat_AsDouble(obj);
    return SWIG_OK;
#if PY_VERSION_HEX < 0x03000000
  } else if (PyInt_Check(obj)) {
    if (val) *val = (double) PyInt_AsLong(obj);
    return SWIG_OK;
#endif
  } else if (PyLong_Check(obj)) {
    double v = PyLong_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    double d = PyFloat_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = d;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      long v = PyLong_AsLong(obj);
      if (!PyErr_Occurred()) {
	if (val) *val = v;
	return SWIG_AddCast(SWIG_AddCast(SWIG_OK));
      } else {
	PyErr_Clear();
      }
    }
  }
#endif
  return res;
}


#include <float.h>


#include <math.h>


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
   double fx, cx, rd;
   errno = 0;
   fx = floor(x);
   cx = ceil(x);
   rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
   if ((errno == EDOM) || (errno == ERANGE)) {
     errno = 0;
   } else {
     double summ, reps, diff;
     if (rd < x) {
       diff = x - rd;
     } else if (rd > x) {
       diff = rd - x;
     } else {
       return 1;
     }
     summ = rd + x;
     reps = diff/summ;
     if (reps < 8*DBL_EPSILON) {
       *d = rd;
       return 1;
     }
   }
  }
  return 0;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_long (PyObject *obj, unsigned long *val) 
{
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(obj)) {
    long v = PyInt_AsLong(obj);
    if (v >= 0) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      return SWIG_OverflowError;
    }
  } else
#endif
  if (PyLong_Check(obj)) {
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      return SWIG_OverflowError;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      // Largest double not larger than ULONG_MAX (not portably calculated easily)
      // Note that double(ULONG_MAX) is stored in a double rounded up by one (for 64-bit unsigned long)
      // 0xfffffffffffff800ULL == (uint64_t)std::nextafter(double(__uint128_t(ULONG_MAX)+1), double(0))
      const double ulong_max = sizeof(unsigned long) == 8 ? 0xfffffffffffff800ULL : ULONG_MAX;
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, ulong_max)) {
	if (val) *val = (unsigned long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


#if defined(LLONG_MAX) && !defined(SWIG_LONG_LONG_AVAILABLE)
#  define SWIG_LONG_LONG_AVAILABLE
#endif


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERN int
SWIG_AsVal_unsigned_SS_long_SS_long (PyObject *obj, unsigned long long *val)
{
  int res = SWIG_TypeError;
  if (PyLong_Check(obj)) {
    unsigned long long v = PyLong_AsUnsignedLongLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      res = SWIG_OverflowError;
    }
  } else {
    unsigned long v;
    res = SWIG_AsVal_unsigned_SS_long (obj,&v);
    if (SWIG_IsOK(res)) {
      if (val) *val = v;
      return res;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    const double mant_max = 1LL << DBL_MANT_DIG;
    double d;
    res = SWIG_AsVal_double (obj,&d);
    if (SWIG_IsOK(res) && !SWIG_CanCastAsInteger(&d, 0, mant_max))
      return SWIG_OverflowError;
    if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, mant_max)) {
      if (val) *val = (unsigned long long)(d);
      return SWIG_AddCast(res);
    }
    res = SWIG_TypeError;
  }
#endif
  return res;
}
#endif


SWIGINTERNINLINE int
SWIG_AsVal_size_t (PyObject * obj, size_t *val)
{
  int res = SWIG_TypeError;
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(size_t) <= sizeof(unsigned long)) {
#endif
    unsigned long v;
    res = SWIG_AsVal_unsigned_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else if (sizeof(size_t) <= sizeof(unsigned long long)) {
    unsigned long long v;
    res = SWIG_AsVal_unsigned_SS_long_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
  }
#endif
  return res;
}


  #define SWIG_From_long   PyInt_FromLong 


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERNINLINE PyObject* 
SWIG_From_long_SS_long  (long long value)
{
  return ((value < LONG_MIN) || (value > LONG_MAX)) ?
    PyLong_FromLongLong(value) : PyInt_FromLong(static_cast< long >(value));
}
#endif


SWIGINTERNINLINE PyObject *
SWIG_From_ptrdiff_t  (ptrdiff_t value)
{    
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(ptrdiff_t) <= sizeof(long)) {
#endif
    return SWIG_From_long  (static_cast< long >(value));
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else {
    /* assume sizeof(ptrdiff_t) <= sizeof(long long) */
    return SWIG_From_long_SS_long  (static_cast< long long >(value));
  }
#endif
}


SWIGINTERNINLINE PyObject*
  SWIG_From_bool  (bool value)
{
  return PyBool_FromLong(value ? 1 : 0);
}


SWIGINTERN int
SWIG_AsVal_long (PyObject *obj, long* val)
{
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else
#endif
  if (PyLong_Check(obj)) {
    long v = PyLong_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      return SWIG_OverflowError;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    long v = PyInt_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      // Largest double not larger than LONG_MAX (not portably calculated easily)
      // Note that double(LONG_MAX) is stored in a double rounded up by one (for 64-bit long)
      // 0x7ffffffffffffc00LL == (int64_t)std::nextafter(double(__uint128_t(LONG_MAX)+1), double(0))
      const double long_max = sizeof(long) == 8 ? 0x7ffffffffffffc00LL : LONG_MAX;
      // No equivalent needed for 64-bit double(LONG_MIN) is exactly LONG_MIN
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, LONG_MIN, long_max)) {
	if (val) *val = (long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERN int
SWIG_AsVal_long_SS_long (PyObject *obj, long long *val)
{
  int res = SWIG_TypeError;
  if (PyLong_Check(obj)) {
    long long v = PyLong_AsLongLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      res = SWIG_OverflowError;
    }
  } else {
    long v;
    res = SWIG_AsVal_long (obj,&v);
    if (SWIG_IsOK(res)) {
      if (val) *val = v;
      return res;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    const double mant_max = 1LL << DBL_MANT_DIG;
    const double mant_min = -mant_max;
    double d;
    res = SWIG_AsVal_double (obj,&d);
    if (SWIG_IsOK(res) && !SWIG_CanCastAsInteger(&d, mant_min, mant_max))
      return SWIG_OverflowError;
    if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, mant_min, mant_max)) {
      if (val) *val = (long long)(d);
      return SWIG_AddCast(res);
    }
    res = SWIG_TypeError;
  }
#endif
  return res;
}
#endif


SWIGINTERNINLINE int
SWIG_AsVal_ptrdiff_t (PyObject * obj, ptrdiff_t *val)
{
  int res = SWIG_TypeError;
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(ptrdiff_t) <= sizeof(long)) {
#endif
    long v;
    res = SWIG_AsVal_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< ptrdiff_t >(v);
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else if (sizeof(ptrdiff_t) <= sizeof(long long)) {
    long long v;
    res = SWIG_AsVal_long_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< ptrdiff_t >(v);
  }
#endif
  return res;
}


#include <algorithm>


#include <vector>


SWIGINTERNINLINE PyObject*
  SWIG_From_int  (int value)
{
  return PyInt_FromLong((long) value);
}


SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


/* Return string from Python obj. NOTE: obj must remain in scope in order
   to use the returned cptr (but only when alloc is set to SWIG_OLDOBJ) */
SWIGINTERN int
SWIG_AsCharPtrAndSize(PyObject *obj, char **cptr, size_t *psize, int *alloc)
{
#if PY_VERSION_HEX>=0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
  if (PyBytes_Check(obj))
#else
  if (PyUnicode_Check(obj))
#endif
#else  
  if (PyString_Check(obj))
#endif
  {
    char *cstr; Py_ssize_t len;
    PyObject *bytes = NULL;
    int ret = SWIG_OK;
    if (alloc)
      *alloc = SWIG_OLDOBJ;
#if PY_VERSION_HEX>=0x03000000 && defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
    if (PyBytes_AsStringAndSize(obj, &cstr, &len) == -1)
      return SWIG_TypeError;
#else
    cstr = (char *)SWIG_PyUnicode_AsUTF8AndSize(obj, &len, &bytes);
    if (!cstr)
      return SWIG_TypeError;
    /* The returned string is only duplicated if the char * returned is not owned and memory managed by obj */
    if (bytes && cptr) {
      if (alloc) {
        cstr = reinterpret_cast< char* >(memcpy(new char[len + 1], cstr, sizeof(char)*(len + 1)));
        *alloc = SWIG_NEWOBJ;
      } else {
        /* alloc must be set in order to clean up allocated memory */
        return SWIG_RuntimeError;
      }
    }
#endif
    if (cptr) *cptr = cstr;
    if (psize) *psize = len + 1;
    Py_XDECREF(bytes);
    return ret;
  } else {
#if defined(SWIG_PYTHON_2_UNICODE)
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
#error "Cannot use both SWIG_PYTHON_2_UNICODE and SWIG_PYTHON_STRICT_BYTE_CHAR at once"
#endif
#if PY_VERSION_HEX<0x03000000
    if (PyUnicode_Check(obj)) {
      char *cstr; Py_ssize_t len;
      if (!alloc && cptr) {
        return SWIG_RuntimeError;
      }
      obj = PyUnicode_AsUTF8String(obj);
      if (!obj)
        return SWIG_TypeError;
      if (PyString_AsStringAndSize(obj, &cstr, &len) != -1) {
        if (cptr) {
          if (alloc) *alloc = SWIG_NEWOBJ;
          *cptr = reinterpret_cast< char* >(memcpy(new char[len + 1], cstr, sizeof(char)*(len + 1)));
        }
        if (psize) *psize = len + 1;

        Py_XDECREF(obj);
        return SWIG_OK;
      } else {
        Py_XDECREF(obj);
      }
    }
#endif
#endif

    swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
    if (pchar_descriptor) {
      void* vptr = 0;
      if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
	if (cptr) *cptr = (char *) vptr;
	if (psize) *psize = vptr ? (strlen((char *)vptr) + 1) : 0;
	if (alloc) *alloc = SWIG_OLDOBJ;
	return SWIG_OK;
      }
    }
  }
  return SWIG_TypeError;
}





SWIGINTERN int
SWIG_AsVal_unsigned_SS_int (PyObject * obj, unsigned int *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UINT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned int >(v);
    }
  }  
  return res;
}


SWIGINTERN int
SWIG_AsCharArray(PyObject * obj, char *val, size_t size)
{ 
  char* cptr = 0; size_t csize = 0; int alloc = SWIG_OLDOBJ;
  int res = SWIG_AsCharPtrAndSize(obj, &cptr, &csize, &alloc);
  if (SWIG_IsOK(res)) {
    /* special case of single char conversion when we don't need space for NUL */
    if (size == 1 && csize == 2 && cptr && !cptr[1]) --csize;
    if (csize <= size) {
      if (val) {
	if (csize) memcpy(val, cptr, csize*sizeof(char));
	if (csize < size) memset(val + csize, 0, (size - csize)*sizeof(char));
      }
      if (alloc == SWIG_NEWOBJ) {
	delete[] cptr;
	res = SWIG_DelNewMask(res);
      }      
      return res;
    }
    if (alloc == SWIG_NEWOBJ) delete[] cptr;
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_char (PyObject * obj, char *val)
{    
  int res = SWIG_AsCharArray(obj, val, 1);
  if (!SWIG_IsOK(res)) {
    long v;
    res = SWIG_AddCast(SWIG_AsVal_long (obj, &v));
    if (SWIG_IsOK(res)) {
      if ((CHAR_MIN <= v) && (v <= CHAR_MAX)) {
	if (val) *val = static_cast< char >(v);
      } else {
	res = SWIG_OverflowError;
      }
    }
  }
  return res;
}


#include <memory>


SWIGINTERNINLINE PyObject *
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  if (carray) {
    if (size > INT_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      return pchar_descriptor ? 
	SWIG_InternalNewPointerObj(const_cast< char * >(carray), pchar_descriptor, 0) : SWIG_Py_Void();
    } else {
#if PY_VERSION_HEX >= 0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
      return PyBytes_FromStringAndSize(carray, static_cast< Py_ssize_t >(size));
#else
      return PyUnicode_DecodeUTF8(carray, static_cast< Py_ssize_t >(size), "surrogateescape");
#endif
#else
      return PyString_FromStringAndSize(carray, static_cast< Py_ssize_t >(size));
#endif
    }
  } else {
    return SWIG_Py_Void();
  }
}


SWIGINTERNINLINE PyObject * 
SWIG_FromCharPtr(const char *cptr)
{ 
  return SWIG_FromCharPtrAndSize(cptr, (cptr ? strlen(cptr) : 0));
}


SWIGINTERNINLINE PyObject*
  SWIG_From_unsigned_SS_int  (unsigned int value)
{
  return PyInt_FromSize_t((size_t) value);
}


SWIGINTERN int
SWIG_AsVal_int (PyObject * obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


SWIGINTERN int
SWIG_AsPtr_std_string (PyObject * obj, std::string **val) 
{
  char* buf = 0 ; size_t size = 0; int alloc = SWIG_OLDOBJ;
  if (SWIG_IsOK((SWIG_AsCharPtrAndSize(obj, &buf, &size, &alloc)))) {
    if (buf) {
      if (val) *val = new std::string(buf, size - 1);
      if (alloc == SWIG_NEWOBJ) delete[] buf;
      return SWIG_NEWOBJ;
    } else {
      if (val) *val = 0;
      return SWIG_OLDOBJ;
    }
  } else {
    static int init = 0;
    static swig_type_info* descriptor = 0;
    if (!init) {
      descriptor = SWIG_TypeQuery("std::string" " *");
      init = 1;
    }
    if (descriptor) {
      std::string *vptr;
      int res = SWIG_ConvertPtr(obj, (void**)&vptr, descriptor, 0);
      if (SWIG_IsOK(res) && val) *val = vptr;
      return res;
    }
  }
  return SWIG_ERROR;
}


SWIGINTERNINLINE PyObject* 
SWIG_From_unsigned_SS_long  (unsigned long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLong(value) : PyInt_FromLong(static_cast< long >(value));
}


SWIGINTERNINLINE PyObject *
SWIG_From_unsigned_SS_char  (unsigned char value)
{    
  return SWIG_From_unsigned_SS_long  (value);
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_char (PyObject * obj, unsigned char *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UCHAR_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned char >(v);
    }
  }  
  return res;
}


SWIGINTERN int
SWIG_AsVal_bool (PyObject *obj, bool *val)
{
  int r;
  if (!PyBool_Check(obj))
    return SWIG_ERROR;
  r = PyObject_IsTrue(obj);
  if (r == -1)
    return SWIG_ERROR;
  if (val) *val = r ? true : false;
  return SWIG_OK;
}


SWIGINTERNINLINE PyObject *
SWIG_From_std_string  (const std::string& s)
{
  return SWIG_FromCharPtrAndSize(s.data(), s.size());
}


namespace swig {
  template <class Type>
  struct noconst_traits {
    typedef Type noconst_type;
  };

  template <class Type>
  struct noconst_traits<const Type> {
    typedef Type noconst_type;
  };

  /*
    type categories
  */
  struct pointer_category { };
  struct value_category { };

  /*
    General traits that provides type_name and type_info
  */
  template <class Type> struct traits { };

  template <class Type>
  inline const char* type_name() {
    return traits<typename noconst_traits<Type >::noconst_type >::type_name();
  }

  template <class Type> struct traits_info {
    static swig_type_info *type_query(std::string name) {
      name += " *";
      return SWIG_TypeQuery(name.c_str());
    }
    static swig_type_info *type_info() {
      static swig_type_info *info = type_query(type_name<Type>());
      return info;
    }
  };

  /*
    Partial specialization for pointers (traits_info)
  */
  template <class Type> struct traits_info<Type *> {
    static swig_type_info *type_query(std::string name) {
      name += " *";
      return SWIG_TypeQuery(name.c_str());
    }
    static swig_type_info *type_info() {
      static swig_type_info *info = type_query(type_name<Type>());
      return info;
    }
  };

  template <class Type>
  inline swig_type_info *type_info() {
    return traits_info<Type>::type_info();
  }

  /*
    Partial specialization for pointers (traits)
  */
  template <class Type> struct traits <Type *> {
    typedef pointer_category category;
    static std::string make_ptr_name(const char* name) {
      std::string ptrname = name;
      ptrname += " *";
      return ptrname;
    }
    static const char* type_name() {
      static std::string name = make_ptr_name(swig::type_name<Type>());
      return name.c_str();
    }
  };

  template <class Type, class Category>
  struct traits_as { };

  template <class Type, class Category>
  struct traits_check { };

}


namespace swig {  
  /*
    Traits that provides the from method
  */
  template <class Type> struct traits_from_ptr {
    static PyObject *from(Type *val, int owner = 0) {
      return SWIG_InternalNewPointerObj(val, type_info<Type>(), owner);
    }
  };

  template <class Type> struct traits_from {
    static PyObject *from(const Type& val) {
      return traits_from_ptr<Type>::from(new Type(val), 1);
    }
  };

  template <class Type> struct traits_from<Type *> {
    static PyObject *from(Type* val) {
      return traits_from_ptr<Type>::from(val, 0);
    }
  };

  template <class Type> struct traits_from<const Type *> {
    static PyObject *from(const Type* val) {
      return traits_from_ptr<Type>::from(const_cast<Type*>(val), 0);
    }
  };


  template <class Type>
  inline PyObject *from(const Type& val) {
    return traits_from<Type>::from(val);
  }

  template <class Type>
  inline PyObject *from_ptr(Type* val, int owner) {
    return traits_from_ptr<Type>::from(val, owner);
  }

  /*
    Traits that provides the asval/as/check method
  */
  template <class Type>
  struct traits_asptr {   
    static int asptr(PyObject *obj, Type **val) {
      int res = SWIG_ERROR;
      swig_type_info *descriptor = type_info<Type>();
      if (val) {
        Type *p = 0;
        int newmem = 0;
        res = descriptor ? SWIG_ConvertPtrAndOwn(obj, (void **)&p, descriptor, 0, &newmem) : SWIG_ERROR;
        if (SWIG_IsOK(res)) {
          if (newmem & SWIG_CAST_NEW_MEMORY) {
            res |= SWIG_NEWOBJMASK;
          }
          *val = p;
        }
      } else {
        res = descriptor ? SWIG_ConvertPtr(obj, 0, descriptor, 0) : SWIG_ERROR;
      }
      return res;
    }
  }; 

  template <class Type>
  inline int asptr(PyObject *obj, Type **vptr) {
    return traits_asptr<Type>::asptr(obj, vptr);
  }

  template <class Type> 
  struct traits_asval {
    static int asval(PyObject *obj, Type *val) {
      if (val) {
	Type *p = 0;
	int res = traits_asptr<Type>::asptr(obj, &p);
	if (!SWIG_IsOK(res)) return res;	
	if (p) {
	  typedef typename noconst_traits<Type>::noconst_type noconst_type;
	  *(const_cast<noconst_type*>(val)) = *p;
	  if (SWIG_IsNewObj(res)){
	    delete p;
	    res = SWIG_DelNewMask(res);
	  }
	  return res;
	} else {
	  return SWIG_ERROR;
	}
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };

  template <class Type> struct traits_asval<Type*> {
    static int asval(PyObject *obj, Type **val) {
      if (val) {
        typedef typename noconst_traits<Type>::noconst_type noconst_type;
        noconst_type *p = 0;
        int res = traits_asptr<noconst_type>::asptr(obj,  &p);
        if (SWIG_IsOK(res)) {
          *(const_cast<noconst_type**>(val)) = p;
	}
	return res;
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };
  
  template <class Type>
  inline int asval(PyObject *obj, Type *val) {
    return traits_asval<Type>::asval(obj, val);
  }

  template <class Type> 
  struct traits_as<Type, value_category> {
    static Type as(PyObject *obj) {
      Type v;
      int res = asval(obj, &v);
      if (!obj || !SWIG_IsOK(res)) {
	if (!PyErr_Occurred()) {
	  ::SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	throw std::invalid_argument("bad type");
      }
      return v;
    }
  };

  template <class Type> 
  struct traits_as<Type, pointer_category> {
    static Type as(PyObject *obj) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res) && v) {
	if (SWIG_IsNewObj(res)) {
	  Type r(*v);
	  delete v;
	  return r;
	} else {
	  return *v;
	}
      } else {
	if (!PyErr_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	throw std::invalid_argument("bad type");
      }
    }
  };

  template <class Type> 
  struct traits_as<Type*, pointer_category> {
    static Type* as(PyObject *obj) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res)) {
	return v;
      } else {
	if (!PyErr_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	throw std::invalid_argument("bad type");
      }
    }
  };
    
  template <class Type>
  inline Type as(PyObject *obj) {
    return traits_as<Type, typename traits<Type>::category>::as(obj);
  }

  template <class Type> 
  struct traits_check<Type, value_category> {
    static bool check(PyObject *obj) {
      int res = obj ? asval(obj, (Type *)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type> 
  struct traits_check<Type, pointer_category> {
    static bool check(PyObject *obj) {
      int res = obj ? asptr(obj, (Type **)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type>
  inline bool check(PyObject *obj) {
    return traits_check<Type, typename traits<Type>::category>::check(obj);
  }
}


#if defined(__SUNPRO_CC) && defined(_RWSTD_VER)
#  if !defined(SWIG_NO_STD_NOITERATOR_TRAITS_STL)
#    define SWIG_STD_NOITERATOR_TRAITS_STL
#  endif
#endif

#if !defined(SWIG_STD_NOITERATOR_TRAITS_STL)
#include <iterator>
#else
namespace std {
  template <class Iterator>
  struct iterator_traits {
    typedef ptrdiff_t difference_type;
    typedef typename Iterator::value_type value_type;
  };

  template <class Iterator, class Category,class T, class Reference, class Pointer, class Distance>
  struct iterator_traits<__reverse_bi_iterator<Iterator,Category,T,Reference,Pointer,Distance> > {
    typedef Distance difference_type;
    typedef T value_type;
  };

  template <class T>
  struct iterator_traits<T*> {
    typedef T value_type;
    typedef ptrdiff_t difference_type;
  };

  template<typename _InputIterator>
  inline typename iterator_traits<_InputIterator>::difference_type
  distance(_InputIterator __first, _InputIterator __last)
  {
    typename iterator_traits<_InputIterator>::difference_type __n = 0;
    while (__first != __last) {
      ++__first; ++__n;
    }
    return __n;
  }
}
#endif


namespace swig {
  template<typename OutIterator>
  class SwigPyIterator_T :  public SwigPyIterator
  {
  public:
    typedef OutIterator out_iterator;
    typedef typename std::iterator_traits<out_iterator>::value_type value_type;    
    typedef SwigPyIterator_T<out_iterator> self_type;

    SwigPyIterator_T(out_iterator curr, PyObject *seq)
      : SwigPyIterator(seq), current(curr)
    {
    }

    const out_iterator& get_current() const
    {
      return current;
    }

    
    bool equal (const SwigPyIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return (current == iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }
    
    ptrdiff_t distance(const SwigPyIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return std::distance(current, iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }    
    
  protected:
    out_iterator current;
  };
  
  template <class ValueType>
  struct from_oper 
  {
    typedef const ValueType& argument_type;
    typedef PyObject *result_type;
    result_type operator()(argument_type v) const
    {
      return swig::from(v);
    }
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyForwardIteratorOpen_T :  public SwigPyIterator_T<OutIterator>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;
    typedef SwigPyForwardIteratorOpen_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyForwardIteratorOpen_T(out_iterator curr, PyObject *seq)
      : SwigPyIterator_T<OutIterator>(curr, seq)
    {
    }
    
    PyObject *value() const {
      return from(static_cast<const value_type&>(*(base::current)));
    }
    
    SwigPyIterator *copy() const
    {
      return new self_type(*this);
    }

    SwigPyIterator *incr(size_t n = 1)
    {
      while (n--) {
	++base::current;
      }
      return this;
    }

  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyIteratorOpen_T :  public SwigPyForwardIteratorOpen_T<OutIterator, ValueType, FromOper>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;
    typedef SwigPyIteratorOpen_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyIteratorOpen_T(out_iterator curr, PyObject *seq)
      : SwigPyForwardIteratorOpen_T<OutIterator>(curr, seq)
    {
    }

    SwigPyIterator *decr(size_t n = 1)
    {
      while (n--) {
	--base::current;
      }
      return this;
    }
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyForwardIteratorClosed_T :  public SwigPyIterator_T<OutIterator>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;    
    typedef SwigPyForwardIteratorClosed_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyForwardIteratorClosed_T(out_iterator curr, out_iterator first, out_iterator last, PyObject *seq)
      : SwigPyIterator_T<OutIterator>(curr, seq), begin(first), end(last)
    {
    }
    
    PyObject *value() const {
      if (base::current == end) {
	throw stop_iteration();
      } else {
	return from(static_cast<const value_type&>(*(base::current)));
      }
    }
    
    SwigPyIterator *copy() const
    {
      return new self_type(*this);
    }

    SwigPyIterator *incr(size_t n = 1)
    {
      while (n--) {
	if (base::current == end) {
	  throw stop_iteration();
	} else {
	  ++base::current;
	}
      }
      return this;
    }

  protected:
    out_iterator begin;
    out_iterator end;
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyIteratorClosed_T :  public SwigPyForwardIteratorClosed_T<OutIterator,ValueType,FromOper>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;
    typedef SwigPyForwardIteratorClosed_T<OutIterator, ValueType, FromOper> base0;
    typedef SwigPyIteratorClosed_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyIteratorClosed_T(out_iterator curr, out_iterator first, out_iterator last, PyObject *seq)
      : SwigPyForwardIteratorClosed_T<OutIterator,ValueType,FromOper>(curr, first, last, seq)
    {
    }

    SwigPyIterator *decr(size_t n = 1)
    {
      while (n--) {
	if (base::current == base0::begin) {
	  throw stop_iteration();
	} else {
	  --base::current;
	}
      }
      return this;
    }
  };


  template<typename OutIter>
  inline SwigPyIterator*
  make_output_forward_iterator(const OutIter& current, const OutIter& begin,const OutIter& end, PyObject *seq = 0)
  {
    return new SwigPyForwardIteratorClosed_T<OutIter>(current, begin, end, seq);
  }

  template<typename OutIter>
  inline SwigPyIterator*
  make_output_iterator(const OutIter& current, const OutIter& begin,const OutIter& end, PyObject *seq = 0)
  {
    return new SwigPyIteratorClosed_T<OutIter>(current, begin, end, seq);
  }

  template<typename OutIter>
  inline SwigPyIterator*
  make_output_forward_iterator(const OutIter& current, PyObject *seq = 0)
  {
    return new SwigPyForwardIteratorOpen_T<OutIter>(current, seq);
  }

  template<typename OutIter>
  inline SwigPyIterator*
  make_output_iterator(const OutIter& current, PyObject *seq = 0)
  {
    return new SwigPyIteratorOpen_T<OutIter>(current, seq);
  }

}


  namespace swig {
    template <>  struct traits< Quackle::Move > {
      typedef pointer_category category;
      static const char* type_name() { return"Quackle::Move"; }
    };
  }


#include <functional>

namespace std {
  template <>
  struct less <PyObject *>
  {
    bool
    operator()(PyObject * v, PyObject *w) const
    { 
      bool res;
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      res = PyObject_RichCompareBool(v, w, Py_LT) ? true : false;
      /* This may fall into a case of inconsistent
               eg. ObjA > ObjX > ObjB
               but ObjA < ObjB
      */
      if( PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError) )
      {
        /* Objects can't be compared, this mostly occurred in Python 3.0 */
        /* Compare their ptr directly for a workaround */
        res = (v < w);
        PyErr_Clear();
      }
      SWIG_PYTHON_THREAD_END_BLOCK;
      return res;
    }
  };

  template <>
  struct less <swig::SwigPtr_PyObject>
  {
    bool
    operator()(const swig::SwigPtr_PyObject& v, const swig::SwigPtr_PyObject& w) const
    {
      return std::less<PyObject *>()(v, w);
    }
  };

  template <>
  struct less <swig::SwigVar_PyObject>
  {
    bool
    operator()(const swig::SwigVar_PyObject& v, const swig::SwigVar_PyObject& w) const
    {
      return std::less<PyObject *>()(v, w);
    }
  };

}

namespace swig {
  template <> struct traits<PyObject *> {
    typedef value_category category;
    static const char* type_name() { return "PyObject *"; }
  };  

  template <>  struct traits_asval<PyObject * > {   
    typedef PyObject * value_type;
    static int asval(PyObject *obj, value_type *val) {
      if (val) *val = obj;
      return SWIG_OK;
    }
  };

  template <> 
  struct traits_check<PyObject *, value_category> {
    static bool check(PyObject *) {
      return true;
    }
  };

  template <>  struct traits_from<PyObject *> {
    typedef PyObject * value_type;
    static PyObject *from(const value_type& val) {
      Py_XINCREF(val);
      return val;
    }
  };
  
}

namespace swig {
  template <class Difference>
  inline size_t
  check_index(Difference i, size_t size, bool insert = false) {
    if ( i < 0 ) {
      if ((size_t) (-i) <= size)
	return (size_t) (i + size);
    } else if ( (size_t) i < size ) {
      return (size_t) i;
    } else if (insert && ((size_t) i == size)) {
      return size;
    }
    throw std::out_of_range("index out of range");
  }

  template <class Difference>
  void
  slice_adjust(Difference i, Difference j, Py_ssize_t step, size_t size, Difference &ii, Difference &jj, bool insert = false) {
    if (step == 0) {
      throw std::invalid_argument("slice step cannot be zero");
    } else if (step > 0) {
      // Required range: 0 <= i < size, 0 <= j < size, i <= j
      if (i < 0) {
        ii = 0;
      } else if (i < (Difference)size) {
        ii = i;
      } else if (insert && (i >= (Difference)size)) {
        ii = (Difference)size;
      }
      if (j < 0) {
        jj = 0;
      } else {
        jj = (j < (Difference)size) ? j : (Difference)size;
      }
      if (jj < ii)
        jj = ii;
    } else {
      // Required range: -1 <= i < size-1, -1 <= j < size-1, i >= j
      if (i < -1) {
        ii = -1;
      } else if (i < (Difference) size) {
        ii = i;
      } else if (i >= (Difference)(size-1)) {
        ii = (Difference)(size-1);
      }
      if (j < -1) {
        jj = -1;
      } else {
        jj = (j < (Difference)size ) ? j : (Difference)(size-1);
      }
      if (ii < jj)
        ii = jj;
    }
  }

  template <class Sequence, class Difference>
  inline typename Sequence::iterator
  getpos(Sequence* self, Difference i)  {
    typename Sequence::iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline typename Sequence::const_iterator
  cgetpos(const Sequence* self, Difference i)  {
    typename Sequence::const_iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence>
  inline void
  erase(Sequence* seq, const typename Sequence::iterator& position) {
    seq->erase(position);
  }

  template <class Sequence>
  struct traits_reserve {
    static void reserve(Sequence & /*seq*/, typename Sequence::size_type /*n*/) {
      // This should be specialized for types that support reserve
    }
  };

  template <class Sequence, class Difference>
  inline Sequence*
  getslice(const Sequence* self, Difference i, Difference j, Py_ssize_t step) {
    typename Sequence::size_type size = self->size();
    Difference ii = 0;
    Difference jj = 0;
    swig::slice_adjust(i, j, step, size, ii, jj);

    if (step > 0) {
      typename Sequence::const_iterator sb = self->begin();
      typename Sequence::const_iterator se = self->begin();
      std::advance(sb,ii);
      std::advance(se,jj);
      if (step == 1) {
        return new Sequence(sb, se);
      } else {
        Sequence *sequence = new Sequence();
        swig::traits_reserve<Sequence>::reserve(*sequence, (jj - ii + step - 1) / step);
        typename Sequence::const_iterator it = sb;
        while (it!=se) {
          sequence->push_back(*it);
          for (Py_ssize_t c=0; c<step && it!=se; ++c)
            it++;
        }
        return sequence;
      } 
    } else {
      Sequence *sequence = new Sequence();
      swig::traits_reserve<Sequence>::reserve(*sequence, (ii - jj - step - 1) / -step);
      typename Sequence::const_reverse_iterator sb = self->rbegin();
      typename Sequence::const_reverse_iterator se = self->rbegin();
      std::advance(sb,size-ii-1);
      std::advance(se,size-jj-1);
      typename Sequence::const_reverse_iterator it = sb;
      while (it!=se) {
        sequence->push_back(*it);
        for (Py_ssize_t c=0; c<-step && it!=se; ++c)
          it++;
      }
      return sequence;
    }
  }

  template <class Sequence, class Difference, class InputSeq>
  inline void
  setslice(Sequence* self, Difference i, Difference j, Py_ssize_t step, const InputSeq& is = InputSeq()) {
    typename Sequence::size_type size = self->size();
    Difference ii = 0;
    Difference jj = 0;
    swig::slice_adjust(i, j, step, size, ii, jj, true);
    if (step > 0) {
      if (step == 1) {
        size_t ssize = jj - ii;
        if (ssize <= is.size()) {
          // expanding/staying the same size
          swig::traits_reserve<Sequence>::reserve(*self, self->size() - ssize + is.size());
          typename Sequence::iterator sb = self->begin();
          typename InputSeq::const_iterator isit = is.begin();
          std::advance(sb,ii);
          std::advance(isit, jj - ii);
          self->insert(std::copy(is.begin(), isit, sb), isit, is.end());
        } else {
          // shrinking
          typename Sequence::iterator sb = self->begin();
          typename Sequence::iterator se = self->begin();
          std::advance(sb,ii);
          std::advance(se,jj);
          self->erase(sb,se);
          sb = self->begin();
          std::advance(sb,ii);
          self->insert(sb, is.begin(), is.end());
        }
      } else {
        size_t replacecount = (jj - ii + step - 1) / step;
        if (is.size() != replacecount) {
          char msg[1024];
          PyOS_snprintf(msg, sizeof(msg), "attempt to assign sequence of size %lu to extended slice of size %lu", (unsigned long)is.size(), (unsigned long)replacecount);
          throw std::invalid_argument(msg);
        }
        typename Sequence::const_iterator isit = is.begin();
        typename Sequence::iterator it = self->begin();
        std::advance(it,ii);
        for (size_t rc=0; rc<replacecount && it != self->end(); ++rc) {
          *it++ = *isit++;
          for (Py_ssize_t c=0; c<(step-1) && it != self->end(); ++c)
            it++;
        }
      }
    } else {
      size_t replacecount = (ii - jj - step - 1) / -step;
      if (is.size() != replacecount) {
        char msg[1024];
        PyOS_snprintf(msg, sizeof(msg), "attempt to assign sequence of size %lu to extended slice of size %lu", (unsigned long)is.size(), (unsigned long)replacecount);
        throw std::invalid_argument(msg);
      }
      typename Sequence::const_iterator isit = is.begin();
      typename Sequence::reverse_iterator it = self->rbegin();
      std::advance(it,size-ii-1);
      for (size_t rc=0; rc<replacecount && it != self->rend(); ++rc) {
        *it++ = *isit++;
        for (Py_ssize_t c=0; c<(-step-1) && it != self->rend(); ++c)
          it++;
      }
    }
  }

  template <class Sequence, class Difference>
  inline void
  delslice(Sequence* self, Difference i, Difference j, Py_ssize_t step) {
    typename Sequence::size_type size = self->size();
    Difference ii = 0;
    Difference jj = 0;
    swig::slice_adjust(i, j, step, size, ii, jj, true);
    if (step > 0) {
      typename Sequence::iterator sb = self->begin();
      std::advance(sb,ii);
      if (step == 1) {
        typename Sequence::iterator se = self->begin();
        std::advance(se,jj);
        self->erase(sb,se);
      } else {
        typename Sequence::iterator it = sb;
        size_t delcount = (jj - ii + step - 1) / step;
        while (delcount) {
          it = self->erase(it);
          for (Py_ssize_t c=0; c<(step-1) && it != self->end(); ++c)
            it++;
          delcount--;
        }
      }
    } else {
      typename Sequence::reverse_iterator sb = self->rbegin();
      std::advance(sb,size-ii-1);
      typename Sequence::reverse_iterator it = sb;
      size_t delcount = (ii - jj - step - 1) / -step;
      while (delcount) {
        it = typename Sequence::reverse_iterator(self->erase((++it).base()));
        for (Py_ssize_t c=0; c<(-step-1) && it != self->rend(); ++c)
          it++;
        delcount--;
      }
    }
  }
}


namespace swig {
  template <class Seq, class T = typename Seq::value_type >
  struct IteratorProtocol {
    static void assign(PyObject *obj, Seq *seq) {
      SwigVar_PyObject iter = PyObject_GetIter(obj);
      if (iter) {
        SwigVar_PyObject item = PyIter_Next(iter);
        while (item) {
          seq->insert(seq->end(), swig::as<T>(item));
          item = PyIter_Next(iter);
        }
      }
    }

    static bool check(PyObject *obj) {
      bool ret = false;
      SwigVar_PyObject iter = PyObject_GetIter(obj);
      if (iter) {
        SwigVar_PyObject item = PyIter_Next(iter);
        ret = true;
        while (item) {
          ret = swig::check<T>(item);
          item = ret ? PyIter_Next(iter) : 0;
        }
      }
      return ret;
    }
  };

  template <class Seq, class T = typename Seq::value_type >
  struct traits_asptr_stdseq {
    typedef Seq sequence;
    typedef T value_type;

    static bool is_iterable(PyObject *obj) {
      SwigVar_PyObject iter = PyObject_GetIter(obj);
      PyErr_Clear();
      return iter != 0;
    }

    static int asptr(PyObject *obj, sequence **seq) {
      int ret = SWIG_ERROR;
      if (obj == Py_None || SWIG_Python_GetSwigThis(obj)) {
	sequence *p;
	swig_type_info *descriptor = swig::type_info<sequence>();
	if (descriptor && SWIG_IsOK(::SWIG_ConvertPtr(obj, (void **)&p, descriptor, 0))) {
	  if (seq) *seq = p;
	  return SWIG_OLDOBJ;
	}
      } else if (is_iterable(obj)) {
	try {
	  if (seq) {
	    *seq = new sequence();
            IteratorProtocol<Seq, T>::assign(obj, *seq);
            if (!PyErr_Occurred())
              return SWIG_NEWOBJ;
	  } else {
	    return IteratorProtocol<Seq, T>::check(obj) ? SWIG_OK : SWIG_ERROR;
	  }
	} catch (std::exception& e) {
          if (seq && !PyErr_Occurred())
            PyErr_SetString(PyExc_TypeError, e.what());
	}
        if (seq)
          delete *seq;
	return SWIG_ERROR;
      }
      return ret;
    }
  };

  template <class Seq, class T = typename Seq::value_type >
  struct traits_from_stdseq {
    typedef Seq sequence;
    typedef T value_type;
    typedef typename Seq::size_type size_type;
    typedef typename sequence::const_iterator const_iterator;

    static PyObject *from(const sequence& seq) {
#ifdef SWIG_PYTHON_EXTRA_NATIVE_CONTAINERS
      swig_type_info *desc = swig::type_info<sequence>();
      if (desc && desc->clientdata) {
	return SWIG_InternalNewPointerObj(new sequence(seq), desc, SWIG_POINTER_OWN);
      }
#endif
      size_type size = seq.size();
      if (size <= (size_type)INT_MAX) {
	PyObject *obj = PyTuple_New((Py_ssize_t)size);
	Py_ssize_t i = 0;
	for (const_iterator it = seq.begin(); it != seq.end(); ++it, ++i) {
	  PyTuple_SetItem(obj,i,swig::from<value_type>(*it));
	}
	return obj;
      } else {
	PyErr_SetString(PyExc_OverflowError,"sequence size not valid in python");
	return NULL;
      }
    }
  };
}


  namespace swig {
    template <class T>
    struct traits_reserve<std::vector<T> > {
      static void reserve(std::vector<T> &seq, typename std::vector<T>::size_type n) {
        seq.reserve(n);
      }
    };

    template <class T>
    struct traits_asptr<std::vector<T> >  {
      static int asptr(PyObject *obj, std::vector<T> **vec) {
	return traits_asptr_stdseq<std::vector<T> >::asptr(obj, vec);
      }
    };
    
    template <class T>
    struct traits_from<std::vector<T> > {
      static PyObject *from(const std::vector<T>& vec) {
	return traits_from_stdseq<std::vector<T> >::from(vec);
      }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector< Quackle::Move, std::allocator< Quackle::Move > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "Quackle::Move" "," "std::allocator< Quackle::Move >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_Quackle_Move_Sg__iterator(std::vector< Quackle::Move > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_Quackle_Move_Sg____nonzero__(std::vector< Quackle::Move > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_Quackle_Move_Sg____bool__(std::vector< Quackle::Move > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< Quackle::Move >::size_type std_vector_Sl_Quackle_Move_Sg____len__(std::vector< Quackle::Move > const *self){
      return self->size();
    }

#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERNINLINE PyObject* 
SWIG_From_unsigned_SS_long_SS_long  (unsigned long long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLongLong(value) : PyInt_FromLong(static_cast< long >(value));
}
#endif


SWIGINTERNINLINE PyObject *
SWIG_From_size_t  (size_t value)
{    
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(size_t) <= sizeof(unsigned long)) {
#endif
    return SWIG_From_unsigned_SS_long  (static_cast< unsigned long >(value));
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else {
    /* assume sizeof(size_t) <= sizeof(unsigned long long) */
    return SWIG_From_unsigned_SS_long_SS_long  (static_cast< unsigned long long >(value));
  }
#endif
}

SWIGINTERN std::vector< Quackle::Move,std::allocator< Quackle::Move > > *std_vector_Sl_Quackle_Move_Sg____getslice__(std::vector< Quackle::Move > *self,std::vector< Quackle::Move >::difference_type i,std::vector< Quackle::Move >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_Quackle_Move_Sg____setslice____SWIG_0(std::vector< Quackle::Move > *self,std::vector< Quackle::Move >::difference_type i,std::vector< Quackle::Move >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< Quackle::Move,std::allocator< Quackle::Move > >());
    }
SWIGINTERN void std_vector_Sl_Quackle_Move_Sg____setslice____SWIG_1(std::vector< Quackle::Move > *self,std::vector< Quackle::Move >::difference_type i,std::vector< Quackle::Move >::difference_type j,std::vector< Quackle::Move,std::allocator< Quackle::Move > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_Quackle_Move_Sg____delslice__(std::vector< Quackle::Move > *self,std::vector< Quackle::Move >::difference_type i,std::vector< Quackle::Move >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_Quackle_Move_Sg____delitem____SWIG_0(std::vector< Quackle::Move > *self,std::vector< Quackle::Move >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< Quackle::Move,std::allocator< Quackle::Move > > *std_vector_Sl_Quackle_Move_Sg____getitem____SWIG_0(std::vector< Quackle::Move > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< Quackle::Move,std::allocator< Quackle::Move > >::difference_type id = i;
      std::vector< Quackle::Move,std::allocator< Quackle::Move > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_Quackle_Move_Sg____setitem____SWIG_0(std::vector< Quackle::Move > *self,PySliceObject *slice,std::vector< Quackle::Move,std::allocator< Quackle::Move > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< Quackle::Move,std::allocator< Quackle::Move > >::difference_type id = i;
      std::vector< Quackle::Move,std::allocator< Quackle::Move > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_Quackle_Move_Sg____setitem____SWIG_1(std::vector< Quackle::Move > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< Quackle::Move,std::allocator< Quackle::Move > >::difference_type id = i;
      std::vector< Quackle::Move,std::allocator< Quackle::Move > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_Quackle_Move_Sg____delitem____SWIG_1(std::vector< Quackle::Move > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< Quackle::Move,std::allocator< Quackle::Move > >::difference_type id = i;
      std::vector< Quackle::Move,std::allocator< Quackle::Move > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< Quackle::Move >::value_type const &std_vector_Sl_Quackle_Move_Sg____getitem____SWIG_1(std::vector< Quackle::Move > const *self,std::vector< Quackle::Move >::difference_type i){
      return *(swig::cgetpos(self, i));
    }

namespace swig {
  static PyObject* container_owner_attribute() {
    static PyObject* attr = SWIG_Python_str_FromChar("__swig_container");
    return attr;
  }

  template <typename T>
  struct container_owner {
    // By default, do not add the back-reference (for value types)
    // Specialization below will check the reference for pointer types.
    static bool back_reference(PyObject* /*child*/, PyObject* /*owner*/) {
      return false;
    }
  };

  template <>
  struct container_owner<swig::pointer_category> {  
    /*
     * Call to add a back-reference to the owning object when returning a 
     * reference from a container.  Will only set the reference if child
     * is a SWIG wrapper object that does not own the pointer.
     *
     * returns whether the reference was set or not
     */
    static bool back_reference(PyObject* child, PyObject* owner) {
      SwigPyObject* swigThis = SWIG_Python_GetSwigThis(child);
      if (swigThis && (swigThis->own & SWIG_POINTER_OWN) != SWIG_POINTER_OWN) {
        return PyObject_SetAttr(child, container_owner_attribute(), owner) != -1;
      }
      return false;
    }
  };
}

SWIGINTERN void std_vector_Sl_Quackle_Move_Sg____setitem____SWIG_2(std::vector< Quackle::Move > *self,std::vector< Quackle::Move >::difference_type i,std::vector< Quackle::Move >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::vector< Quackle::Move >::value_type std_vector_Sl_Quackle_Move_Sg__pop(std::vector< Quackle::Move > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< Quackle::Move,std::allocator< Quackle::Move > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_Quackle_Move_Sg__append(std::vector< Quackle::Move > *self,std::vector< Quackle::Move >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< Quackle::Move >::iterator std_vector_Sl_Quackle_Move_Sg__erase__SWIG_0(std::vector< Quackle::Move > *self,std::vector< Quackle::Move >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< Quackle::Move >::iterator std_vector_Sl_Quackle_Move_Sg__erase__SWIG_1(std::vector< Quackle::Move > *self,std::vector< Quackle::Move >::iterator first,std::vector< Quackle::Move >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< Quackle::Move >::iterator std_vector_Sl_Quackle_Move_Sg__insert__SWIG_0(std::vector< Quackle::Move > *self,std::vector< Quackle::Move >::iterator pos,std::vector< Quackle::Move >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_Quackle_Move_Sg__insert__SWIG_1(std::vector< Quackle::Move > *self,std::vector< Quackle::Move >::iterator pos,std::vector< Quackle::Move >::size_type n,std::vector< Quackle::Move >::value_type const &x){ self->insert(pos, n, x); }

  namespace swig {
    template <>  struct traits< Quackle::Player > {
      typedef pointer_category category;
      static const char* type_name() { return"Quackle::Player"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector< Quackle::Player, std::allocator< Quackle::Player > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "Quackle::Player" "," "std::allocator< Quackle::Player >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_Quackle_Player_Sg__iterator(std::vector< Quackle::Player > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_Quackle_Player_Sg____nonzero__(std::vector< Quackle::Player > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_Quackle_Player_Sg____bool__(std::vector< Quackle::Player > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< Quackle::Player >::size_type std_vector_Sl_Quackle_Player_Sg____len__(std::vector< Quackle::Player > const *self){
      return self->size();
    }
SWIGINTERN std::vector< Quackle::Player,std::allocator< Quackle::Player > > *std_vector_Sl_Quackle_Player_Sg____getslice__(std::vector< Quackle::Player > *self,std::vector< Quackle::Player >::difference_type i,std::vector< Quackle::Player >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_Quackle_Player_Sg____setslice____SWIG_0(std::vector< Quackle::Player > *self,std::vector< Quackle::Player >::difference_type i,std::vector< Quackle::Player >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< Quackle::Player,std::allocator< Quackle::Player > >());
    }
SWIGINTERN void std_vector_Sl_Quackle_Player_Sg____setslice____SWIG_1(std::vector< Quackle::Player > *self,std::vector< Quackle::Player >::difference_type i,std::vector< Quackle::Player >::difference_type j,std::vector< Quackle::Player,std::allocator< Quackle::Player > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_Quackle_Player_Sg____delslice__(std::vector< Quackle::Player > *self,std::vector< Quackle::Player >::difference_type i,std::vector< Quackle::Player >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_Quackle_Player_Sg____delitem____SWIG_0(std::vector< Quackle::Player > *self,std::vector< Quackle::Player >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< Quackle::Player,std::allocator< Quackle::Player > > *std_vector_Sl_Quackle_Player_Sg____getitem____SWIG_0(std::vector< Quackle::Player > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< Quackle::Player,std::allocator< Quackle::Player > >::difference_type id = i;
      std::vector< Quackle::Player,std::allocator< Quackle::Player > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_Quackle_Player_Sg____setitem____SWIG_0(std::vector< Quackle::Player > *self,PySliceObject *slice,std::vector< Quackle::Player,std::allocator< Quackle::Player > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< Quackle::Player,std::allocator< Quackle::Player > >::difference_type id = i;
      std::vector< Quackle::Player,std::allocator< Quackle::Player > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_Quackle_Player_Sg____setitem____SWIG_1(std::vector< Quackle::Player > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< Quackle::Player,std::allocator< Quackle::Player > >::difference_type id = i;
      std::vector< Quackle::Player,std::allocator< Quackle::Player > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_Quackle_Player_Sg____delitem____SWIG_1(std::vector< Quackle::Player > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< Quackle::Player,std::allocator< Quackle::Player > >::difference_type id = i;
      std::vector< Quackle::Player,std::allocator< Quackle::Player > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< Quackle::Player >::value_type const &std_vector_Sl_Quackle_Player_Sg____getitem____SWIG_1(std::vector< Quackle::Player > const *self,std::vector< Quackle::Player >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_Quackle_Player_Sg____setitem____SWIG_2(std::vector< Quackle::Player > *self,std::vector< Quackle::Player >::difference_type i,std::vector< Quackle::Player >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::vector< Quackle::Player >::value_type std_vector_Sl_Quackle_Player_Sg__pop(std::vector< Quackle::Player > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< Quackle::Player,std::allocator< Quackle::Player > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_Quackle_Player_Sg__append(std::vector< Quackle::Player > *self,std::vector< Quackle::Player >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< Quackle::Player >::iterator std_vector_Sl_Quackle_Player_Sg__erase__SWIG_0(std::vector< Quackle::Player > *self,std::vector< Quackle::Player >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< Quackle::Player >::iterator std_vector_Sl_Quackle_Player_Sg__erase__SWIG_1(std::vector< Quackle::Player > *self,std::vector< Quackle::Player >::iterator first,std::vector< Quackle::Player >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< Quackle::Player >::iterator std_vector_Sl_Quackle_Player_Sg__insert__SWIG_0(std::vector< Quackle::Player > *self,std::vector< Quackle::Player >::iterator pos,std::vector< Quackle::Player >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_Quackle_Player_Sg__insert__SWIG_1(std::vector< Quackle::Player > *self,std::vector< Quackle::Player >::iterator pos,std::vector< Quackle::Player >::size_type n,std::vector< Quackle::Player >::value_type const &x){ self->insert(pos, n, x); }

  namespace swig {
    template <>  struct traits< Quackle::ProbableRack > {
      typedef pointer_category category;
      static const char* type_name() { return"Quackle::ProbableRack"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector< Quackle::ProbableRack, std::allocator< Quackle::ProbableRack > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "Quackle::ProbableRack" "," "std::allocator< Quackle::ProbableRack >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_Quackle_ProbableRack_Sg__iterator(std::vector< Quackle::ProbableRack > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_Quackle_ProbableRack_Sg____nonzero__(std::vector< Quackle::ProbableRack > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_Quackle_ProbableRack_Sg____bool__(std::vector< Quackle::ProbableRack > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< Quackle::ProbableRack >::size_type std_vector_Sl_Quackle_ProbableRack_Sg____len__(std::vector< Quackle::ProbableRack > const *self){
      return self->size();
    }
SWIGINTERN std::vector< Quackle::ProbableRack,std::allocator< Quackle::ProbableRack > > *std_vector_Sl_Quackle_ProbableRack_Sg____getslice__(std::vector< Quackle::ProbableRack > *self,std::vector< Quackle::ProbableRack >::difference_type i,std::vector< Quackle::ProbableRack >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_Quackle_ProbableRack_Sg____setslice____SWIG_0(std::vector< Quackle::ProbableRack > *self,std::vector< Quackle::ProbableRack >::difference_type i,std::vector< Quackle::ProbableRack >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< Quackle::ProbableRack,std::allocator< Quackle::ProbableRack > >());
    }
SWIGINTERN void std_vector_Sl_Quackle_ProbableRack_Sg____setslice____SWIG_1(std::vector< Quackle::ProbableRack > *self,std::vector< Quackle::ProbableRack >::difference_type i,std::vector< Quackle::ProbableRack >::difference_type j,std::vector< Quackle::ProbableRack,std::allocator< Quackle::ProbableRack > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_Quackle_ProbableRack_Sg____delslice__(std::vector< Quackle::ProbableRack > *self,std::vector< Quackle::ProbableRack >::difference_type i,std::vector< Quackle::ProbableRack >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_Quackle_ProbableRack_Sg____delitem____SWIG_0(std::vector< Quackle::ProbableRack > *self,std::vector< Quackle::ProbableRack >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< Quackle::ProbableRack,std::allocator< Quackle::ProbableRack > > *std_vector_Sl_Quackle_ProbableRack_Sg____getitem____SWIG_0(std::vector< Quackle::ProbableRack > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< Quackle::ProbableRack,std::allocator< Quackle::ProbableRack > >::difference_type id = i;
      std::vector< Quackle::ProbableRack,std::allocator< Quackle::ProbableRack > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_Quackle_ProbableRack_Sg____setitem____SWIG_0(std::vector< Quackle::ProbableRack > *self,PySliceObject *slice,std::vector< Quackle::ProbableRack,std::allocator< Quackle::ProbableRack > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< Quackle::ProbableRack,std::allocator< Quackle::ProbableRack > >::difference_type id = i;
      std::vector< Quackle::ProbableRack,std::allocator< Quackle::ProbableRack > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_Quackle_ProbableRack_Sg____setitem____SWIG_1(std::vector< Quackle::ProbableRack > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< Quackle::ProbableRack,std::allocator< Quackle::ProbableRack > >::difference_type id = i;
      std::vector< Quackle::ProbableRack,std::allocator< Quackle::ProbableRack > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_Quackle_ProbableRack_Sg____delitem____SWIG_1(std::vector< Quackle::ProbableRack > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< Quackle::ProbableRack,std::allocator< Quackle::ProbableRack > >::difference_type id = i;
      std::vector< Quackle::ProbableRack,std::allocator< Quackle::ProbableRack > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< Quackle::ProbableRack >::value_type const &std_vector_Sl_Quackle_ProbableRack_Sg____getitem____SWIG_1(std::vector< Quackle::ProbableRack > const *self,std::vector< Quackle::ProbableRack >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_Quackle_ProbableRack_Sg____setitem____SWIG_2(std::vector< Quackle::ProbableRack > *self,std::vector< Quackle::ProbableRack >::difference_type i,std::vector< Quackle::ProbableRack >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::vector< Quackle::ProbableRack >::value_type std_vector_Sl_Quackle_ProbableRack_Sg__pop(std::vector< Quackle::ProbableRack > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< Quackle::ProbableRack,std::allocator< Quackle::ProbableRack > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_Quackle_ProbableRack_Sg__append(std::vector< Quackle::ProbableRack > *self,std::vector< Quackle::ProbableRack >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< Quackle::ProbableRack >::iterator std_vector_Sl_Quackle_ProbableRack_Sg__erase__SWIG_0(std::vector< Quackle::ProbableRack > *self,std::vector< Quackle::ProbableRack >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< Quackle::ProbableRack >::iterator std_vector_Sl_Quackle_ProbableRack_Sg__erase__SWIG_1(std::vector< Quackle::ProbableRack > *self,std::vector< Quackle::ProbableRack >::iterator first,std::vector< Quackle::ProbableRack >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< Quackle::ProbableRack >::iterator std_vector_Sl_Quackle_ProbableRack_Sg__insert__SWIG_0(std::vector< Quackle::ProbableRack > *self,std::vector< Quackle::ProbableRack >::iterator pos,std::vector< Quackle::ProbableRack >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_Quackle_ProbableRack_Sg__insert__SWIG_1(std::vector< Quackle::ProbableRack > *self,std::vector< Quackle::ProbableRack >::iterator pos,std::vector< Quackle::ProbableRack >::size_type n,std::vector< Quackle::ProbableRack >::value_type const &x){ self->insert(pos, n, x); }

  namespace swig {
    template <>  struct traits< Quackle::GamePosition > {
      typedef pointer_category category;
      static const char* type_name() { return"Quackle::GamePosition"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector< Quackle::GamePosition, std::allocator< Quackle::GamePosition > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "Quackle::GamePosition" "," "std::allocator< Quackle::GamePosition >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_Quackle_GamePosition_Sg__iterator(std::vector< Quackle::GamePosition > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_Quackle_GamePosition_Sg____nonzero__(std::vector< Quackle::GamePosition > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_Quackle_GamePosition_Sg____bool__(std::vector< Quackle::GamePosition > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< Quackle::GamePosition >::size_type std_vector_Sl_Quackle_GamePosition_Sg____len__(std::vector< Quackle::GamePosition > const *self){
      return self->size();
    }
SWIGINTERN std::vector< Quackle::GamePosition,std::allocator< Quackle::GamePosition > > *std_vector_Sl_Quackle_GamePosition_Sg____getslice__(std::vector< Quackle::GamePosition > *self,std::vector< Quackle::GamePosition >::difference_type i,std::vector< Quackle::GamePosition >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_Quackle_GamePosition_Sg____setslice____SWIG_0(std::vector< Quackle::GamePosition > *self,std::vector< Quackle::GamePosition >::difference_type i,std::vector< Quackle::GamePosition >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< Quackle::GamePosition,std::allocator< Quackle::GamePosition > >());
    }
SWIGINTERN void std_vector_Sl_Quackle_GamePosition_Sg____setslice____SWIG_1(std::vector< Quackle::GamePosition > *self,std::vector< Quackle::GamePosition >::difference_type i,std::vector< Quackle::GamePosition >::difference_type j,std::vector< Quackle::GamePosition,std::allocator< Quackle::GamePosition > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_Quackle_GamePosition_Sg____delslice__(std::vector< Quackle::GamePosition > *self,std::vector< Quackle::GamePosition >::difference_type i,std::vector< Quackle::GamePosition >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_Quackle_GamePosition_Sg____delitem____SWIG_0(std::vector< Quackle::GamePosition > *self,std::vector< Quackle::GamePosition >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< Quackle::GamePosition,std::allocator< Quackle::GamePosition > > *std_vector_Sl_Quackle_GamePosition_Sg____getitem____SWIG_0(std::vector< Quackle::GamePosition > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< Quackle::GamePosition,std::allocator< Quackle::GamePosition > >::difference_type id = i;
      std::vector< Quackle::GamePosition,std::allocator< Quackle::GamePosition > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_Quackle_GamePosition_Sg____setitem____SWIG_0(std::vector< Quackle::GamePosition > *self,PySliceObject *slice,std::vector< Quackle::GamePosition,std::allocator< Quackle::GamePosition > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< Quackle::GamePosition,std::allocator< Quackle::GamePosition > >::difference_type id = i;
      std::vector< Quackle::GamePosition,std::allocator< Quackle::GamePosition > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_Quackle_GamePosition_Sg____setitem____SWIG_1(std::vector< Quackle::GamePosition > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< Quackle::GamePosition,std::allocator< Quackle::GamePosition > >::difference_type id = i;
      std::vector< Quackle::GamePosition,std::allocator< Quackle::GamePosition > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_Quackle_GamePosition_Sg____delitem____SWIG_1(std::vector< Quackle::GamePosition > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< Quackle::GamePosition,std::allocator< Quackle::GamePosition > >::difference_type id = i;
      std::vector< Quackle::GamePosition,std::allocator< Quackle::GamePosition > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< Quackle::GamePosition >::value_type const &std_vector_Sl_Quackle_GamePosition_Sg____getitem____SWIG_1(std::vector< Quackle::GamePosition > const *self,std::vector< Quackle::GamePosition >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_Quackle_GamePosition_Sg____setitem____SWIG_2(std::vector< Quackle::GamePosition > *self,std::vector< Quackle::GamePosition >::difference_type i,std::vector< Quackle::GamePosition >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::vector< Quackle::GamePosition >::value_type std_vector_Sl_Quackle_GamePosition_Sg__pop(std::vector< Quackle::GamePosition > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< Quackle::GamePosition,std::allocator< Quackle::GamePosition > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_Quackle_GamePosition_Sg__append(std::vector< Quackle::GamePosition > *self,std::vector< Quackle::GamePosition >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< Quackle::GamePosition >::iterator std_vector_Sl_Quackle_GamePosition_Sg__erase__SWIG_0(std::vector< Quackle::GamePosition > *self,std::vector< Quackle::GamePosition >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< Quackle::GamePosition >::iterator std_vector_Sl_Quackle_GamePosition_Sg__erase__SWIG_1(std::vector< Quackle::GamePosition > *self,std::vector< Quackle::GamePosition >::iterator first,std::vector< Quackle::GamePosition >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< Quackle::GamePosition >::iterator std_vector_Sl_Quackle_GamePosition_Sg__insert__SWIG_0(std::vector< Quackle::GamePosition > *self,std::vector< Quackle::GamePosition >::iterator pos,std::vector< Quackle::GamePosition >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_Quackle_GamePosition_Sg__insert__SWIG_1(std::vector< Quackle::GamePosition > *self,std::vector< Quackle::GamePosition >::iterator pos,std::vector< Quackle::GamePosition >::size_type n,std::vector< Quackle::GamePosition >::value_type const &x){ self->insert(pos, n, x); }

  namespace swig {
    template <>  struct traits< Quackle::LetterParameter > {
      typedef pointer_category category;
      static const char* type_name() { return"Quackle::LetterParameter"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector< Quackle::LetterParameter, std::allocator< Quackle::LetterParameter > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "Quackle::LetterParameter" "," "std::allocator< Quackle::LetterParameter >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_Quackle_LetterParameter_Sg__iterator(std::vector< Quackle::LetterParameter > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_Quackle_LetterParameter_Sg____nonzero__(std::vector< Quackle::LetterParameter > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_Quackle_LetterParameter_Sg____bool__(std::vector< Quackle::LetterParameter > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< Quackle::LetterParameter >::size_type std_vector_Sl_Quackle_LetterParameter_Sg____len__(std::vector< Quackle::LetterParameter > const *self){
      return self->size();
    }
SWIGINTERN std::vector< Quackle::LetterParameter,std::allocator< Quackle::LetterParameter > > *std_vector_Sl_Quackle_LetterParameter_Sg____getslice__(std::vector< Quackle::LetterParameter > *self,std::vector< Quackle::LetterParameter >::difference_type i,std::vector< Quackle::LetterParameter >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_Quackle_LetterParameter_Sg____setslice____SWIG_0(std::vector< Quackle::LetterParameter > *self,std::vector< Quackle::LetterParameter >::difference_type i,std::vector< Quackle::LetterParameter >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< Quackle::LetterParameter,std::allocator< Quackle::LetterParameter > >());
    }
SWIGINTERN void std_vector_Sl_Quackle_LetterParameter_Sg____setslice____SWIG_1(std::vector< Quackle::LetterParameter > *self,std::vector< Quackle::LetterParameter >::difference_type i,std::vector< Quackle::LetterParameter >::difference_type j,std::vector< Quackle::LetterParameter,std::allocator< Quackle::LetterParameter > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_Quackle_LetterParameter_Sg____delslice__(std::vector< Quackle::LetterParameter > *self,std::vector< Quackle::LetterParameter >::difference_type i,std::vector< Quackle::LetterParameter >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_Quackle_LetterParameter_Sg____delitem____SWIG_0(std::vector< Quackle::LetterParameter > *self,std::vector< Quackle::LetterParameter >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< Quackle::LetterParameter,std::allocator< Quackle::LetterParameter > > *std_vector_Sl_Quackle_LetterParameter_Sg____getitem____SWIG_0(std::vector< Quackle::LetterParameter > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< Quackle::LetterParameter,std::allocator< Quackle::LetterParameter > >::difference_type id = i;
      std::vector< Quackle::LetterParameter,std::allocator< Quackle::LetterParameter > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_Quackle_LetterParameter_Sg____setitem____SWIG_0(std::vector< Quackle::LetterParameter > *self,PySliceObject *slice,std::vector< Quackle::LetterParameter,std::allocator< Quackle::LetterParameter > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< Quackle::LetterParameter,std::allocator< Quackle::LetterParameter > >::difference_type id = i;
      std::vector< Quackle::LetterParameter,std::allocator< Quackle::LetterParameter > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_Quackle_LetterParameter_Sg____setitem____SWIG_1(std::vector< Quackle::LetterParameter > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< Quackle::LetterParameter,std::allocator< Quackle::LetterParameter > >::difference_type id = i;
      std::vector< Quackle::LetterParameter,std::allocator< Quackle::LetterParameter > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_Quackle_LetterParameter_Sg____delitem____SWIG_1(std::vector< Quackle::LetterParameter > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< Quackle::LetterParameter,std::allocator< Quackle::LetterParameter > >::difference_type id = i;
      std::vector< Quackle::LetterParameter,std::allocator< Quackle::LetterParameter > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< Quackle::LetterParameter >::value_type const &std_vector_Sl_Quackle_LetterParameter_Sg____getitem____SWIG_1(std::vector< Quackle::LetterParameter > const *self,std::vector< Quackle::LetterParameter >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_Quackle_LetterParameter_Sg____setitem____SWIG_2(std::vector< Quackle::LetterParameter > *self,std::vector< Quackle::LetterParameter >::difference_type i,std::vector< Quackle::LetterParameter >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::vector< Quackle::LetterParameter >::value_type std_vector_Sl_Quackle_LetterParameter_Sg__pop(std::vector< Quackle::LetterParameter > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< Quackle::LetterParameter,std::allocator< Quackle::LetterParameter > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_Quackle_LetterParameter_Sg__append(std::vector< Quackle::LetterParameter > *self,std::vector< Quackle::LetterParameter >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< Quackle::LetterParameter >::iterator std_vector_Sl_Quackle_LetterParameter_Sg__erase__SWIG_0(std::vector< Quackle::LetterParameter > *self,std::vector< Quackle::LetterParameter >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< Quackle::LetterParameter >::iterator std_vector_Sl_Quackle_LetterParameter_Sg__erase__SWIG_1(std::vector< Quackle::LetterParameter > *self,std::vector< Quackle::LetterParameter >::iterator first,std::vector< Quackle::LetterParameter >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< Quackle::LetterParameter >::iterator std_vector_Sl_Quackle_LetterParameter_Sg__insert__SWIG_0(std::vector< Quackle::LetterParameter > *self,std::vector< Quackle::LetterParameter >::iterator pos,std::vector< Quackle::LetterParameter >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_Quackle_LetterParameter_Sg__insert__SWIG_1(std::vector< Quackle::LetterParameter > *self,std::vector< Quackle::LetterParameter >::iterator pos,std::vector< Quackle::LetterParameter >::size_type n,std::vector< Quackle::LetterParameter >::value_type const &x){ self->insert(pos, n, x); }

  namespace swig {
    template <>  struct traits< Quackle::FixedLengthString > {
      typedef pointer_category category;
      static const char* type_name() { return"Quackle::FixedLengthString"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector< Quackle::FixedLengthString, std::allocator< Quackle::FixedLengthString > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "Quackle::FixedLengthString" "," "std::allocator< Quackle::FixedLengthString >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_Quackle_LetterString_Sg__iterator(std::vector< Quackle::LetterString > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_Quackle_LetterString_Sg____nonzero__(std::vector< Quackle::LetterString > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_Quackle_LetterString_Sg____bool__(std::vector< Quackle::LetterString > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< Quackle::FixedLengthString >::size_type std_vector_Sl_Quackle_LetterString_Sg____len__(std::vector< Quackle::LetterString > const *self){
      return self->size();
    }
SWIGINTERN std::vector< Quackle::FixedLengthString,std::allocator< Quackle::FixedLengthString > > *std_vector_Sl_Quackle_LetterString_Sg____getslice__(std::vector< Quackle::LetterString > *self,std::vector< Quackle::FixedLengthString >::difference_type i,std::vector< Quackle::FixedLengthString >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_Quackle_LetterString_Sg____setslice____SWIG_0(std::vector< Quackle::LetterString > *self,std::vector< Quackle::FixedLengthString >::difference_type i,std::vector< Quackle::FixedLengthString >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< Quackle::FixedLengthString,std::allocator< Quackle::FixedLengthString > >());
    }
SWIGINTERN void std_vector_Sl_Quackle_LetterString_Sg____setslice____SWIG_1(std::vector< Quackle::LetterString > *self,std::vector< Quackle::FixedLengthString >::difference_type i,std::vector< Quackle::FixedLengthString >::difference_type j,std::vector< Quackle::FixedLengthString,std::allocator< Quackle::FixedLengthString > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_Quackle_LetterString_Sg____delslice__(std::vector< Quackle::LetterString > *self,std::vector< Quackle::FixedLengthString >::difference_type i,std::vector< Quackle::FixedLengthString >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_Quackle_LetterString_Sg____delitem____SWIG_0(std::vector< Quackle::LetterString > *self,std::vector< Quackle::FixedLengthString >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< Quackle::FixedLengthString,std::allocator< Quackle::FixedLengthString > > *std_vector_Sl_Quackle_LetterString_Sg____getitem____SWIG_0(std::vector< Quackle::LetterString > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< Quackle::FixedLengthString,std::allocator< Quackle::FixedLengthString > >::difference_type id = i;
      std::vector< Quackle::FixedLengthString,std::allocator< Quackle::FixedLengthString > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_Quackle_LetterString_Sg____setitem____SWIG_0(std::vector< Quackle::LetterString > *self,PySliceObject *slice,std::vector< Quackle::FixedLengthString,std::allocator< Quackle::FixedLengthString > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< Quackle::FixedLengthString,std::allocator< Quackle::FixedLengthString > >::difference_type id = i;
      std::vector< Quackle::FixedLengthString,std::allocator< Quackle::FixedLengthString > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_Quackle_LetterString_Sg____setitem____SWIG_1(std::vector< Quackle::LetterString > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< Quackle::FixedLengthString,std::allocator< Quackle::FixedLengthString > >::difference_type id = i;
      std::vector< Quackle::FixedLengthString,std::allocator< Quackle::FixedLengthString > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_Quackle_LetterString_Sg____delitem____SWIG_1(std::vector< Quackle::LetterString > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< Quackle::FixedLengthString,std::allocator< Quackle::FixedLengthString > >::difference_type id = i;
      std::vector< Quackle::FixedLengthString,std::allocator< Quackle::FixedLengthString > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< Quackle::FixedLengthString >::value_type const &std_vector_Sl_Quackle_LetterString_Sg____getitem____SWIG_1(std::vector< Quackle::LetterString > const *self,std::vector< Quackle::FixedLengthString >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_Quackle_LetterString_Sg____setitem____SWIG_2(std::vector< Quackle::LetterString > *self,std::vector< Quackle::FixedLengthString >::difference_type i,std::vector< Quackle::FixedLengthString >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::vector< Quackle::FixedLengthString >::value_type std_vector_Sl_Quackle_LetterString_Sg__pop(std::vector< Quackle::LetterString > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< Quackle::FixedLengthString,std::allocator< Quackle::FixedLengthString > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_Quackle_LetterString_Sg__append(std::vector< Quackle::LetterString > *self,std::vector< Quackle::FixedLengthString >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< Quackle::FixedLengthString >::iterator std_vector_Sl_Quackle_LetterString_Sg__erase__SWIG_0(std::vector< Quackle::LetterString > *self,std::vector< Quackle::FixedLengthString >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< Quackle::FixedLengthString >::iterator std_vector_Sl_Quackle_LetterString_Sg__erase__SWIG_1(std::vector< Quackle::LetterString > *self,std::vector< Quackle::FixedLengthString >::iterator first,std::vector< Quackle::FixedLengthString >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< Quackle::FixedLengthString >::iterator std_vector_Sl_Quackle_LetterString_Sg__insert__SWIG_0(std::vector< Quackle::LetterString > *self,std::vector< Quackle::FixedLengthString >::iterator pos,std::vector< Quackle::FixedLengthString >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_Quackle_LetterString_Sg__insert__SWIG_1(std::vector< Quackle::LetterString > *self,std::vector< Quackle::FixedLengthString >::iterator pos,std::vector< Quackle::FixedLengthString >::size_type n,std::vector< Quackle::FixedLengthString >::value_type const &x){ self->insert(pos, n, x); }

  #define SWIG_From_double   PyFloat_FromDouble 

#ifdef __cplusplus
extern "C" {
#endif
SWIGINTERN PyObject *_wrap_delete_SwigPyIterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SwigPyIterator" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_value(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_value" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)((swig::SwigPyIterator const *)arg1)->value();
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_incr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_incr" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  try {
    result = (swig::SwigPyIterator *)(arg1)->incr(arg2);
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_incr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (swig::SwigPyIterator *)(arg1)->incr();
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "SwigPyIterator_incr", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SwigPyIterator_incr__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwigPyIterator_incr__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'SwigPyIterator_incr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    swig::SwigPyIterator::incr(size_t)\n"
    "    swig::SwigPyIterator::incr()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_decr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_decr" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  try {
    result = (swig::SwigPyIterator *)(arg1)->decr(arg2);
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_decr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (swig::SwigPyIterator *)(arg1)->decr();
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "SwigPyIterator_decr", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SwigPyIterator_decr__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwigPyIterator_decr__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'SwigPyIterator_decr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    swig::SwigPyIterator::decr(size_t)\n"
    "    swig::SwigPyIterator::decr()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_distance(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  ptrdiff_t result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SwigPyIterator_distance", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_distance" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator_distance" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator_distance" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  try {
    result = ((swig::SwigPyIterator const *)arg1)->distance((swig::SwigPyIterator const &)*arg2);
  } catch(std::invalid_argument &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new std::invalid_argument(static_cast< const std::invalid_argument& >(_e))),SWIGTYPE_p_std__invalid_argument,SWIG_POINTER_OWN), "std::invalid_argument", SWIGTYPE_p_std__invalid_argument); SWIG_fail;
  }
  resultobj = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_equal(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SwigPyIterator_equal", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_equal" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator_equal" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator_equal" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  try {
    result = (bool)((swig::SwigPyIterator const *)arg1)->equal((swig::SwigPyIterator const &)*arg2);
  } catch(std::invalid_argument &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new std::invalid_argument(static_cast< const std::invalid_argument& >(_e))),SWIGTYPE_p_std__invalid_argument,SWIG_POINTER_OWN), "std::invalid_argument", SWIGTYPE_p_std__invalid_argument); SWIG_fail;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_copy(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_copy" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->copy();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_next(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_next" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->next();
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___next__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___next__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->__next__();
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_previous(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_previous" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->previous();
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_advance(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  swig::SwigPyIterator *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SwigPyIterator_advance", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_advance" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_advance" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *)(arg1)->advance(arg2);
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___eq__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SwigPyIterator___eq__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___eq__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___eq__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___eq__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  result = (bool)((swig::SwigPyIterator const *)arg1)->operator ==((swig::SwigPyIterator const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  if (PyErr_Occurred() && !PyErr_ExceptionMatches(PyExc_TypeError)) {
    return NULL;
  }
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___ne__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SwigPyIterator___ne__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___ne__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___ne__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___ne__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  result = (bool)((swig::SwigPyIterator const *)arg1)->operator !=((swig::SwigPyIterator const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  if (PyErr_Occurred() && !PyErr_ExceptionMatches(PyExc_TypeError)) {
    return NULL;
  }
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___iadd__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  swig::SwigPyIterator *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SwigPyIterator___iadd__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___iadd__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___iadd__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *) &(arg1)->operator +=(arg2);
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___isub__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  swig::SwigPyIterator *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SwigPyIterator___isub__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___isub__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___isub__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *) &(arg1)->operator -=(arg2);
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___add__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  swig::SwigPyIterator *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SwigPyIterator___add__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___add__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___add__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->operator +(arg2);
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  if (PyErr_Occurred() && !PyErr_ExceptionMatches(PyExc_TypeError)) {
    return NULL;
  }
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___sub__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->operator -(arg2);
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  if (PyErr_Occurred() && !PyErr_ExceptionMatches(PyExc_TypeError)) {
    return NULL;
  }
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  ptrdiff_t result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___sub__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  result = ((swig::SwigPyIterator const *)arg1)->operator -((swig::SwigPyIterator const &)*arg2);
  resultobj = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return resultobj;
fail:
  if (PyErr_Occurred() && !PyErr_ExceptionMatches(PyExc_TypeError)) {
    return NULL;
  }
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "SwigPyIterator___sub__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SwigPyIterator___sub____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwigPyIterator___sub____SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *SwigPyIterator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_swig__SwigPyIterator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_FixedLengthString__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  Quackle::FixedLengthString *result = 0 ;
  
  (void)self;
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (Quackle::FixedLengthString *)new Quackle::FixedLengthString();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__FixedLengthString, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FixedLengthString__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  Quackle::FixedLengthString::size_type arg2 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  Quackle::FixedLengthString *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_FixedLengthString" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_FixedLengthString" "', argument " "2"" of type '" "Quackle::FixedLengthString::size_type""'");
  } 
  arg2 = static_cast< Quackle::FixedLengthString::size_type >(val2);
  result = (Quackle::FixedLengthString *)new Quackle::FixedLengthString((char const *)arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__FixedLengthString, SWIG_POINTER_NEW |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FixedLengthString__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Quackle::FixedLengthString::size_type arg1 ;
  char arg2 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  Quackle::FixedLengthString *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_FixedLengthString" "', argument " "1"" of type '" "Quackle::FixedLengthString::size_type""'");
  } 
  arg1 = static_cast< Quackle::FixedLengthString::size_type >(val1);
  ecode2 = SWIG_AsVal_char(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_FixedLengthString" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  result = (Quackle::FixedLengthString *)new Quackle::FixedLengthString(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__FixedLengthString, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FixedLengthString__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  Quackle::FixedLengthString *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_FixedLengthString" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  result = (Quackle::FixedLengthString *)new Quackle::FixedLengthString((char const *)arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__FixedLengthString, SWIG_POINTER_NEW |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FixedLengthString__SWIG_4(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Quackle::FixedLengthString *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Quackle::FixedLengthString *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_Quackle__FixedLengthString,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_FixedLengthString" "', argument " "1"" of type '" "Quackle::FixedLengthString const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_FixedLengthString" "', argument " "1"" of type '" "Quackle::FixedLengthString const &""'"); 
  }
  arg1 = reinterpret_cast< Quackle::FixedLengthString * >(argp1);
  result = (Quackle::FixedLengthString *)new Quackle::FixedLengthString((Quackle::FixedLengthString const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__FixedLengthString, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FixedLengthString__SWIG_5(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Quackle::FixedLengthString *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::unique_ptr< Quackle::FixedLengthString > rvrdeleter1 ;
  Quackle::FixedLengthString *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_Quackle__FixedLengthString, SWIG_POINTER_RELEASE |  0 );
  if (!SWIG_IsOK(res1)) {
    if (res1 == SWIG_ERROR_RELEASE_NOT_OWNED) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_FixedLengthString" "', cannot release ownership as memory is not owned for argument " "1"" of type '" "Quackle::FixedLengthString &&""'");
    } else {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_FixedLengthString" "', argument " "1"" of type '" "Quackle::FixedLengthString &&""'"); 
    }
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_FixedLengthString" "', argument " "1"" of type '" "Quackle::FixedLengthString &&""'"); 
  }
  arg1 = reinterpret_cast< Quackle::FixedLengthString * >(argp1);
  rvrdeleter1.reset(arg1);
  result = (Quackle::FixedLengthString *)new Quackle::FixedLengthString((Quackle::FixedLengthString &&)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__FixedLengthString, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FixedLengthString(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_FixedLengthString", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_FixedLengthString__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Quackle__FixedLengthString, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_FixedLengthString__SWIG_4(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Quackle__FixedLengthString, SWIG_POINTER_NO_NULL);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_FixedLengthString__SWIG_5(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v = 0;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_FixedLengthString__SWIG_3(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_FixedLengthString__SWIG_2(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_FixedLengthString__SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_FixedLengthString'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Quackle::FixedLengthString::FixedLengthString()\n"
    "    Quackle::FixedLengthString::FixedLengthString(char const *,Quackle::FixedLengthString::size_type)\n"
    "    Quackle::FixedLengthString::FixedLengthString(Quackle::FixedLengthString::size_type,char)\n"
    "    Quackle::FixedLengthString::FixedLengthString(char const *)\n"
    "    Quackle::FixedLengthString::FixedLengthString(Quackle::FixedLengthString const &)\n"
    "    Quackle::FixedLengthString::FixedLengthString(Quackle::FixedLengthString &&)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_FixedLengthString_begin__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Quackle::FixedLengthString *arg1 = (Quackle::FixedLengthString *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Quackle::FixedLengthString::const_iterator result;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__FixedLengthString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FixedLengthString_begin" "', argument " "1"" of type '" "Quackle::FixedLengthString const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::FixedLengthString * >(argp1);
  result = (Quackle::FixedLengthString::const_iterator)((Quackle::FixedLengthString const *)arg1)->begin();
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FixedLengthString_end__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Quackle::FixedLengthString *arg1 = (Quackle::FixedLengthString *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Quackle::FixedLengthString::const_iterator result;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__FixedLengthString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FixedLengthString_end" "', argument " "1"" of type '" "Quackle::FixedLengthString const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::FixedLengthString * >(argp1);
  result = (Quackle::FixedLengthString::const_iterator)((Quackle::FixedLengthString const *)arg1)->end();
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FixedLengthString_begin__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Quackle::FixedLengthString *arg1 = (Quackle::FixedLengthString *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Quackle::FixedLengthString::iterator result;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__FixedLengthString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FixedLengthString_begin" "', argument " "1"" of type '" "Quackle::FixedLengthString *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::FixedLengthString * >(argp1);
  result = (Quackle::FixedLengthString::iterator)(arg1)->begin();
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FixedLengthString_begin(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "FixedLengthString_begin", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Quackle__FixedLengthString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_FixedLengthString_begin__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Quackle__FixedLengthString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_FixedLengthString_begin__SWIG_0(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'FixedLengthString_begin'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Quackle::FixedLengthString::begin() const\n"
    "    Quackle::FixedLengthString::begin()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_FixedLengthString_end__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Quackle::FixedLengthString *arg1 = (Quackle::FixedLengthString *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Quackle::FixedLengthString::iterator result;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__FixedLengthString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FixedLengthString_end" "', argument " "1"" of type '" "Quackle::FixedLengthString *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::FixedLengthString * >(argp1);
  result = (Quackle::FixedLengthString::iterator)(arg1)->end();
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FixedLengthString_end(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "FixedLengthString_end", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Quackle__FixedLengthString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_FixedLengthString_end__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Quackle__FixedLengthString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_FixedLengthString_end__SWIG_0(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'FixedLengthString_end'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Quackle::FixedLengthString::end() const\n"
    "    Quackle::FixedLengthString::end()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_FixedLengthString_erase(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::FixedLengthString *arg1 = (Quackle::FixedLengthString *) 0 ;
  Quackle::FixedLengthString::iterator arg2 = (Quackle::FixedLengthString::iterator) (Quackle::FixedLengthString::iterator)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "FixedLengthString_erase", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__FixedLengthString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FixedLengthString_erase" "', argument " "1"" of type '" "Quackle::FixedLengthString *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::FixedLengthString * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FixedLengthString_erase" "', argument " "2"" of type '" "Quackle::FixedLengthString::iterator const""'");
  }
  arg2 = reinterpret_cast< Quackle::FixedLengthString::iterator >(buf2);
  (arg1)->erase(arg2);
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FixedLengthString_length(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::FixedLengthString *arg1 = (Quackle::FixedLengthString *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Quackle::FixedLengthString::size_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__FixedLengthString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FixedLengthString_length" "', argument " "1"" of type '" "Quackle::FixedLengthString const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::FixedLengthString * >(argp1);
  result = (Quackle::FixedLengthString::size_type)((Quackle::FixedLengthString const *)arg1)->length();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FixedLengthString_substr(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::FixedLengthString *arg1 = (Quackle::FixedLengthString *) 0 ;
  Quackle::FixedLengthString::size_type arg2 ;
  Quackle::FixedLengthString::size_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  Quackle::FixedLengthString result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "FixedLengthString_substr", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__FixedLengthString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FixedLengthString_substr" "', argument " "1"" of type '" "Quackle::FixedLengthString const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::FixedLengthString * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FixedLengthString_substr" "', argument " "2"" of type '" "Quackle::FixedLengthString::size_type""'");
  } 
  arg2 = static_cast< Quackle::FixedLengthString::size_type >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FixedLengthString_substr" "', argument " "3"" of type '" "Quackle::FixedLengthString::size_type""'");
  } 
  arg3 = static_cast< Quackle::FixedLengthString::size_type >(val3);
  result = ((Quackle::FixedLengthString const *)arg1)->substr(arg2,arg3);
  resultobj = SWIG_NewPointerObj((new Quackle::FixedLengthString(result)), SWIGTYPE_p_Quackle__FixedLengthString, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FixedLengthString_empty(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::FixedLengthString *arg1 = (Quackle::FixedLengthString *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__FixedLengthString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FixedLengthString_empty" "', argument " "1"" of type '" "Quackle::FixedLengthString const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::FixedLengthString * >(argp1);
  result = (bool)((Quackle::FixedLengthString const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FixedLengthString_size(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::FixedLengthString *arg1 = (Quackle::FixedLengthString *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Quackle::FixedLengthString::size_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__FixedLengthString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FixedLengthString_size" "', argument " "1"" of type '" "Quackle::FixedLengthString const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::FixedLengthString * >(argp1);
  result = (Quackle::FixedLengthString::size_type)((Quackle::FixedLengthString const *)arg1)->size();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FixedLengthString_clear(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::FixedLengthString *arg1 = (Quackle::FixedLengthString *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__FixedLengthString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FixedLengthString_clear" "', argument " "1"" of type '" "Quackle::FixedLengthString *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::FixedLengthString * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FixedLengthString_push_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::FixedLengthString *arg1 = (Quackle::FixedLengthString *) 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "FixedLengthString_push_back", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__FixedLengthString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FixedLengthString_push_back" "', argument " "1"" of type '" "Quackle::FixedLengthString *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::FixedLengthString * >(argp1);
  ecode2 = SWIG_AsVal_char(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FixedLengthString_push_back" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  (arg1)->push_back(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FixedLengthString_pop_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::FixedLengthString *arg1 = (Quackle::FixedLengthString *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__FixedLengthString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FixedLengthString_pop_back" "', argument " "1"" of type '" "Quackle::FixedLengthString *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::FixedLengthString * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FixedLengthString_constData(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::FixedLengthString *arg1 = (Quackle::FixedLengthString *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__FixedLengthString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FixedLengthString_constData" "', argument " "1"" of type '" "Quackle::FixedLengthString const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::FixedLengthString * >(argp1);
  result = (char *)((Quackle::FixedLengthString const *)arg1)->constData();
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FixedLengthString_compare(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::FixedLengthString *arg1 = (Quackle::FixedLengthString *) 0 ;
  Quackle::FixedLengthString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "FixedLengthString_compare", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__FixedLengthString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FixedLengthString_compare" "', argument " "1"" of type '" "Quackle::FixedLengthString const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::FixedLengthString * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__FixedLengthString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FixedLengthString_compare" "', argument " "2"" of type '" "Quackle::FixedLengthString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FixedLengthString_compare" "', argument " "2"" of type '" "Quackle::FixedLengthString const &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::FixedLengthString * >(argp2);
  result = (int)((Quackle::FixedLengthString const *)arg1)->compare((Quackle::FixedLengthString const &)*arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FixedLengthString___iadd____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Quackle::FixedLengthString *arg1 = (Quackle::FixedLengthString *) 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  Quackle::FixedLengthString *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__FixedLengthString, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FixedLengthString___iadd__" "', argument " "1"" of type '" "Quackle::FixedLengthString *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::FixedLengthString * >(argp1);
  ecode2 = SWIG_AsVal_char(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FixedLengthString___iadd__" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  result = (Quackle::FixedLengthString *) &(arg1)->operator +=(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__FixedLengthString, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FixedLengthString___iadd____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Quackle::FixedLengthString *arg1 = (Quackle::FixedLengthString *) 0 ;
  Quackle::FixedLengthString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  Quackle::FixedLengthString *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__FixedLengthString, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FixedLengthString___iadd__" "', argument " "1"" of type '" "Quackle::FixedLengthString *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::FixedLengthString * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__FixedLengthString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FixedLengthString___iadd__" "', argument " "2"" of type '" "Quackle::FixedLengthString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FixedLengthString___iadd__" "', argument " "2"" of type '" "Quackle::FixedLengthString const &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::FixedLengthString * >(argp2);
  result = (Quackle::FixedLengthString *) &(arg1)->operator +=((Quackle::FixedLengthString const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__FixedLengthString, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FixedLengthString___iadd__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "FixedLengthString___iadd__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Quackle__FixedLengthString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Quackle__FixedLengthString, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_FixedLengthString___iadd____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Quackle__FixedLengthString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_FixedLengthString___iadd____SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'FixedLengthString___iadd__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Quackle::FixedLengthString::operator +=(char)\n"
    "    Quackle::FixedLengthString::operator +=(Quackle::FixedLengthString const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_FixedLengthString(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::FixedLengthString *arg1 = (Quackle::FixedLengthString *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__FixedLengthString, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_FixedLengthString" "', argument " "1"" of type '" "Quackle::FixedLengthString *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::FixedLengthString * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *FixedLengthString_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Quackle__FixedLengthString, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *FixedLengthString_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap___add____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Quackle::FixedLengthString *arg1 = 0 ;
  Quackle::FixedLengthString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  Quackle::FixedLengthString result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_Quackle__FixedLengthString,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__add__" "', argument " "1"" of type '" "Quackle::FixedLengthString const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__add__" "', argument " "1"" of type '" "Quackle::FixedLengthString const &""'"); 
  }
  arg1 = reinterpret_cast< Quackle::FixedLengthString * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__FixedLengthString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__add__" "', argument " "2"" of type '" "Quackle::FixedLengthString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__add__" "', argument " "2"" of type '" "Quackle::FixedLengthString const &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::FixedLengthString * >(argp2);
  result = Quackle::operator +((Quackle::FixedLengthString const &)*arg1,(Quackle::FixedLengthString const &)*arg2);
  resultobj = SWIG_NewPointerObj((new Quackle::FixedLengthString(result)), SWIGTYPE_p_Quackle__FixedLengthString, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  if (PyErr_Occurred() && !PyErr_ExceptionMatches(PyExc_TypeError)) {
    return NULL;
  }
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap___add____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  char arg1 ;
  Quackle::FixedLengthString *arg2 = 0 ;
  char val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  Quackle::FixedLengthString result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_char(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "__add__" "', argument " "1"" of type '" "char""'");
  } 
  arg1 = static_cast< char >(val1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__FixedLengthString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__add__" "', argument " "2"" of type '" "Quackle::FixedLengthString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__add__" "', argument " "2"" of type '" "Quackle::FixedLengthString const &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::FixedLengthString * >(argp2);
  result = Quackle::operator +(arg1,(Quackle::FixedLengthString const &)*arg2);
  resultobj = SWIG_NewPointerObj((new Quackle::FixedLengthString(result)), SWIGTYPE_p_Quackle__FixedLengthString, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  if (PyErr_Occurred() && !PyErr_ExceptionMatches(PyExc_TypeError)) {
    return NULL;
  }
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap___add____SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Quackle::FixedLengthString *arg1 = 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  Quackle::FixedLengthString result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_Quackle__FixedLengthString,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__add__" "', argument " "1"" of type '" "Quackle::FixedLengthString const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__add__" "', argument " "1"" of type '" "Quackle::FixedLengthString const &""'"); 
  }
  arg1 = reinterpret_cast< Quackle::FixedLengthString * >(argp1);
  ecode2 = SWIG_AsVal_char(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "__add__" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  result = Quackle::operator +((Quackle::FixedLengthString const &)*arg1,arg2);
  resultobj = SWIG_NewPointerObj((new Quackle::FixedLengthString(result)), SWIGTYPE_p_Quackle__FixedLengthString, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  if (PyErr_Occurred() && !PyErr_ExceptionMatches(PyExc_TypeError)) {
    return NULL;
  }
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap___add__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "__add__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Quackle__FixedLengthString, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Quackle__FixedLengthString, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___add____SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Quackle__FixedLengthString, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap___add____SWIG_2(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      int res = SWIG_AsVal_char(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Quackle__FixedLengthString, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___add____SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap___lt____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Quackle::FixedLengthString *arg1 = 0 ;
  Quackle::FixedLengthString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_Quackle__FixedLengthString,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__lt__" "', argument " "1"" of type '" "Quackle::FixedLengthString const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lt__" "', argument " "1"" of type '" "Quackle::FixedLengthString const &""'"); 
  }
  arg1 = reinterpret_cast< Quackle::FixedLengthString * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__FixedLengthString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__lt__" "', argument " "2"" of type '" "Quackle::FixedLengthString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lt__" "', argument " "2"" of type '" "Quackle::FixedLengthString const &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::FixedLengthString * >(argp2);
  result = (bool)Quackle::operator <((Quackle::FixedLengthString const &)*arg1,(Quackle::FixedLengthString const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  if (PyErr_Occurred() && !PyErr_ExceptionMatches(PyExc_TypeError)) {
    return NULL;
  }
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_left(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::LetterString *arg1 = 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  Quackle::LetterString result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "left", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_Quackle__FixedLengthString,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "left" "', argument " "1"" of type '" "Quackle::LetterString const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "left" "', argument " "1"" of type '" "Quackle::LetterString const &""'"); 
  }
  arg1 = reinterpret_cast< Quackle::LetterString * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "left" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = Quackle::String::left((Quackle::FixedLengthString const &)*arg1,arg2);
  resultobj = SWIG_NewPointerObj((new Quackle::LetterString(result)), SWIGTYPE_p_Quackle__FixedLengthString, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_alphabetize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::LetterString *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Quackle::LetterString result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_Quackle__FixedLengthString,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "alphabetize" "', argument " "1"" of type '" "Quackle::LetterString const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "alphabetize" "', argument " "1"" of type '" "Quackle::LetterString const &""'"); 
  }
  arg1 = reinterpret_cast< Quackle::LetterString * >(argp1);
  result = Quackle::String::alphabetize((Quackle::FixedLengthString const &)*arg1);
  resultobj = SWIG_NewPointerObj((new Quackle::LetterString(result)), SWIGTYPE_p_Quackle__FixedLengthString, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_clearBlankness(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::LetterString *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Quackle::LetterString result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_Quackle__FixedLengthString,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "clearBlankness" "', argument " "1"" of type '" "Quackle::LetterString const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "clearBlankness" "', argument " "1"" of type '" "Quackle::LetterString const &""'"); 
  }
  arg1 = reinterpret_cast< Quackle::LetterString * >(argp1);
  result = Quackle::String::clearBlankness((Quackle::FixedLengthString const &)*arg1);
  resultobj = SWIG_NewPointerObj((new Quackle::LetterString(result)), SWIGTYPE_p_Quackle__FixedLengthString, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_setBlankness(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::LetterString *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Quackle::LetterString result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_Quackle__FixedLengthString,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "setBlankness" "', argument " "1"" of type '" "Quackle::LetterString const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "setBlankness" "', argument " "1"" of type '" "Quackle::LetterString const &""'"); 
  }
  arg1 = reinterpret_cast< Quackle::LetterString * >(argp1);
  result = Quackle::String::setBlankness((Quackle::FixedLengthString const &)*arg1);
  resultobj = SWIG_NewPointerObj((new Quackle::LetterString(result)), SWIGTYPE_p_Quackle__FixedLengthString, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_usedTiles(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::LetterString *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Quackle::LetterString result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_Quackle__FixedLengthString,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "usedTiles" "', argument " "1"" of type '" "Quackle::LetterString const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "usedTiles" "', argument " "1"" of type '" "Quackle::LetterString const &""'"); 
  }
  arg1 = reinterpret_cast< Quackle::LetterString * >(argp1);
  result = Quackle::String::usedTiles((Quackle::FixedLengthString const &)*arg1);
  resultobj = SWIG_NewPointerObj((new Quackle::LetterString(result)), SWIGTYPE_p_Quackle__FixedLengthString, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_counts__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Quackle::LetterString *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_Quackle__FixedLengthString,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "counts" "', argument " "1"" of type '" "Quackle::LetterString const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "counts" "', argument " "1"" of type '" "Quackle::LetterString const &""'"); 
  }
  arg1 = reinterpret_cast< Quackle::LetterString * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "counts" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  Quackle::String::counts((Quackle::FixedLengthString const &)*arg1,arg2);
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_counts__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Quackle::LongLetterString *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "counts" "', argument " "1"" of type '" "Quackle::LongLetterString const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "counts" "', argument " "1"" of type '" "Quackle::LongLetterString const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "counts" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  Quackle::String::counts((std::string const &)*arg1,arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_counts(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "counts", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Quackle__FixedLengthString, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_counts__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_counts__SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'counts'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Quackle::String::counts(Quackle::LetterString const &,char *)\n"
    "    Quackle::String::counts(Quackle::LongLetterString const &,char *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::LetterString *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Quackle::Letter result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_Quackle__FixedLengthString,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "back" "', argument " "1"" of type '" "Quackle::LetterString const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "back" "', argument " "1"" of type '" "Quackle::LetterString const &""'"); 
  }
  arg1 = reinterpret_cast< Quackle::LetterString * >(argp1);
  result = (Quackle::Letter)Quackle::String::back((Quackle::FixedLengthString const &)*arg1);
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pop_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::LetterString *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_Quackle__FixedLengthString,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pop_back" "', argument " "1"" of type '" "Quackle::LetterString &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "pop_back" "', argument " "1"" of type '" "Quackle::LetterString &""'"); 
  }
  arg1 = reinterpret_cast< Quackle::LetterString * >(argp1);
  Quackle::String::pop_back(*arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_front(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::LetterString *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Quackle::Letter result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_Quackle__FixedLengthString,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "front" "', argument " "1"" of type '" "Quackle::LetterString const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "front" "', argument " "1"" of type '" "Quackle::LetterString const &""'"); 
  }
  arg1 = reinterpret_cast< Quackle::LetterString * >(argp1);
  result = (Quackle::Letter)Quackle::String::front((Quackle::FixedLengthString const &)*arg1);
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pop_front(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::LetterString *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_Quackle__FixedLengthString,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pop_front" "', argument " "1"" of type '" "Quackle::LetterString &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "pop_front" "', argument " "1"" of type '" "Quackle::LetterString &""'"); 
  }
  arg1 = reinterpret_cast< Quackle::LetterString * >(argp1);
  Quackle::String::pop_front(*arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_allButFront(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::LetterString *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Quackle::LetterString result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_Quackle__FixedLengthString,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "allButFront" "', argument " "1"" of type '" "Quackle::LetterString const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "allButFront" "', argument " "1"" of type '" "Quackle::LetterString const &""'"); 
  }
  arg1 = reinterpret_cast< Quackle::LetterString * >(argp1);
  result = Quackle::String::allButFront((Quackle::FixedLengthString const &)*arg1);
  resultobj = SWIG_NewPointerObj((new Quackle::LetterString(result)), SWIGTYPE_p_Quackle__FixedLengthString, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LetterParameter__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  Quackle::LetterParameter *result = 0 ;
  
  (void)self;
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (Quackle::LetterParameter *)new Quackle::LetterParameter();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__LetterParameter, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LetterParameter__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Quackle::Letter arg1 ;
  unsigned char val1 ;
  int ecode1 = 0 ;
  Quackle::LetterParameter *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_char(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_LetterParameter" "', argument " "1"" of type '" "Quackle::Letter""'");
  } 
  arg1 = static_cast< Quackle::Letter >(val1);
  result = (Quackle::LetterParameter *)new Quackle::LetterParameter(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__LetterParameter, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LetterParameter__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Quackle::Letter arg1 ;
  UVString *arg2 = 0 ;
  UVString *arg3 = 0 ;
  int arg4 ;
  int arg5 ;
  bool arg6 ;
  unsigned char val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  bool val6 ;
  int ecode6 = 0 ;
  Quackle::LetterParameter *result = 0 ;
  
  (void)self;
  if ((nobjs < 6) || (nobjs > 6)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_char(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_LetterParameter" "', argument " "1"" of type '" "Quackle::Letter""'");
  } 
  arg1 = static_cast< Quackle::Letter >(val1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_LetterParameter" "', argument " "2"" of type '" "UVString const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LetterParameter" "', argument " "2"" of type '" "UVString const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_LetterParameter" "', argument " "3"" of type '" "UVString const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LetterParameter" "', argument " "3"" of type '" "UVString const &""'"); 
    }
    arg3 = ptr;
  }
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_LetterParameter" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_LetterParameter" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_bool(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_LetterParameter" "', argument " "6"" of type '" "bool""'");
  } 
  arg6 = static_cast< bool >(val6);
  result = (Quackle::LetterParameter *)new Quackle::LetterParameter(arg1,(UVString const &)*arg2,(UVString const &)*arg3,arg4,arg5,arg6);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__LetterParameter, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LetterParameter__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Quackle::Letter arg1 ;
  UVString *arg2 = 0 ;
  UVString *arg3 = 0 ;
  int arg4 ;
  int arg5 ;
  unsigned char val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  Quackle::LetterParameter *result = 0 ;
  
  (void)self;
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_char(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_LetterParameter" "', argument " "1"" of type '" "Quackle::Letter""'");
  } 
  arg1 = static_cast< Quackle::Letter >(val1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_LetterParameter" "', argument " "2"" of type '" "UVString const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LetterParameter" "', argument " "2"" of type '" "UVString const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_LetterParameter" "', argument " "3"" of type '" "UVString const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LetterParameter" "', argument " "3"" of type '" "UVString const &""'"); 
    }
    arg3 = ptr;
  }
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_LetterParameter" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_LetterParameter" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  result = (Quackle::LetterParameter *)new Quackle::LetterParameter(arg1,(UVString const &)*arg2,(UVString const &)*arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__LetterParameter, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LetterParameter__SWIG_4(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Quackle::Letter arg1 ;
  UVString *arg2 = 0 ;
  UVString *arg3 = 0 ;
  int arg4 ;
  unsigned char val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  int val4 ;
  int ecode4 = 0 ;
  Quackle::LetterParameter *result = 0 ;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_char(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_LetterParameter" "', argument " "1"" of type '" "Quackle::Letter""'");
  } 
  arg1 = static_cast< Quackle::Letter >(val1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_LetterParameter" "', argument " "2"" of type '" "UVString const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LetterParameter" "', argument " "2"" of type '" "UVString const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_LetterParameter" "', argument " "3"" of type '" "UVString const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LetterParameter" "', argument " "3"" of type '" "UVString const &""'"); 
    }
    arg3 = ptr;
  }
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_LetterParameter" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  result = (Quackle::LetterParameter *)new Quackle::LetterParameter(arg1,(UVString const &)*arg2,(UVString const &)*arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__LetterParameter, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LetterParameter__SWIG_5(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Quackle::Letter arg1 ;
  UVString *arg2 = 0 ;
  UVString *arg3 = 0 ;
  unsigned char val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  Quackle::LetterParameter *result = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_char(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_LetterParameter" "', argument " "1"" of type '" "Quackle::Letter""'");
  } 
  arg1 = static_cast< Quackle::Letter >(val1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_LetterParameter" "', argument " "2"" of type '" "UVString const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LetterParameter" "', argument " "2"" of type '" "UVString const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_LetterParameter" "', argument " "3"" of type '" "UVString const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LetterParameter" "', argument " "3"" of type '" "UVString const &""'"); 
    }
    arg3 = ptr;
  }
  result = (Quackle::LetterParameter *)new Quackle::LetterParameter(arg1,(UVString const &)*arg2,(UVString const &)*arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__LetterParameter, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LetterParameter(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[7] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_LetterParameter", 0, 6, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_LetterParameter__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_AsVal_unsigned_SS_char(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_LetterParameter__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      int res = SWIG_AsVal_unsigned_SS_char(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_LetterParameter__SWIG_5(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      int res = SWIG_AsVal_unsigned_SS_char(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_LetterParameter__SWIG_4(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      int res = SWIG_AsVal_unsigned_SS_char(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_LetterParameter__SWIG_3(self, argc, argv);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    {
      int res = SWIG_AsVal_unsigned_SS_char(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_bool(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_new_LetterParameter__SWIG_2(self, argc, argv);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_LetterParameter'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Quackle::LetterParameter::LetterParameter()\n"
    "    Quackle::LetterParameter::LetterParameter(Quackle::Letter)\n"
    "    Quackle::LetterParameter::LetterParameter(Quackle::Letter,UVString const &,UVString const &,int,int,bool)\n"
    "    Quackle::LetterParameter::LetterParameter(Quackle::Letter,UVString const &,UVString const &,int,int)\n"
    "    Quackle::LetterParameter::LetterParameter(Quackle::Letter,UVString const &,UVString const &,int)\n"
    "    Quackle::LetterParameter::LetterParameter(Quackle::Letter,UVString const &,UVString const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LetterParameter_text(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::LetterParameter *arg1 = (Quackle::LetterParameter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  UVString result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__LetterParameter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LetterParameter_text" "', argument " "1"" of type '" "Quackle::LetterParameter const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::LetterParameter * >(argp1);
  result = ((Quackle::LetterParameter const *)arg1)->text();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LetterParameter_setText(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::LetterParameter *arg1 = (Quackle::LetterParameter *) 0 ;
  UVString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LetterParameter_setText", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__LetterParameter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LetterParameter_setText" "', argument " "1"" of type '" "Quackle::LetterParameter *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::LetterParameter * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LetterParameter_setText" "', argument " "2"" of type '" "UVString const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LetterParameter_setText" "', argument " "2"" of type '" "UVString const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->setText((UVString const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LetterParameter_blankText(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::LetterParameter *arg1 = (Quackle::LetterParameter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  UVString result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__LetterParameter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LetterParameter_blankText" "', argument " "1"" of type '" "Quackle::LetterParameter const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::LetterParameter * >(argp1);
  result = ((Quackle::LetterParameter const *)arg1)->blankText();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LetterParameter_setBlankText(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::LetterParameter *arg1 = (Quackle::LetterParameter *) 0 ;
  UVString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LetterParameter_setBlankText", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__LetterParameter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LetterParameter_setBlankText" "', argument " "1"" of type '" "Quackle::LetterParameter *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::LetterParameter * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LetterParameter_setBlankText" "', argument " "2"" of type '" "UVString const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LetterParameter_setBlankText" "', argument " "2"" of type '" "UVString const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->setBlankText((UVString const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LetterParameter_letter(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::LetterParameter *arg1 = (Quackle::LetterParameter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Quackle::Letter result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__LetterParameter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LetterParameter_letter" "', argument " "1"" of type '" "Quackle::LetterParameter const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::LetterParameter * >(argp1);
  result = (Quackle::Letter)((Quackle::LetterParameter const *)arg1)->letter();
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LetterParameter_setLetter(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::LetterParameter *arg1 = (Quackle::LetterParameter *) 0 ;
  Quackle::Letter arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LetterParameter_setLetter", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__LetterParameter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LetterParameter_setLetter" "', argument " "1"" of type '" "Quackle::LetterParameter *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::LetterParameter * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LetterParameter_setLetter" "', argument " "2"" of type '" "Quackle::Letter""'");
  } 
  arg2 = static_cast< Quackle::Letter >(val2);
  (arg1)->setLetter(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LetterParameter_score(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::LetterParameter *arg1 = (Quackle::LetterParameter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__LetterParameter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LetterParameter_score" "', argument " "1"" of type '" "Quackle::LetterParameter const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::LetterParameter * >(argp1);
  result = (int)((Quackle::LetterParameter const *)arg1)->score();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LetterParameter_setScore(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::LetterParameter *arg1 = (Quackle::LetterParameter *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LetterParameter_setScore", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__LetterParameter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LetterParameter_setScore" "', argument " "1"" of type '" "Quackle::LetterParameter *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::LetterParameter * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LetterParameter_setScore" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->setScore(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LetterParameter_count(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::LetterParameter *arg1 = (Quackle::LetterParameter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__LetterParameter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LetterParameter_count" "', argument " "1"" of type '" "Quackle::LetterParameter const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::LetterParameter * >(argp1);
  result = (int)((Quackle::LetterParameter const *)arg1)->count();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LetterParameter_setCount(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::LetterParameter *arg1 = (Quackle::LetterParameter *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LetterParameter_setCount", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__LetterParameter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LetterParameter_setCount" "', argument " "1"" of type '" "Quackle::LetterParameter *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::LetterParameter * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LetterParameter_setCount" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->setCount(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LetterParameter_isVowel(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::LetterParameter *arg1 = (Quackle::LetterParameter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__LetterParameter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LetterParameter_isVowel" "', argument " "1"" of type '" "Quackle::LetterParameter const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::LetterParameter * >(argp1);
  result = (bool)((Quackle::LetterParameter const *)arg1)->isVowel();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LetterParameter_setVowel(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::LetterParameter *arg1 = (Quackle::LetterParameter *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LetterParameter_setVowel", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__LetterParameter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LetterParameter_setVowel" "', argument " "1"" of type '" "Quackle::LetterParameter *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::LetterParameter * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LetterParameter_setVowel" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->setVowel(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_LetterParameter(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::LetterParameter *arg1 = (Quackle::LetterParameter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__LetterParameter, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LetterParameter" "', argument " "1"" of type '" "Quackle::LetterParameter *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::LetterParameter * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *LetterParameter_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Quackle__LetterParameter, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *LetterParameter_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_AlphabetParameters(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::AlphabetParameters *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "new_AlphabetParameters", 0, 0, 0)) SWIG_fail;
  result = (Quackle::AlphabetParameters *)new Quackle::AlphabetParameters();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__AlphabetParameters, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AlphabetParameters_length(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::AlphabetParameters *arg1 = (Quackle::AlphabetParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__AlphabetParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AlphabetParameters_length" "', argument " "1"" of type '" "Quackle::AlphabetParameters const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::AlphabetParameters * >(argp1);
  result = (int)((Quackle::AlphabetParameters const *)arg1)->length();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AlphabetParameters_firstLetter(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::AlphabetParameters *arg1 = (Quackle::AlphabetParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Quackle::Letter result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__AlphabetParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AlphabetParameters_firstLetter" "', argument " "1"" of type '" "Quackle::AlphabetParameters const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::AlphabetParameters * >(argp1);
  result = (Quackle::Letter)((Quackle::AlphabetParameters const *)arg1)->firstLetter();
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AlphabetParameters_lastLetter(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::AlphabetParameters *arg1 = (Quackle::AlphabetParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Quackle::Letter result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__AlphabetParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AlphabetParameters_lastLetter" "', argument " "1"" of type '" "Quackle::AlphabetParameters const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::AlphabetParameters * >(argp1);
  result = (Quackle::Letter)((Quackle::AlphabetParameters const *)arg1)->lastLetter();
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AlphabetParameters_setAlphabet(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::AlphabetParameters *arg1 = (Quackle::AlphabetParameters *) 0 ;
  Quackle::Alphabet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "AlphabetParameters_setAlphabet", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__AlphabetParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AlphabetParameters_setAlphabet" "', argument " "1"" of type '" "Quackle::AlphabetParameters *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::AlphabetParameters * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_Quackle__LetterParameter_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AlphabetParameters_setAlphabet" "', argument " "2"" of type '" "Quackle::Alphabet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AlphabetParameters_setAlphabet" "', argument " "2"" of type '" "Quackle::Alphabet const &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::Alphabet * >(argp2);
  (arg1)->setAlphabet((Quackle::Alphabet const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AlphabetParameters_letterParameter(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::AlphabetParameters *arg1 = (Quackle::AlphabetParameters *) 0 ;
  Quackle::Letter arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  Quackle::LetterParameter *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "AlphabetParameters_letterParameter", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__AlphabetParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AlphabetParameters_letterParameter" "', argument " "1"" of type '" "Quackle::AlphabetParameters const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::AlphabetParameters * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AlphabetParameters_letterParameter" "', argument " "2"" of type '" "Quackle::Letter""'");
  } 
  arg2 = static_cast< Quackle::Letter >(val2);
  result = (Quackle::LetterParameter *) &((Quackle::AlphabetParameters const *)arg1)->letterParameter(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__LetterParameter, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AlphabetParameters_setLetterParameter(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::AlphabetParameters *arg1 = (Quackle::AlphabetParameters *) 0 ;
  Quackle::Letter arg2 ;
  Quackle::LetterParameter *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "AlphabetParameters_setLetterParameter", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__AlphabetParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AlphabetParameters_setLetterParameter" "', argument " "1"" of type '" "Quackle::AlphabetParameters *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::AlphabetParameters * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AlphabetParameters_setLetterParameter" "', argument " "2"" of type '" "Quackle::Letter""'");
  } 
  arg2 = static_cast< Quackle::Letter >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_Quackle__LetterParameter,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "AlphabetParameters_setLetterParameter" "', argument " "3"" of type '" "Quackle::LetterParameter const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AlphabetParameters_setLetterParameter" "', argument " "3"" of type '" "Quackle::LetterParameter const &""'"); 
  }
  arg3 = reinterpret_cast< Quackle::LetterParameter * >(argp3);
  (arg1)->setLetterParameter(arg2,(Quackle::LetterParameter const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AlphabetParameters_emptyAlphabet(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Alphabet result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "AlphabetParameters_emptyAlphabet", 0, 0, 0)) SWIG_fail;
  result = Quackle::AlphabetParameters::emptyAlphabet();
  resultobj = SWIG_NewPointerObj((new Quackle::Alphabet(result)), SWIGTYPE_p_std__vectorT_Quackle__LetterParameter_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AlphabetParameters_setCount(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::AlphabetParameters *arg1 = (Quackle::AlphabetParameters *) 0 ;
  Quackle::Letter arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "AlphabetParameters_setCount", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__AlphabetParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AlphabetParameters_setCount" "', argument " "1"" of type '" "Quackle::AlphabetParameters *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::AlphabetParameters * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AlphabetParameters_setCount" "', argument " "2"" of type '" "Quackle::Letter""'");
  } 
  arg2 = static_cast< Quackle::Letter >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AlphabetParameters_setCount" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  (arg1)->setCount(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AlphabetParameters_setScore(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::AlphabetParameters *arg1 = (Quackle::AlphabetParameters *) 0 ;
  Quackle::Letter arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "AlphabetParameters_setScore", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__AlphabetParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AlphabetParameters_setScore" "', argument " "1"" of type '" "Quackle::AlphabetParameters *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::AlphabetParameters * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AlphabetParameters_setScore" "', argument " "2"" of type '" "Quackle::Letter""'");
  } 
  arg2 = static_cast< Quackle::Letter >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AlphabetParameters_setScore" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  (arg1)->setScore(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AlphabetParameters_isBlankLetter(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::AlphabetParameters *arg1 = (Quackle::AlphabetParameters *) 0 ;
  Quackle::Letter arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "AlphabetParameters_isBlankLetter", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__AlphabetParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AlphabetParameters_isBlankLetter" "', argument " "1"" of type '" "Quackle::AlphabetParameters const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::AlphabetParameters * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AlphabetParameters_isBlankLetter" "', argument " "2"" of type '" "Quackle::Letter""'");
  } 
  arg2 = static_cast< Quackle::Letter >(val2);
  result = (bool)((Quackle::AlphabetParameters const *)arg1)->isBlankLetter(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AlphabetParameters_clearBlankness__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Quackle::AlphabetParameters *arg1 = (Quackle::AlphabetParameters *) 0 ;
  Quackle::Letter arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  Quackle::Letter result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__AlphabetParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AlphabetParameters_clearBlankness" "', argument " "1"" of type '" "Quackle::AlphabetParameters const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::AlphabetParameters * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AlphabetParameters_clearBlankness" "', argument " "2"" of type '" "Quackle::Letter""'");
  } 
  arg2 = static_cast< Quackle::Letter >(val2);
  result = (Quackle::Letter)((Quackle::AlphabetParameters const *)arg1)->clearBlankness(arg2);
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AlphabetParameters_clearBlankness__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Quackle::AlphabetParameters *arg1 = (Quackle::AlphabetParameters *) 0 ;
  Quackle::LetterString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  Quackle::LetterString result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__AlphabetParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AlphabetParameters_clearBlankness" "', argument " "1"" of type '" "Quackle::AlphabetParameters const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::AlphabetParameters * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__FixedLengthString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AlphabetParameters_clearBlankness" "', argument " "2"" of type '" "Quackle::LetterString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AlphabetParameters_clearBlankness" "', argument " "2"" of type '" "Quackle::LetterString const &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::LetterString * >(argp2);
  result = ((Quackle::AlphabetParameters const *)arg1)->clearBlankness((Quackle::LetterString const &)*arg2);
  resultobj = SWIG_NewPointerObj((new Quackle::LetterString(result)), SWIGTYPE_p_Quackle__FixedLengthString, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AlphabetParameters_clearBlankness(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "AlphabetParameters_clearBlankness", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Quackle__AlphabetParameters, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Quackle__FixedLengthString, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_AlphabetParameters_clearBlankness__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Quackle__AlphabetParameters, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_AlphabetParameters_clearBlankness__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'AlphabetParameters_clearBlankness'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Quackle::AlphabetParameters::clearBlankness(Quackle::Letter) const\n"
    "    Quackle::AlphabetParameters::clearBlankness(Quackle::LetterString const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_AlphabetParameters_setBlankness(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::AlphabetParameters *arg1 = (Quackle::AlphabetParameters *) 0 ;
  Quackle::Letter arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  Quackle::Letter result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "AlphabetParameters_setBlankness", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__AlphabetParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AlphabetParameters_setBlankness" "', argument " "1"" of type '" "Quackle::AlphabetParameters const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::AlphabetParameters * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AlphabetParameters_setBlankness" "', argument " "2"" of type '" "Quackle::Letter""'");
  } 
  arg2 = static_cast< Quackle::Letter >(val2);
  result = (Quackle::Letter)((Quackle::AlphabetParameters const *)arg1)->setBlankness(arg2);
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AlphabetParameters_isPlainLetter(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::AlphabetParameters *arg1 = (Quackle::AlphabetParameters *) 0 ;
  Quackle::Letter arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "AlphabetParameters_isPlainLetter", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__AlphabetParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AlphabetParameters_isPlainLetter" "', argument " "1"" of type '" "Quackle::AlphabetParameters const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::AlphabetParameters * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AlphabetParameters_isPlainLetter" "', argument " "2"" of type '" "Quackle::Letter""'");
  } 
  arg2 = static_cast< Quackle::Letter >(val2);
  result = (bool)((Quackle::AlphabetParameters const *)arg1)->isPlainLetter(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AlphabetParameters_isSomeLetter(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::AlphabetParameters *arg1 = (Quackle::AlphabetParameters *) 0 ;
  Quackle::Letter arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "AlphabetParameters_isSomeLetter", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__AlphabetParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AlphabetParameters_isSomeLetter" "', argument " "1"" of type '" "Quackle::AlphabetParameters const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::AlphabetParameters * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AlphabetParameters_isSomeLetter" "', argument " "2"" of type '" "Quackle::Letter""'");
  } 
  arg2 = static_cast< Quackle::Letter >(val2);
  result = (bool)((Quackle::AlphabetParameters const *)arg1)->isSomeLetter(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AlphabetParameters_count(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::AlphabetParameters *arg1 = (Quackle::AlphabetParameters *) 0 ;
  Quackle::Letter arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "AlphabetParameters_count", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__AlphabetParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AlphabetParameters_count" "', argument " "1"" of type '" "Quackle::AlphabetParameters const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::AlphabetParameters * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AlphabetParameters_count" "', argument " "2"" of type '" "Quackle::Letter""'");
  } 
  arg2 = static_cast< Quackle::Letter >(val2);
  result = (int)((Quackle::AlphabetParameters const *)arg1)->count(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AlphabetParameters_score(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::AlphabetParameters *arg1 = (Quackle::AlphabetParameters *) 0 ;
  Quackle::Letter arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "AlphabetParameters_score", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__AlphabetParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AlphabetParameters_score" "', argument " "1"" of type '" "Quackle::AlphabetParameters const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::AlphabetParameters * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AlphabetParameters_score" "', argument " "2"" of type '" "Quackle::Letter""'");
  } 
  arg2 = static_cast< Quackle::Letter >(val2);
  result = (int)((Quackle::AlphabetParameters const *)arg1)->score(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AlphabetParameters_isVowel(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::AlphabetParameters *arg1 = (Quackle::AlphabetParameters *) 0 ;
  Quackle::Letter arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "AlphabetParameters_isVowel", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__AlphabetParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AlphabetParameters_isVowel" "', argument " "1"" of type '" "Quackle::AlphabetParameters const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::AlphabetParameters * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AlphabetParameters_isVowel" "', argument " "2"" of type '" "Quackle::Letter""'");
  } 
  arg2 = static_cast< Quackle::Letter >(val2);
  result = (bool)((Quackle::AlphabetParameters const *)arg1)->isVowel(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AlphabetParameters_userVisible__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Quackle::AlphabetParameters *arg1 = (Quackle::AlphabetParameters *) 0 ;
  Quackle::LetterString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  UVString result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__AlphabetParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AlphabetParameters_userVisible" "', argument " "1"" of type '" "Quackle::AlphabetParameters const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::AlphabetParameters * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__FixedLengthString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AlphabetParameters_userVisible" "', argument " "2"" of type '" "Quackle::LetterString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AlphabetParameters_userVisible" "', argument " "2"" of type '" "Quackle::LetterString const &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::LetterString * >(argp2);
  result = ((Quackle::AlphabetParameters const *)arg1)->userVisible((Quackle::LetterString const &)*arg2);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AlphabetParameters_userVisible__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Quackle::AlphabetParameters *arg1 = (Quackle::AlphabetParameters *) 0 ;
  Quackle::Letter arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  UVString result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__AlphabetParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AlphabetParameters_userVisible" "', argument " "1"" of type '" "Quackle::AlphabetParameters const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::AlphabetParameters * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AlphabetParameters_userVisible" "', argument " "2"" of type '" "Quackle::Letter""'");
  } 
  arg2 = static_cast< Quackle::Letter >(val2);
  result = ((Quackle::AlphabetParameters const *)arg1)->userVisible(arg2);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AlphabetParameters_userVisible(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "AlphabetParameters_userVisible", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Quackle__AlphabetParameters, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Quackle__FixedLengthString, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_AlphabetParameters_userVisible__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Quackle__AlphabetParameters, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_AlphabetParameters_userVisible__SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'AlphabetParameters_userVisible'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Quackle::AlphabetParameters::userVisible(Quackle::LetterString const &) const\n"
    "    Quackle::AlphabetParameters::userVisible(Quackle::Letter) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_AlphabetParameters_encode__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Quackle::AlphabetParameters *arg1 = (Quackle::AlphabetParameters *) 0 ;
  UVString *arg2 = 0 ;
  UVString *arg3 = (UVString *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  Quackle::LetterString result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__AlphabetParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AlphabetParameters_encode" "', argument " "1"" of type '" "Quackle::AlphabetParameters const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::AlphabetParameters * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AlphabetParameters_encode" "', argument " "2"" of type '" "UVString const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AlphabetParameters_encode" "', argument " "2"" of type '" "UVString const &""'"); 
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_std__string, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "AlphabetParameters_encode" "', argument " "3"" of type '" "UVString *""'"); 
  }
  arg3 = reinterpret_cast< UVString * >(argp3);
  result = ((Quackle::AlphabetParameters const *)arg1)->encode((UVString const &)*arg2,arg3);
  resultobj = SWIG_NewPointerObj((new Quackle::LetterString(result)), SWIGTYPE_p_Quackle__FixedLengthString, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_AlphabetParameters_encode__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Quackle::AlphabetParameters *arg1 = (Quackle::AlphabetParameters *) 0 ;
  UVString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  Quackle::LetterString result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__AlphabetParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AlphabetParameters_encode" "', argument " "1"" of type '" "Quackle::AlphabetParameters const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::AlphabetParameters * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AlphabetParameters_encode" "', argument " "2"" of type '" "UVString const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AlphabetParameters_encode" "', argument " "2"" of type '" "UVString const &""'"); 
    }
    arg2 = ptr;
  }
  result = ((Quackle::AlphabetParameters const *)arg1)->encode((UVString const &)*arg2);
  resultobj = SWIG_NewPointerObj((new Quackle::LetterString(result)), SWIGTYPE_p_Quackle__FixedLengthString, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_AlphabetParameters_encode(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "AlphabetParameters_encode", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Quackle__AlphabetParameters, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_AlphabetParameters_encode__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Quackle__AlphabetParameters, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_AlphabetParameters_encode__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'AlphabetParameters_encode'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Quackle::AlphabetParameters::encode(UVString const &,UVString *) const\n"
    "    Quackle::AlphabetParameters::encode(UVString const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_AlphabetParameters_alphabetName(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::AlphabetParameters *arg1 = (Quackle::AlphabetParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  string result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__AlphabetParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AlphabetParameters_alphabetName" "', argument " "1"" of type '" "Quackle::AlphabetParameters const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::AlphabetParameters * >(argp1);
  result = ((Quackle::AlphabetParameters const *)arg1)->alphabetName();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AlphabetParameters_setAlphabetName(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::AlphabetParameters *arg1 = (Quackle::AlphabetParameters *) 0 ;
  string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "AlphabetParameters_setAlphabetName", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__AlphabetParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AlphabetParameters_setAlphabetName" "', argument " "1"" of type '" "Quackle::AlphabetParameters *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::AlphabetParameters * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AlphabetParameters_setAlphabetName" "', argument " "2"" of type '" "string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AlphabetParameters_setAlphabetName" "', argument " "2"" of type '" "string const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->setAlphabetName((string const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_AlphabetParameters_findAlphabetFile(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject *swig_obj[1] ;
  string result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AlphabetParameters_findAlphabetFile" "', argument " "1"" of type '" "string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AlphabetParameters_findAlphabetFile" "', argument " "1"" of type '" "string const &""'"); 
    }
    arg1 = ptr;
  }
  result = Quackle::AlphabetParameters::findAlphabetFile((std::string const &)*arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_AlphabetParameters(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::AlphabetParameters *arg1 = (Quackle::AlphabetParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__AlphabetParameters, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_AlphabetParameters" "', argument " "1"" of type '" "Quackle::AlphabetParameters *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::AlphabetParameters * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *AlphabetParameters_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Quackle__AlphabetParameters, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *AlphabetParameters_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_EnglishAlphabetParameters(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::EnglishAlphabetParameters *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "new_EnglishAlphabetParameters", 0, 0, 0)) SWIG_fail;
  result = (Quackle::EnglishAlphabetParameters *)new Quackle::EnglishAlphabetParameters();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__EnglishAlphabetParameters, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_EnglishAlphabetParameters(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::EnglishAlphabetParameters *arg1 = (Quackle::EnglishAlphabetParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__EnglishAlphabetParameters, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_EnglishAlphabetParameters" "', argument " "1"" of type '" "Quackle::EnglishAlphabetParameters *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::EnglishAlphabetParameters * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *EnglishAlphabetParameters_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Quackle__EnglishAlphabetParameters, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *EnglishAlphabetParameters_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_MoveVector_iterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::Move > *arg1 = (std::vector< Quackle::Move > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &swig_obj[0];
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__Move_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MoveVector_iterator" "', argument " "1"" of type '" "std::vector< Quackle::Move > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::Move > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_Quackle_Move_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MoveVector___nonzero__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::Move > *arg1 = (std::vector< Quackle::Move > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__Move_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MoveVector___nonzero__" "', argument " "1"" of type '" "std::vector< Quackle::Move > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::Move > * >(argp1);
  result = (bool)std_vector_Sl_Quackle_Move_Sg____nonzero__((std::vector< Quackle::Move > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MoveVector___bool__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::Move > *arg1 = (std::vector< Quackle::Move > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__Move_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MoveVector___bool__" "', argument " "1"" of type '" "std::vector< Quackle::Move > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::Move > * >(argp1);
  result = (bool)std_vector_Sl_Quackle_Move_Sg____bool__((std::vector< Quackle::Move > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MoveVector___len__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::Move > *arg1 = (std::vector< Quackle::Move > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Quackle::Move >::size_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__Move_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MoveVector___len__" "', argument " "1"" of type '" "std::vector< Quackle::Move > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::Move > * >(argp1);
  result = std_vector_Sl_Quackle_Move_Sg____len__((std::vector< Quackle::Move > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MoveVector___getslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::Move > *arg1 = (std::vector< Quackle::Move > *) 0 ;
  std::vector< Quackle::Move >::difference_type arg2 ;
  std::vector< Quackle::Move >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  std::vector< Quackle::Move,std::allocator< Quackle::Move > > *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "MoveVector___getslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__Move_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MoveVector___getslice__" "', argument " "1"" of type '" "std::vector< Quackle::Move > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::Move > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MoveVector___getslice__" "', argument " "2"" of type '" "std::vector< Quackle::Move >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Quackle::Move >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MoveVector___getslice__" "', argument " "3"" of type '" "std::vector< Quackle::Move >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< Quackle::Move >::difference_type >(val3);
  try {
    result = (std::vector< Quackle::Move,std::allocator< Quackle::Move > > *)std_vector_Sl_Quackle_Move_Sg____getslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Quackle__Move_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MoveVector___setslice____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Quackle::Move > *arg1 = (std::vector< Quackle::Move > *) 0 ;
  std::vector< Quackle::Move >::difference_type arg2 ;
  std::vector< Quackle::Move >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__Move_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MoveVector___setslice__" "', argument " "1"" of type '" "std::vector< Quackle::Move > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::Move > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MoveVector___setslice__" "', argument " "2"" of type '" "std::vector< Quackle::Move >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Quackle::Move >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MoveVector___setslice__" "', argument " "3"" of type '" "std::vector< Quackle::Move >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< Quackle::Move >::difference_type >(val3);
  try {
    std_vector_Sl_Quackle_Move_Sg____setslice____SWIG_0(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MoveVector___setslice____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Quackle::Move > *arg1 = (std::vector< Quackle::Move > *) 0 ;
  std::vector< Quackle::Move >::difference_type arg2 ;
  std::vector< Quackle::Move >::difference_type arg3 ;
  std::vector< Quackle::Move,std::allocator< Quackle::Move > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__Move_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MoveVector___setslice__" "', argument " "1"" of type '" "std::vector< Quackle::Move > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::Move > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MoveVector___setslice__" "', argument " "2"" of type '" "std::vector< Quackle::Move >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Quackle::Move >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MoveVector___setslice__" "', argument " "3"" of type '" "std::vector< Quackle::Move >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< Quackle::Move >::difference_type >(val3);
  {
    std::vector< Quackle::Move,std::allocator< Quackle::Move > > *ptr = (std::vector< Quackle::Move,std::allocator< Quackle::Move > > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "MoveVector___setslice__" "', argument " "4"" of type '" "std::vector< Quackle::Move,std::allocator< Quackle::Move > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MoveVector___setslice__" "', argument " "4"" of type '" "std::vector< Quackle::Move,std::allocator< Quackle::Move > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_Quackle_Move_Sg____setslice____SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(std::vector< Quackle::Move,std::allocator< Quackle::Move > > const &)*arg4);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MoveVector___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "MoveVector___setslice__", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Quackle::Move,std::allocator< Quackle::Move > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_MoveVector___setslice____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Quackle::Move,std::allocator< Quackle::Move > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< Quackle::Move,std::allocator< Quackle::Move > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MoveVector___setslice____SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'MoveVector___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Quackle::Move >::__setslice__(std::vector< Quackle::Move >::difference_type,std::vector< Quackle::Move >::difference_type)\n"
    "    std::vector< Quackle::Move >::__setslice__(std::vector< Quackle::Move >::difference_type,std::vector< Quackle::Move >::difference_type,std::vector< Quackle::Move,std::allocator< Quackle::Move > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MoveVector___delslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::Move > *arg1 = (std::vector< Quackle::Move > *) 0 ;
  std::vector< Quackle::Move >::difference_type arg2 ;
  std::vector< Quackle::Move >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "MoveVector___delslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__Move_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MoveVector___delslice__" "', argument " "1"" of type '" "std::vector< Quackle::Move > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::Move > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MoveVector___delslice__" "', argument " "2"" of type '" "std::vector< Quackle::Move >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Quackle::Move >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MoveVector___delslice__" "', argument " "3"" of type '" "std::vector< Quackle::Move >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< Quackle::Move >::difference_type >(val3);
  try {
    std_vector_Sl_Quackle_Move_Sg____delslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MoveVector___delitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Quackle::Move > *arg1 = (std::vector< Quackle::Move > *) 0 ;
  std::vector< Quackle::Move >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__Move_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MoveVector___delitem__" "', argument " "1"" of type '" "std::vector< Quackle::Move > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::Move > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MoveVector___delitem__" "', argument " "2"" of type '" "std::vector< Quackle::Move >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Quackle::Move >::difference_type >(val2);
  try {
    std_vector_Sl_Quackle_Move_Sg____delitem____SWIG_0(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MoveVector___getitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Quackle::Move > *arg1 = (std::vector< Quackle::Move > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< Quackle::Move,std::allocator< Quackle::Move > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__Move_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MoveVector___getitem__" "', argument " "1"" of type '" "std::vector< Quackle::Move > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::Move > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "MoveVector___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  try {
    result = (std::vector< Quackle::Move,std::allocator< Quackle::Move > > *)std_vector_Sl_Quackle_Move_Sg____getitem____SWIG_0(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Quackle__Move_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MoveVector___setitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Quackle::Move > *arg1 = (std::vector< Quackle::Move > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< Quackle::Move,std::allocator< Quackle::Move > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__Move_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MoveVector___setitem__" "', argument " "1"" of type '" "std::vector< Quackle::Move > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::Move > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "MoveVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  {
    std::vector< Quackle::Move,std::allocator< Quackle::Move > > *ptr = (std::vector< Quackle::Move,std::allocator< Quackle::Move > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MoveVector___setitem__" "', argument " "3"" of type '" "std::vector< Quackle::Move,std::allocator< Quackle::Move > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MoveVector___setitem__" "', argument " "3"" of type '" "std::vector< Quackle::Move,std::allocator< Quackle::Move > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_Quackle_Move_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< Quackle::Move,std::allocator< Quackle::Move > > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MoveVector___setitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Quackle::Move > *arg1 = (std::vector< Quackle::Move > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__Move_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MoveVector___setitem__" "', argument " "1"" of type '" "std::vector< Quackle::Move > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::Move > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "MoveVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  try {
    std_vector_Sl_Quackle_Move_Sg____setitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MoveVector___delitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Quackle::Move > *arg1 = (std::vector< Quackle::Move > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__Move_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MoveVector___delitem__" "', argument " "1"" of type '" "std::vector< Quackle::Move > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::Move > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "MoveVector___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  try {
    std_vector_Sl_Quackle_Move_Sg____delitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MoveVector___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "MoveVector___delitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Quackle::Move,std::allocator< Quackle::Move > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_MoveVector___delitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Quackle::Move,std::allocator< Quackle::Move > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MoveVector___delitem____SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'MoveVector___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Quackle::Move >::__delitem__(std::vector< Quackle::Move >::difference_type)\n"
    "    std::vector< Quackle::Move >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MoveVector___getitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Quackle::Move > *arg1 = (std::vector< Quackle::Move > *) 0 ;
  std::vector< Quackle::Move >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< Quackle::Move >::value_type *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__Move_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MoveVector___getitem__" "', argument " "1"" of type '" "std::vector< Quackle::Move > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::Move > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MoveVector___getitem__" "', argument " "2"" of type '" "std::vector< Quackle::Move >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Quackle::Move >::difference_type >(val2);
  try {
    result = (std::vector< Quackle::Move >::value_type *) &std_vector_Sl_Quackle_Move_Sg____getitem____SWIG_1((std::vector< Quackle::Move > const *)arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__Move, 0 |  0 );
  (void)swig::container_owner<swig::traits<std::vector< Quackle::Move >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MoveVector___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "MoveVector___getitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Quackle::Move,std::allocator< Quackle::Move > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_MoveVector___getitem____SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Quackle::Move,std::allocator< Quackle::Move > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MoveVector___getitem____SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'MoveVector___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Quackle::Move >::__getitem__(PySliceObject *)\n"
    "    std::vector< Quackle::Move >::__getitem__(std::vector< Quackle::Move >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MoveVector___setitem____SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Quackle::Move > *arg1 = (std::vector< Quackle::Move > *) 0 ;
  std::vector< Quackle::Move >::difference_type arg2 ;
  std::vector< Quackle::Move >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__Move_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MoveVector___setitem__" "', argument " "1"" of type '" "std::vector< Quackle::Move > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::Move > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MoveVector___setitem__" "', argument " "2"" of type '" "std::vector< Quackle::Move >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Quackle::Move >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_Quackle__Move,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MoveVector___setitem__" "', argument " "3"" of type '" "std::vector< Quackle::Move >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MoveVector___setitem__" "', argument " "3"" of type '" "std::vector< Quackle::Move >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Quackle::Move >::value_type * >(argp3);
  try {
    std_vector_Sl_Quackle_Move_Sg____setitem____SWIG_2(arg1,SWIG_STD_MOVE(arg2),(Quackle::Move const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MoveVector___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "MoveVector___setitem__", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Quackle::Move,std::allocator< Quackle::Move > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_MoveVector___setitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Quackle::Move,std::allocator< Quackle::Move > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< Quackle::Move,std::allocator< Quackle::Move > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MoveVector___setitem____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Quackle::Move,std::allocator< Quackle::Move > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_Quackle__Move, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MoveVector___setitem____SWIG_2(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'MoveVector___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Quackle::Move >::__setitem__(PySliceObject *,std::vector< Quackle::Move,std::allocator< Quackle::Move > > const &)\n"
    "    std::vector< Quackle::Move >::__setitem__(PySliceObject *)\n"
    "    std::vector< Quackle::Move >::__setitem__(std::vector< Quackle::Move >::difference_type,std::vector< Quackle::Move >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MoveVector_pop(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::Move > *arg1 = (std::vector< Quackle::Move > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Quackle::Move >::value_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__Move_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MoveVector_pop" "', argument " "1"" of type '" "std::vector< Quackle::Move > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::Move > * >(argp1);
  try {
    result = std_vector_Sl_Quackle_Move_Sg__pop(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj((new std::vector< Quackle::Move >::value_type(result)), SWIGTYPE_p_Quackle__Move, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MoveVector_append(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::Move > *arg1 = (std::vector< Quackle::Move > *) 0 ;
  std::vector< Quackle::Move >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "MoveVector_append", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__Move_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MoveVector_append" "', argument " "1"" of type '" "std::vector< Quackle::Move > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::Move > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__Move,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MoveVector_append" "', argument " "2"" of type '" "std::vector< Quackle::Move >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MoveVector_append" "', argument " "2"" of type '" "std::vector< Quackle::Move >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Quackle::Move >::value_type * >(argp2);
  std_vector_Sl_Quackle_Move_Sg__append(arg1,(Quackle::Move const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MoveVector__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::vector< Quackle::Move > *result = 0 ;
  
  (void)self;
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (std::vector< Quackle::Move > *)new std::vector< Quackle::Move >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Quackle__Move_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MoveVector__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Quackle::Move > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::vector< Quackle::Move > *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector< Quackle::Move,std::allocator< Quackle::Move > > *ptr = (std::vector< Quackle::Move,std::allocator< Quackle::Move > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MoveVector" "', argument " "1"" of type '" "std::vector< Quackle::Move > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MoveVector" "', argument " "1"" of type '" "std::vector< Quackle::Move > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< Quackle::Move > *)new std::vector< Quackle::Move >((std::vector< Quackle::Move > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Quackle__Move_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MoveVector_empty(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::Move > *arg1 = (std::vector< Quackle::Move > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__Move_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MoveVector_empty" "', argument " "1"" of type '" "std::vector< Quackle::Move > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::Move > * >(argp1);
  result = (bool)((std::vector< Quackle::Move > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MoveVector_size(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::Move > *arg1 = (std::vector< Quackle::Move > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Quackle::Move >::size_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__Move_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MoveVector_size" "', argument " "1"" of type '" "std::vector< Quackle::Move > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::Move > * >(argp1);
  result = ((std::vector< Quackle::Move > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MoveVector_swap(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::Move > *arg1 = (std::vector< Quackle::Move > *) 0 ;
  std::vector< Quackle::Move > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "MoveVector_swap", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__Move_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MoveVector_swap" "', argument " "1"" of type '" "std::vector< Quackle::Move > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::Move > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_Quackle__Move_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MoveVector_swap" "', argument " "2"" of type '" "std::vector< Quackle::Move > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MoveVector_swap" "', argument " "2"" of type '" "std::vector< Quackle::Move > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Quackle::Move > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MoveVector_begin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::Move > *arg1 = (std::vector< Quackle::Move > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Quackle::Move >::iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__Move_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MoveVector_begin" "', argument " "1"" of type '" "std::vector< Quackle::Move > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::Move > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Quackle::Move >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MoveVector_end(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::Move > *arg1 = (std::vector< Quackle::Move > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Quackle::Move >::iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__Move_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MoveVector_end" "', argument " "1"" of type '" "std::vector< Quackle::Move > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::Move > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Quackle::Move >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MoveVector_rbegin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::Move > *arg1 = (std::vector< Quackle::Move > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Quackle::Move >::reverse_iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__Move_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MoveVector_rbegin" "', argument " "1"" of type '" "std::vector< Quackle::Move > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::Move > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Quackle::Move >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MoveVector_rend(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::Move > *arg1 = (std::vector< Quackle::Move > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Quackle::Move >::reverse_iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__Move_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MoveVector_rend" "', argument " "1"" of type '" "std::vector< Quackle::Move > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::Move > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Quackle::Move >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MoveVector_clear(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::Move > *arg1 = (std::vector< Quackle::Move > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__Move_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MoveVector_clear" "', argument " "1"" of type '" "std::vector< Quackle::Move > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::Move > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MoveVector_get_allocator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::Move > *arg1 = (std::vector< Quackle::Move > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::allocator< Quackle::Move > > result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__Move_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MoveVector_get_allocator" "', argument " "1"" of type '" "std::vector< Quackle::Move > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::Move > * >(argp1);
  result = ((std::vector< Quackle::Move > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< Quackle::Move >::allocator_type(result)), SWIGTYPE_p_std__allocatorT_Quackle__Move_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MoveVector__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Quackle::Move >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< Quackle::Move > *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_MoveVector" "', argument " "1"" of type '" "std::vector< Quackle::Move >::size_type""'");
  } 
  arg1 = static_cast< std::vector< Quackle::Move >::size_type >(val1);
  result = (std::vector< Quackle::Move > *)new std::vector< Quackle::Move >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Quackle__Move_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MoveVector_pop_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::Move > *arg1 = (std::vector< Quackle::Move > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__Move_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MoveVector_pop_back" "', argument " "1"" of type '" "std::vector< Quackle::Move > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::Move > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MoveVector_resize__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Quackle::Move > *arg1 = (std::vector< Quackle::Move > *) 0 ;
  std::vector< Quackle::Move >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__Move_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MoveVector_resize" "', argument " "1"" of type '" "std::vector< Quackle::Move > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::Move > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MoveVector_resize" "', argument " "2"" of type '" "std::vector< Quackle::Move >::size_type""'");
  } 
  arg2 = static_cast< std::vector< Quackle::Move >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MoveVector_erase__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Quackle::Move > *arg1 = (std::vector< Quackle::Move > *) 0 ;
  std::vector< Quackle::Move >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< Quackle::Move >::iterator result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__Move_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MoveVector_erase" "', argument " "1"" of type '" "std::vector< Quackle::Move > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::Move > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "MoveVector_erase" "', argument " "2"" of type '" "std::vector< Quackle::Move >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< Quackle::Move >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< Quackle::Move >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "MoveVector_erase" "', argument " "2"" of type '" "std::vector< Quackle::Move >::iterator""'");
    }
  }
  result = std_vector_Sl_Quackle_Move_Sg__erase__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Quackle::Move >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MoveVector_erase__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Quackle::Move > *arg1 = (std::vector< Quackle::Move > *) 0 ;
  std::vector< Quackle::Move >::iterator arg2 ;
  std::vector< Quackle::Move >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  std::vector< Quackle::Move >::iterator result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__Move_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MoveVector_erase" "', argument " "1"" of type '" "std::vector< Quackle::Move > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::Move > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "MoveVector_erase" "', argument " "2"" of type '" "std::vector< Quackle::Move >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< Quackle::Move >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< Quackle::Move >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "MoveVector_erase" "', argument " "2"" of type '" "std::vector< Quackle::Move >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "MoveVector_erase" "', argument " "3"" of type '" "std::vector< Quackle::Move >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< Quackle::Move >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< Quackle::Move >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "MoveVector_erase" "', argument " "3"" of type '" "std::vector< Quackle::Move >::iterator""'");
    }
  }
  result = std_vector_Sl_Quackle_Move_Sg__erase__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Quackle::Move >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MoveVector_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "MoveVector_erase", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Quackle::Move,std::allocator< Quackle::Move > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< Quackle::Move >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_MoveVector_erase__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Quackle::Move,std::allocator< Quackle::Move > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< Quackle::Move >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< Quackle::Move >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_MoveVector_erase__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'MoveVector_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Quackle::Move >::erase(std::vector< Quackle::Move >::iterator)\n"
    "    std::vector< Quackle::Move >::erase(std::vector< Quackle::Move >::iterator,std::vector< Quackle::Move >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_MoveVector__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Quackle::Move >::size_type arg1 ;
  std::vector< Quackle::Move >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::vector< Quackle::Move > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_MoveVector" "', argument " "1"" of type '" "std::vector< Quackle::Move >::size_type""'");
  } 
  arg1 = static_cast< std::vector< Quackle::Move >::size_type >(val1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__Move,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_MoveVector" "', argument " "2"" of type '" "std::vector< Quackle::Move >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MoveVector" "', argument " "2"" of type '" "std::vector< Quackle::Move >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Quackle::Move >::value_type * >(argp2);
  result = (std::vector< Quackle::Move > *)new std::vector< Quackle::Move >(arg1,(std::vector< Quackle::Move >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Quackle__Move_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MoveVector(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_MoveVector", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_MoveVector__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_MoveVector__SWIG_2(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Quackle::Move,std::allocator< Quackle::Move > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_MoveVector__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Quackle__Move, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_MoveVector__SWIG_3(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_MoveVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Quackle::Move >::vector()\n"
    "    std::vector< Quackle::Move >::vector(std::vector< Quackle::Move > const &)\n"
    "    std::vector< Quackle::Move >::vector(std::vector< Quackle::Move >::size_type)\n"
    "    std::vector< Quackle::Move >::vector(std::vector< Quackle::Move >::size_type,std::vector< Quackle::Move >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MoveVector_push_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::Move > *arg1 = (std::vector< Quackle::Move > *) 0 ;
  std::vector< Quackle::Move >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "MoveVector_push_back", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__Move_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MoveVector_push_back" "', argument " "1"" of type '" "std::vector< Quackle::Move > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::Move > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__Move,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MoveVector_push_back" "', argument " "2"" of type '" "std::vector< Quackle::Move >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MoveVector_push_back" "', argument " "2"" of type '" "std::vector< Quackle::Move >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Quackle::Move >::value_type * >(argp2);
  (arg1)->push_back((std::vector< Quackle::Move >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MoveVector_front(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::Move > *arg1 = (std::vector< Quackle::Move > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Quackle::Move >::value_type *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__Move_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MoveVector_front" "', argument " "1"" of type '" "std::vector< Quackle::Move > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::Move > * >(argp1);
  result = (std::vector< Quackle::Move >::value_type *) &((std::vector< Quackle::Move > const *)arg1)->front();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__Move, 0 |  0 );
  (void)swig::container_owner<swig::traits<std::vector< Quackle::Move >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MoveVector_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::Move > *arg1 = (std::vector< Quackle::Move > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Quackle::Move >::value_type *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__Move_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MoveVector_back" "', argument " "1"" of type '" "std::vector< Quackle::Move > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::Move > * >(argp1);
  result = (std::vector< Quackle::Move >::value_type *) &((std::vector< Quackle::Move > const *)arg1)->back();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__Move, 0 |  0 );
  (void)swig::container_owner<swig::traits<std::vector< Quackle::Move >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MoveVector_assign(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::Move > *arg1 = (std::vector< Quackle::Move > *) 0 ;
  std::vector< Quackle::Move >::size_type arg2 ;
  std::vector< Quackle::Move >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "MoveVector_assign", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__Move_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MoveVector_assign" "', argument " "1"" of type '" "std::vector< Quackle::Move > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::Move > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MoveVector_assign" "', argument " "2"" of type '" "std::vector< Quackle::Move >::size_type""'");
  } 
  arg2 = static_cast< std::vector< Quackle::Move >::size_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_Quackle__Move,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MoveVector_assign" "', argument " "3"" of type '" "std::vector< Quackle::Move >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MoveVector_assign" "', argument " "3"" of type '" "std::vector< Quackle::Move >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Quackle::Move >::value_type * >(argp3);
  (arg1)->assign(arg2,(std::vector< Quackle::Move >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MoveVector_resize__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Quackle::Move > *arg1 = (std::vector< Quackle::Move > *) 0 ;
  std::vector< Quackle::Move >::size_type arg2 ;
  std::vector< Quackle::Move >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__Move_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MoveVector_resize" "', argument " "1"" of type '" "std::vector< Quackle::Move > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::Move > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MoveVector_resize" "', argument " "2"" of type '" "std::vector< Quackle::Move >::size_type""'");
  } 
  arg2 = static_cast< std::vector< Quackle::Move >::size_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_Quackle__Move,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MoveVector_resize" "', argument " "3"" of type '" "std::vector< Quackle::Move >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MoveVector_resize" "', argument " "3"" of type '" "std::vector< Quackle::Move >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Quackle::Move >::value_type * >(argp3);
  (arg1)->resize(arg2,(std::vector< Quackle::Move >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MoveVector_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "MoveVector_resize", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Quackle::Move,std::allocator< Quackle::Move > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MoveVector_resize__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Quackle::Move,std::allocator< Quackle::Move > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_Quackle__Move, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MoveVector_resize__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'MoveVector_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Quackle::Move >::resize(std::vector< Quackle::Move >::size_type)\n"
    "    std::vector< Quackle::Move >::resize(std::vector< Quackle::Move >::size_type,std::vector< Quackle::Move >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MoveVector_insert__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Quackle::Move > *arg1 = (std::vector< Quackle::Move > *) 0 ;
  std::vector< Quackle::Move >::iterator arg2 ;
  std::vector< Quackle::Move >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  std::vector< Quackle::Move >::iterator result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__Move_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MoveVector_insert" "', argument " "1"" of type '" "std::vector< Quackle::Move > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::Move > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "MoveVector_insert" "', argument " "2"" of type '" "std::vector< Quackle::Move >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< Quackle::Move >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< Quackle::Move >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "MoveVector_insert" "', argument " "2"" of type '" "std::vector< Quackle::Move >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_Quackle__Move,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MoveVector_insert" "', argument " "3"" of type '" "std::vector< Quackle::Move >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MoveVector_insert" "', argument " "3"" of type '" "std::vector< Quackle::Move >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Quackle::Move >::value_type * >(argp3);
  result = std_vector_Sl_Quackle_Move_Sg__insert__SWIG_0(arg1,SWIG_STD_MOVE(arg2),(Quackle::Move const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Quackle::Move >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MoveVector_insert__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Quackle::Move > *arg1 = (std::vector< Quackle::Move > *) 0 ;
  std::vector< Quackle::Move >::iterator arg2 ;
  std::vector< Quackle::Move >::size_type arg3 ;
  std::vector< Quackle::Move >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__Move_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MoveVector_insert" "', argument " "1"" of type '" "std::vector< Quackle::Move > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::Move > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "MoveVector_insert" "', argument " "2"" of type '" "std::vector< Quackle::Move >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< Quackle::Move >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< Quackle::Move >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "MoveVector_insert" "', argument " "2"" of type '" "std::vector< Quackle::Move >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MoveVector_insert" "', argument " "3"" of type '" "std::vector< Quackle::Move >::size_type""'");
  } 
  arg3 = static_cast< std::vector< Quackle::Move >::size_type >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_Quackle__Move,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "MoveVector_insert" "', argument " "4"" of type '" "std::vector< Quackle::Move >::value_type const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MoveVector_insert" "', argument " "4"" of type '" "std::vector< Quackle::Move >::value_type const &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< Quackle::Move >::value_type * >(argp4);
  std_vector_Sl_Quackle_Move_Sg__insert__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(Quackle::Move const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MoveVector_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "MoveVector_insert", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Quackle::Move,std::allocator< Quackle::Move > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< Quackle::Move >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_Quackle__Move, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MoveVector_insert__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Quackle::Move,std::allocator< Quackle::Move > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< Quackle::Move >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_Quackle__Move, SWIG_POINTER_NO_NULL | 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MoveVector_insert__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'MoveVector_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Quackle::Move >::insert(std::vector< Quackle::Move >::iterator,std::vector< Quackle::Move >::value_type const &)\n"
    "    std::vector< Quackle::Move >::insert(std::vector< Quackle::Move >::iterator,std::vector< Quackle::Move >::size_type,std::vector< Quackle::Move >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MoveVector_reserve(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::Move > *arg1 = (std::vector< Quackle::Move > *) 0 ;
  std::vector< Quackle::Move >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "MoveVector_reserve", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__Move_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MoveVector_reserve" "', argument " "1"" of type '" "std::vector< Quackle::Move > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::Move > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MoveVector_reserve" "', argument " "2"" of type '" "std::vector< Quackle::Move >::size_type""'");
  } 
  arg2 = static_cast< std::vector< Quackle::Move >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MoveVector_capacity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::Move > *arg1 = (std::vector< Quackle::Move > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Quackle::Move >::size_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__Move_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MoveVector_capacity" "', argument " "1"" of type '" "std::vector< Quackle::Move > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::Move > * >(argp1);
  result = ((std::vector< Quackle::Move > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_MoveVector(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::Move > *arg1 = (std::vector< Quackle::Move > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__Move_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MoveVector" "', argument " "1"" of type '" "std::vector< Quackle::Move > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::Move > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *MoveVector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_Quackle__Move_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *MoveVector_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_PlayerVector_iterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::Player > *arg1 = (std::vector< Quackle::Player > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &swig_obj[0];
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__Player_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PlayerVector_iterator" "', argument " "1"" of type '" "std::vector< Quackle::Player > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::Player > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_Quackle_Player_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PlayerVector___nonzero__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::Player > *arg1 = (std::vector< Quackle::Player > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__Player_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PlayerVector___nonzero__" "', argument " "1"" of type '" "std::vector< Quackle::Player > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::Player > * >(argp1);
  result = (bool)std_vector_Sl_Quackle_Player_Sg____nonzero__((std::vector< Quackle::Player > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PlayerVector___bool__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::Player > *arg1 = (std::vector< Quackle::Player > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__Player_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PlayerVector___bool__" "', argument " "1"" of type '" "std::vector< Quackle::Player > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::Player > * >(argp1);
  result = (bool)std_vector_Sl_Quackle_Player_Sg____bool__((std::vector< Quackle::Player > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PlayerVector___len__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::Player > *arg1 = (std::vector< Quackle::Player > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Quackle::Player >::size_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__Player_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PlayerVector___len__" "', argument " "1"" of type '" "std::vector< Quackle::Player > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::Player > * >(argp1);
  result = std_vector_Sl_Quackle_Player_Sg____len__((std::vector< Quackle::Player > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PlayerVector___getslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::Player > *arg1 = (std::vector< Quackle::Player > *) 0 ;
  std::vector< Quackle::Player >::difference_type arg2 ;
  std::vector< Quackle::Player >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  std::vector< Quackle::Player,std::allocator< Quackle::Player > > *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "PlayerVector___getslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__Player_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PlayerVector___getslice__" "', argument " "1"" of type '" "std::vector< Quackle::Player > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::Player > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PlayerVector___getslice__" "', argument " "2"" of type '" "std::vector< Quackle::Player >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Quackle::Player >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PlayerVector___getslice__" "', argument " "3"" of type '" "std::vector< Quackle::Player >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< Quackle::Player >::difference_type >(val3);
  try {
    result = (std::vector< Quackle::Player,std::allocator< Quackle::Player > > *)std_vector_Sl_Quackle_Player_Sg____getslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Quackle__Player_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PlayerVector___setslice____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Quackle::Player > *arg1 = (std::vector< Quackle::Player > *) 0 ;
  std::vector< Quackle::Player >::difference_type arg2 ;
  std::vector< Quackle::Player >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__Player_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PlayerVector___setslice__" "', argument " "1"" of type '" "std::vector< Quackle::Player > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::Player > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PlayerVector___setslice__" "', argument " "2"" of type '" "std::vector< Quackle::Player >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Quackle::Player >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PlayerVector___setslice__" "', argument " "3"" of type '" "std::vector< Quackle::Player >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< Quackle::Player >::difference_type >(val3);
  try {
    std_vector_Sl_Quackle_Player_Sg____setslice____SWIG_0(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PlayerVector___setslice____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Quackle::Player > *arg1 = (std::vector< Quackle::Player > *) 0 ;
  std::vector< Quackle::Player >::difference_type arg2 ;
  std::vector< Quackle::Player >::difference_type arg3 ;
  std::vector< Quackle::Player,std::allocator< Quackle::Player > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__Player_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PlayerVector___setslice__" "', argument " "1"" of type '" "std::vector< Quackle::Player > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::Player > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PlayerVector___setslice__" "', argument " "2"" of type '" "std::vector< Quackle::Player >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Quackle::Player >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PlayerVector___setslice__" "', argument " "3"" of type '" "std::vector< Quackle::Player >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< Quackle::Player >::difference_type >(val3);
  {
    std::vector< Quackle::Player,std::allocator< Quackle::Player > > *ptr = (std::vector< Quackle::Player,std::allocator< Quackle::Player > > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "PlayerVector___setslice__" "', argument " "4"" of type '" "std::vector< Quackle::Player,std::allocator< Quackle::Player > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PlayerVector___setslice__" "', argument " "4"" of type '" "std::vector< Quackle::Player,std::allocator< Quackle::Player > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_Quackle_Player_Sg____setslice____SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(std::vector< Quackle::Player,std::allocator< Quackle::Player > > const &)*arg4);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PlayerVector___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "PlayerVector___setslice__", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Quackle::Player,std::allocator< Quackle::Player > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_PlayerVector___setslice____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Quackle::Player,std::allocator< Quackle::Player > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< Quackle::Player,std::allocator< Quackle::Player > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_PlayerVector___setslice____SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'PlayerVector___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Quackle::Player >::__setslice__(std::vector< Quackle::Player >::difference_type,std::vector< Quackle::Player >::difference_type)\n"
    "    std::vector< Quackle::Player >::__setslice__(std::vector< Quackle::Player >::difference_type,std::vector< Quackle::Player >::difference_type,std::vector< Quackle::Player,std::allocator< Quackle::Player > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PlayerVector___delslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::Player > *arg1 = (std::vector< Quackle::Player > *) 0 ;
  std::vector< Quackle::Player >::difference_type arg2 ;
  std::vector< Quackle::Player >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "PlayerVector___delslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__Player_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PlayerVector___delslice__" "', argument " "1"" of type '" "std::vector< Quackle::Player > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::Player > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PlayerVector___delslice__" "', argument " "2"" of type '" "std::vector< Quackle::Player >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Quackle::Player >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PlayerVector___delslice__" "', argument " "3"" of type '" "std::vector< Quackle::Player >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< Quackle::Player >::difference_type >(val3);
  try {
    std_vector_Sl_Quackle_Player_Sg____delslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PlayerVector___delitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Quackle::Player > *arg1 = (std::vector< Quackle::Player > *) 0 ;
  std::vector< Quackle::Player >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__Player_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PlayerVector___delitem__" "', argument " "1"" of type '" "std::vector< Quackle::Player > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::Player > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PlayerVector___delitem__" "', argument " "2"" of type '" "std::vector< Quackle::Player >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Quackle::Player >::difference_type >(val2);
  try {
    std_vector_Sl_Quackle_Player_Sg____delitem____SWIG_0(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PlayerVector___getitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Quackle::Player > *arg1 = (std::vector< Quackle::Player > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< Quackle::Player,std::allocator< Quackle::Player > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__Player_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PlayerVector___getitem__" "', argument " "1"" of type '" "std::vector< Quackle::Player > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::Player > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "PlayerVector___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  try {
    result = (std::vector< Quackle::Player,std::allocator< Quackle::Player > > *)std_vector_Sl_Quackle_Player_Sg____getitem____SWIG_0(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Quackle__Player_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PlayerVector___setitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Quackle::Player > *arg1 = (std::vector< Quackle::Player > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< Quackle::Player,std::allocator< Quackle::Player > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__Player_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PlayerVector___setitem__" "', argument " "1"" of type '" "std::vector< Quackle::Player > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::Player > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "PlayerVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  {
    std::vector< Quackle::Player,std::allocator< Quackle::Player > > *ptr = (std::vector< Quackle::Player,std::allocator< Quackle::Player > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PlayerVector___setitem__" "', argument " "3"" of type '" "std::vector< Quackle::Player,std::allocator< Quackle::Player > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PlayerVector___setitem__" "', argument " "3"" of type '" "std::vector< Quackle::Player,std::allocator< Quackle::Player > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_Quackle_Player_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< Quackle::Player,std::allocator< Quackle::Player > > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PlayerVector___setitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Quackle::Player > *arg1 = (std::vector< Quackle::Player > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__Player_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PlayerVector___setitem__" "', argument " "1"" of type '" "std::vector< Quackle::Player > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::Player > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "PlayerVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  try {
    std_vector_Sl_Quackle_Player_Sg____setitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PlayerVector___delitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Quackle::Player > *arg1 = (std::vector< Quackle::Player > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__Player_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PlayerVector___delitem__" "', argument " "1"" of type '" "std::vector< Quackle::Player > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::Player > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "PlayerVector___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  try {
    std_vector_Sl_Quackle_Player_Sg____delitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PlayerVector___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "PlayerVector___delitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Quackle::Player,std::allocator< Quackle::Player > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_PlayerVector___delitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Quackle::Player,std::allocator< Quackle::Player > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_PlayerVector___delitem____SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'PlayerVector___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Quackle::Player >::__delitem__(std::vector< Quackle::Player >::difference_type)\n"
    "    std::vector< Quackle::Player >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PlayerVector___getitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Quackle::Player > *arg1 = (std::vector< Quackle::Player > *) 0 ;
  std::vector< Quackle::Player >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< Quackle::Player >::value_type *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__Player_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PlayerVector___getitem__" "', argument " "1"" of type '" "std::vector< Quackle::Player > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::Player > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PlayerVector___getitem__" "', argument " "2"" of type '" "std::vector< Quackle::Player >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Quackle::Player >::difference_type >(val2);
  try {
    result = (std::vector< Quackle::Player >::value_type *) &std_vector_Sl_Quackle_Player_Sg____getitem____SWIG_1((std::vector< Quackle::Player > const *)arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__Player, 0 |  0 );
  (void)swig::container_owner<swig::traits<std::vector< Quackle::Player >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PlayerVector___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "PlayerVector___getitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Quackle::Player,std::allocator< Quackle::Player > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_PlayerVector___getitem____SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Quackle::Player,std::allocator< Quackle::Player > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_PlayerVector___getitem____SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'PlayerVector___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Quackle::Player >::__getitem__(PySliceObject *)\n"
    "    std::vector< Quackle::Player >::__getitem__(std::vector< Quackle::Player >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PlayerVector___setitem____SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Quackle::Player > *arg1 = (std::vector< Quackle::Player > *) 0 ;
  std::vector< Quackle::Player >::difference_type arg2 ;
  std::vector< Quackle::Player >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__Player_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PlayerVector___setitem__" "', argument " "1"" of type '" "std::vector< Quackle::Player > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::Player > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PlayerVector___setitem__" "', argument " "2"" of type '" "std::vector< Quackle::Player >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Quackle::Player >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_Quackle__Player,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PlayerVector___setitem__" "', argument " "3"" of type '" "std::vector< Quackle::Player >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PlayerVector___setitem__" "', argument " "3"" of type '" "std::vector< Quackle::Player >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Quackle::Player >::value_type * >(argp3);
  try {
    std_vector_Sl_Quackle_Player_Sg____setitem____SWIG_2(arg1,SWIG_STD_MOVE(arg2),(Quackle::Player const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PlayerVector___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "PlayerVector___setitem__", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Quackle::Player,std::allocator< Quackle::Player > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_PlayerVector___setitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Quackle::Player,std::allocator< Quackle::Player > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< Quackle::Player,std::allocator< Quackle::Player > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_PlayerVector___setitem____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Quackle::Player,std::allocator< Quackle::Player > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_Quackle__Player, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_PlayerVector___setitem____SWIG_2(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'PlayerVector___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Quackle::Player >::__setitem__(PySliceObject *,std::vector< Quackle::Player,std::allocator< Quackle::Player > > const &)\n"
    "    std::vector< Quackle::Player >::__setitem__(PySliceObject *)\n"
    "    std::vector< Quackle::Player >::__setitem__(std::vector< Quackle::Player >::difference_type,std::vector< Quackle::Player >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PlayerVector_pop(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::Player > *arg1 = (std::vector< Quackle::Player > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Quackle::Player >::value_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__Player_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PlayerVector_pop" "', argument " "1"" of type '" "std::vector< Quackle::Player > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::Player > * >(argp1);
  try {
    result = std_vector_Sl_Quackle_Player_Sg__pop(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj((new std::vector< Quackle::Player >::value_type(result)), SWIGTYPE_p_Quackle__Player, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PlayerVector_append(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::Player > *arg1 = (std::vector< Quackle::Player > *) 0 ;
  std::vector< Quackle::Player >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "PlayerVector_append", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__Player_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PlayerVector_append" "', argument " "1"" of type '" "std::vector< Quackle::Player > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::Player > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__Player,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PlayerVector_append" "', argument " "2"" of type '" "std::vector< Quackle::Player >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PlayerVector_append" "', argument " "2"" of type '" "std::vector< Quackle::Player >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Quackle::Player >::value_type * >(argp2);
  std_vector_Sl_Quackle_Player_Sg__append(arg1,(Quackle::Player const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PlayerVector__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::vector< Quackle::Player > *result = 0 ;
  
  (void)self;
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (std::vector< Quackle::Player > *)new std::vector< Quackle::Player >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Quackle__Player_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PlayerVector__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Quackle::Player > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::vector< Quackle::Player > *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector< Quackle::Player,std::allocator< Quackle::Player > > *ptr = (std::vector< Quackle::Player,std::allocator< Quackle::Player > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PlayerVector" "', argument " "1"" of type '" "std::vector< Quackle::Player > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PlayerVector" "', argument " "1"" of type '" "std::vector< Quackle::Player > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< Quackle::Player > *)new std::vector< Quackle::Player >((std::vector< Quackle::Player > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Quackle__Player_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PlayerVector_empty(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::Player > *arg1 = (std::vector< Quackle::Player > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__Player_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PlayerVector_empty" "', argument " "1"" of type '" "std::vector< Quackle::Player > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::Player > * >(argp1);
  result = (bool)((std::vector< Quackle::Player > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PlayerVector_size(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::Player > *arg1 = (std::vector< Quackle::Player > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Quackle::Player >::size_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__Player_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PlayerVector_size" "', argument " "1"" of type '" "std::vector< Quackle::Player > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::Player > * >(argp1);
  result = ((std::vector< Quackle::Player > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PlayerVector_swap(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::Player > *arg1 = (std::vector< Quackle::Player > *) 0 ;
  std::vector< Quackle::Player > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "PlayerVector_swap", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__Player_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PlayerVector_swap" "', argument " "1"" of type '" "std::vector< Quackle::Player > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::Player > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_Quackle__Player_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PlayerVector_swap" "', argument " "2"" of type '" "std::vector< Quackle::Player > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PlayerVector_swap" "', argument " "2"" of type '" "std::vector< Quackle::Player > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Quackle::Player > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PlayerVector_begin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::Player > *arg1 = (std::vector< Quackle::Player > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Quackle::Player >::iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__Player_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PlayerVector_begin" "', argument " "1"" of type '" "std::vector< Quackle::Player > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::Player > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Quackle::Player >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PlayerVector_end(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::Player > *arg1 = (std::vector< Quackle::Player > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Quackle::Player >::iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__Player_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PlayerVector_end" "', argument " "1"" of type '" "std::vector< Quackle::Player > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::Player > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Quackle::Player >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PlayerVector_rbegin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::Player > *arg1 = (std::vector< Quackle::Player > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Quackle::Player >::reverse_iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__Player_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PlayerVector_rbegin" "', argument " "1"" of type '" "std::vector< Quackle::Player > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::Player > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Quackle::Player >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PlayerVector_rend(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::Player > *arg1 = (std::vector< Quackle::Player > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Quackle::Player >::reverse_iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__Player_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PlayerVector_rend" "', argument " "1"" of type '" "std::vector< Quackle::Player > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::Player > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Quackle::Player >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PlayerVector_clear(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::Player > *arg1 = (std::vector< Quackle::Player > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__Player_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PlayerVector_clear" "', argument " "1"" of type '" "std::vector< Quackle::Player > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::Player > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PlayerVector_get_allocator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::Player > *arg1 = (std::vector< Quackle::Player > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::allocator< Quackle::Player > > result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__Player_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PlayerVector_get_allocator" "', argument " "1"" of type '" "std::vector< Quackle::Player > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::Player > * >(argp1);
  result = ((std::vector< Quackle::Player > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< Quackle::Player >::allocator_type(result)), SWIGTYPE_p_std__allocatorT_Quackle__Player_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PlayerVector__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Quackle::Player >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< Quackle::Player > *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_PlayerVector" "', argument " "1"" of type '" "std::vector< Quackle::Player >::size_type""'");
  } 
  arg1 = static_cast< std::vector< Quackle::Player >::size_type >(val1);
  result = (std::vector< Quackle::Player > *)new std::vector< Quackle::Player >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Quackle__Player_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PlayerVector_pop_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::Player > *arg1 = (std::vector< Quackle::Player > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__Player_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PlayerVector_pop_back" "', argument " "1"" of type '" "std::vector< Quackle::Player > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::Player > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PlayerVector_resize__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Quackle::Player > *arg1 = (std::vector< Quackle::Player > *) 0 ;
  std::vector< Quackle::Player >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__Player_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PlayerVector_resize" "', argument " "1"" of type '" "std::vector< Quackle::Player > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::Player > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PlayerVector_resize" "', argument " "2"" of type '" "std::vector< Quackle::Player >::size_type""'");
  } 
  arg2 = static_cast< std::vector< Quackle::Player >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PlayerVector_erase__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Quackle::Player > *arg1 = (std::vector< Quackle::Player > *) 0 ;
  std::vector< Quackle::Player >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< Quackle::Player >::iterator result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__Player_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PlayerVector_erase" "', argument " "1"" of type '" "std::vector< Quackle::Player > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::Player > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "PlayerVector_erase" "', argument " "2"" of type '" "std::vector< Quackle::Player >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< Quackle::Player >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< Quackle::Player >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "PlayerVector_erase" "', argument " "2"" of type '" "std::vector< Quackle::Player >::iterator""'");
    }
  }
  result = std_vector_Sl_Quackle_Player_Sg__erase__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Quackle::Player >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PlayerVector_erase__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Quackle::Player > *arg1 = (std::vector< Quackle::Player > *) 0 ;
  std::vector< Quackle::Player >::iterator arg2 ;
  std::vector< Quackle::Player >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  std::vector< Quackle::Player >::iterator result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__Player_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PlayerVector_erase" "', argument " "1"" of type '" "std::vector< Quackle::Player > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::Player > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "PlayerVector_erase" "', argument " "2"" of type '" "std::vector< Quackle::Player >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< Quackle::Player >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< Quackle::Player >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "PlayerVector_erase" "', argument " "2"" of type '" "std::vector< Quackle::Player >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "PlayerVector_erase" "', argument " "3"" of type '" "std::vector< Quackle::Player >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< Quackle::Player >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< Quackle::Player >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "PlayerVector_erase" "', argument " "3"" of type '" "std::vector< Quackle::Player >::iterator""'");
    }
  }
  result = std_vector_Sl_Quackle_Player_Sg__erase__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Quackle::Player >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PlayerVector_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "PlayerVector_erase", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Quackle::Player,std::allocator< Quackle::Player > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< Quackle::Player >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_PlayerVector_erase__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Quackle::Player,std::allocator< Quackle::Player > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< Quackle::Player >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< Quackle::Player >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_PlayerVector_erase__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'PlayerVector_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Quackle::Player >::erase(std::vector< Quackle::Player >::iterator)\n"
    "    std::vector< Quackle::Player >::erase(std::vector< Quackle::Player >::iterator,std::vector< Quackle::Player >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_PlayerVector__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Quackle::Player >::size_type arg1 ;
  std::vector< Quackle::Player >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::vector< Quackle::Player > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_PlayerVector" "', argument " "1"" of type '" "std::vector< Quackle::Player >::size_type""'");
  } 
  arg1 = static_cast< std::vector< Quackle::Player >::size_type >(val1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__Player,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_PlayerVector" "', argument " "2"" of type '" "std::vector< Quackle::Player >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PlayerVector" "', argument " "2"" of type '" "std::vector< Quackle::Player >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Quackle::Player >::value_type * >(argp2);
  result = (std::vector< Quackle::Player > *)new std::vector< Quackle::Player >(arg1,(std::vector< Quackle::Player >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Quackle__Player_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PlayerVector(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_PlayerVector", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_PlayerVector__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_PlayerVector__SWIG_2(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Quackle::Player,std::allocator< Quackle::Player > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_PlayerVector__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Quackle__Player, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_PlayerVector__SWIG_3(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_PlayerVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Quackle::Player >::vector()\n"
    "    std::vector< Quackle::Player >::vector(std::vector< Quackle::Player > const &)\n"
    "    std::vector< Quackle::Player >::vector(std::vector< Quackle::Player >::size_type)\n"
    "    std::vector< Quackle::Player >::vector(std::vector< Quackle::Player >::size_type,std::vector< Quackle::Player >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PlayerVector_push_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::Player > *arg1 = (std::vector< Quackle::Player > *) 0 ;
  std::vector< Quackle::Player >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "PlayerVector_push_back", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__Player_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PlayerVector_push_back" "', argument " "1"" of type '" "std::vector< Quackle::Player > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::Player > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__Player,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PlayerVector_push_back" "', argument " "2"" of type '" "std::vector< Quackle::Player >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PlayerVector_push_back" "', argument " "2"" of type '" "std::vector< Quackle::Player >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Quackle::Player >::value_type * >(argp2);
  (arg1)->push_back((std::vector< Quackle::Player >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PlayerVector_front(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::Player > *arg1 = (std::vector< Quackle::Player > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Quackle::Player >::value_type *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__Player_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PlayerVector_front" "', argument " "1"" of type '" "std::vector< Quackle::Player > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::Player > * >(argp1);
  result = (std::vector< Quackle::Player >::value_type *) &((std::vector< Quackle::Player > const *)arg1)->front();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__Player, 0 |  0 );
  (void)swig::container_owner<swig::traits<std::vector< Quackle::Player >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PlayerVector_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::Player > *arg1 = (std::vector< Quackle::Player > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Quackle::Player >::value_type *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__Player_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PlayerVector_back" "', argument " "1"" of type '" "std::vector< Quackle::Player > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::Player > * >(argp1);
  result = (std::vector< Quackle::Player >::value_type *) &((std::vector< Quackle::Player > const *)arg1)->back();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__Player, 0 |  0 );
  (void)swig::container_owner<swig::traits<std::vector< Quackle::Player >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PlayerVector_assign(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::Player > *arg1 = (std::vector< Quackle::Player > *) 0 ;
  std::vector< Quackle::Player >::size_type arg2 ;
  std::vector< Quackle::Player >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "PlayerVector_assign", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__Player_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PlayerVector_assign" "', argument " "1"" of type '" "std::vector< Quackle::Player > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::Player > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PlayerVector_assign" "', argument " "2"" of type '" "std::vector< Quackle::Player >::size_type""'");
  } 
  arg2 = static_cast< std::vector< Quackle::Player >::size_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_Quackle__Player,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PlayerVector_assign" "', argument " "3"" of type '" "std::vector< Quackle::Player >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PlayerVector_assign" "', argument " "3"" of type '" "std::vector< Quackle::Player >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Quackle::Player >::value_type * >(argp3);
  (arg1)->assign(arg2,(std::vector< Quackle::Player >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PlayerVector_resize__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Quackle::Player > *arg1 = (std::vector< Quackle::Player > *) 0 ;
  std::vector< Quackle::Player >::size_type arg2 ;
  std::vector< Quackle::Player >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__Player_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PlayerVector_resize" "', argument " "1"" of type '" "std::vector< Quackle::Player > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::Player > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PlayerVector_resize" "', argument " "2"" of type '" "std::vector< Quackle::Player >::size_type""'");
  } 
  arg2 = static_cast< std::vector< Quackle::Player >::size_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_Quackle__Player,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PlayerVector_resize" "', argument " "3"" of type '" "std::vector< Quackle::Player >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PlayerVector_resize" "', argument " "3"" of type '" "std::vector< Quackle::Player >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Quackle::Player >::value_type * >(argp3);
  (arg1)->resize(arg2,(std::vector< Quackle::Player >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PlayerVector_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "PlayerVector_resize", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Quackle::Player,std::allocator< Quackle::Player > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_PlayerVector_resize__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Quackle::Player,std::allocator< Quackle::Player > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_Quackle__Player, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_PlayerVector_resize__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'PlayerVector_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Quackle::Player >::resize(std::vector< Quackle::Player >::size_type)\n"
    "    std::vector< Quackle::Player >::resize(std::vector< Quackle::Player >::size_type,std::vector< Quackle::Player >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PlayerVector_insert__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Quackle::Player > *arg1 = (std::vector< Quackle::Player > *) 0 ;
  std::vector< Quackle::Player >::iterator arg2 ;
  std::vector< Quackle::Player >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  std::vector< Quackle::Player >::iterator result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__Player_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PlayerVector_insert" "', argument " "1"" of type '" "std::vector< Quackle::Player > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::Player > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "PlayerVector_insert" "', argument " "2"" of type '" "std::vector< Quackle::Player >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< Quackle::Player >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< Quackle::Player >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "PlayerVector_insert" "', argument " "2"" of type '" "std::vector< Quackle::Player >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_Quackle__Player,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PlayerVector_insert" "', argument " "3"" of type '" "std::vector< Quackle::Player >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PlayerVector_insert" "', argument " "3"" of type '" "std::vector< Quackle::Player >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Quackle::Player >::value_type * >(argp3);
  result = std_vector_Sl_Quackle_Player_Sg__insert__SWIG_0(arg1,SWIG_STD_MOVE(arg2),(Quackle::Player const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Quackle::Player >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PlayerVector_insert__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Quackle::Player > *arg1 = (std::vector< Quackle::Player > *) 0 ;
  std::vector< Quackle::Player >::iterator arg2 ;
  std::vector< Quackle::Player >::size_type arg3 ;
  std::vector< Quackle::Player >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__Player_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PlayerVector_insert" "', argument " "1"" of type '" "std::vector< Quackle::Player > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::Player > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "PlayerVector_insert" "', argument " "2"" of type '" "std::vector< Quackle::Player >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< Quackle::Player >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< Quackle::Player >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "PlayerVector_insert" "', argument " "2"" of type '" "std::vector< Quackle::Player >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PlayerVector_insert" "', argument " "3"" of type '" "std::vector< Quackle::Player >::size_type""'");
  } 
  arg3 = static_cast< std::vector< Quackle::Player >::size_type >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_Quackle__Player,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "PlayerVector_insert" "', argument " "4"" of type '" "std::vector< Quackle::Player >::value_type const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PlayerVector_insert" "', argument " "4"" of type '" "std::vector< Quackle::Player >::value_type const &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< Quackle::Player >::value_type * >(argp4);
  std_vector_Sl_Quackle_Player_Sg__insert__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(Quackle::Player const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PlayerVector_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "PlayerVector_insert", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Quackle::Player,std::allocator< Quackle::Player > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< Quackle::Player >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_Quackle__Player, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_PlayerVector_insert__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Quackle::Player,std::allocator< Quackle::Player > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< Quackle::Player >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_Quackle__Player, SWIG_POINTER_NO_NULL | 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_PlayerVector_insert__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'PlayerVector_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Quackle::Player >::insert(std::vector< Quackle::Player >::iterator,std::vector< Quackle::Player >::value_type const &)\n"
    "    std::vector< Quackle::Player >::insert(std::vector< Quackle::Player >::iterator,std::vector< Quackle::Player >::size_type,std::vector< Quackle::Player >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PlayerVector_reserve(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::Player > *arg1 = (std::vector< Quackle::Player > *) 0 ;
  std::vector< Quackle::Player >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "PlayerVector_reserve", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__Player_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PlayerVector_reserve" "', argument " "1"" of type '" "std::vector< Quackle::Player > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::Player > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PlayerVector_reserve" "', argument " "2"" of type '" "std::vector< Quackle::Player >::size_type""'");
  } 
  arg2 = static_cast< std::vector< Quackle::Player >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PlayerVector_capacity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::Player > *arg1 = (std::vector< Quackle::Player > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Quackle::Player >::size_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__Player_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PlayerVector_capacity" "', argument " "1"" of type '" "std::vector< Quackle::Player > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::Player > * >(argp1);
  result = ((std::vector< Quackle::Player > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_PlayerVector(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::Player > *arg1 = (std::vector< Quackle::Player > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__Player_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PlayerVector" "', argument " "1"" of type '" "std::vector< Quackle::Player > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::Player > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *PlayerVector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_Quackle__Player_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *PlayerVector_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_ProbableRackList_iterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::ProbableRack > *arg1 = (std::vector< Quackle::ProbableRack > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &swig_obj[0];
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__ProbableRack_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProbableRackList_iterator" "', argument " "1"" of type '" "std::vector< Quackle::ProbableRack > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::ProbableRack > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_Quackle_ProbableRack_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProbableRackList___nonzero__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::ProbableRack > *arg1 = (std::vector< Quackle::ProbableRack > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__ProbableRack_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProbableRackList___nonzero__" "', argument " "1"" of type '" "std::vector< Quackle::ProbableRack > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::ProbableRack > * >(argp1);
  result = (bool)std_vector_Sl_Quackle_ProbableRack_Sg____nonzero__((std::vector< Quackle::ProbableRack > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProbableRackList___bool__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::ProbableRack > *arg1 = (std::vector< Quackle::ProbableRack > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__ProbableRack_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProbableRackList___bool__" "', argument " "1"" of type '" "std::vector< Quackle::ProbableRack > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::ProbableRack > * >(argp1);
  result = (bool)std_vector_Sl_Quackle_ProbableRack_Sg____bool__((std::vector< Quackle::ProbableRack > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProbableRackList___len__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::ProbableRack > *arg1 = (std::vector< Quackle::ProbableRack > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Quackle::ProbableRack >::size_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__ProbableRack_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProbableRackList___len__" "', argument " "1"" of type '" "std::vector< Quackle::ProbableRack > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::ProbableRack > * >(argp1);
  result = std_vector_Sl_Quackle_ProbableRack_Sg____len__((std::vector< Quackle::ProbableRack > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProbableRackList___getslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::ProbableRack > *arg1 = (std::vector< Quackle::ProbableRack > *) 0 ;
  std::vector< Quackle::ProbableRack >::difference_type arg2 ;
  std::vector< Quackle::ProbableRack >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  std::vector< Quackle::ProbableRack,std::allocator< Quackle::ProbableRack > > *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ProbableRackList___getslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__ProbableRack_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProbableRackList___getslice__" "', argument " "1"" of type '" "std::vector< Quackle::ProbableRack > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::ProbableRack > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ProbableRackList___getslice__" "', argument " "2"" of type '" "std::vector< Quackle::ProbableRack >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Quackle::ProbableRack >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ProbableRackList___getslice__" "', argument " "3"" of type '" "std::vector< Quackle::ProbableRack >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< Quackle::ProbableRack >::difference_type >(val3);
  try {
    result = (std::vector< Quackle::ProbableRack,std::allocator< Quackle::ProbableRack > > *)std_vector_Sl_Quackle_ProbableRack_Sg____getslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Quackle__ProbableRack_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProbableRackList___setslice____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Quackle::ProbableRack > *arg1 = (std::vector< Quackle::ProbableRack > *) 0 ;
  std::vector< Quackle::ProbableRack >::difference_type arg2 ;
  std::vector< Quackle::ProbableRack >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__ProbableRack_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProbableRackList___setslice__" "', argument " "1"" of type '" "std::vector< Quackle::ProbableRack > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::ProbableRack > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ProbableRackList___setslice__" "', argument " "2"" of type '" "std::vector< Quackle::ProbableRack >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Quackle::ProbableRack >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ProbableRackList___setslice__" "', argument " "3"" of type '" "std::vector< Quackle::ProbableRack >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< Quackle::ProbableRack >::difference_type >(val3);
  try {
    std_vector_Sl_Quackle_ProbableRack_Sg____setslice____SWIG_0(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProbableRackList___setslice____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Quackle::ProbableRack > *arg1 = (std::vector< Quackle::ProbableRack > *) 0 ;
  std::vector< Quackle::ProbableRack >::difference_type arg2 ;
  std::vector< Quackle::ProbableRack >::difference_type arg3 ;
  std::vector< Quackle::ProbableRack,std::allocator< Quackle::ProbableRack > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__ProbableRack_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProbableRackList___setslice__" "', argument " "1"" of type '" "std::vector< Quackle::ProbableRack > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::ProbableRack > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ProbableRackList___setslice__" "', argument " "2"" of type '" "std::vector< Quackle::ProbableRack >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Quackle::ProbableRack >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ProbableRackList___setslice__" "', argument " "3"" of type '" "std::vector< Quackle::ProbableRack >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< Quackle::ProbableRack >::difference_type >(val3);
  {
    std::vector< Quackle::ProbableRack,std::allocator< Quackle::ProbableRack > > *ptr = (std::vector< Quackle::ProbableRack,std::allocator< Quackle::ProbableRack > > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ProbableRackList___setslice__" "', argument " "4"" of type '" "std::vector< Quackle::ProbableRack,std::allocator< Quackle::ProbableRack > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ProbableRackList___setslice__" "', argument " "4"" of type '" "std::vector< Quackle::ProbableRack,std::allocator< Quackle::ProbableRack > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_Quackle_ProbableRack_Sg____setslice____SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(std::vector< Quackle::ProbableRack,std::allocator< Quackle::ProbableRack > > const &)*arg4);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProbableRackList___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ProbableRackList___setslice__", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Quackle::ProbableRack,std::allocator< Quackle::ProbableRack > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ProbableRackList___setslice____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Quackle::ProbableRack,std::allocator< Quackle::ProbableRack > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< Quackle::ProbableRack,std::allocator< Quackle::ProbableRack > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_ProbableRackList___setslice____SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ProbableRackList___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Quackle::ProbableRack >::__setslice__(std::vector< Quackle::ProbableRack >::difference_type,std::vector< Quackle::ProbableRack >::difference_type)\n"
    "    std::vector< Quackle::ProbableRack >::__setslice__(std::vector< Quackle::ProbableRack >::difference_type,std::vector< Quackle::ProbableRack >::difference_type,std::vector< Quackle::ProbableRack,std::allocator< Quackle::ProbableRack > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ProbableRackList___delslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::ProbableRack > *arg1 = (std::vector< Quackle::ProbableRack > *) 0 ;
  std::vector< Quackle::ProbableRack >::difference_type arg2 ;
  std::vector< Quackle::ProbableRack >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ProbableRackList___delslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__ProbableRack_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProbableRackList___delslice__" "', argument " "1"" of type '" "std::vector< Quackle::ProbableRack > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::ProbableRack > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ProbableRackList___delslice__" "', argument " "2"" of type '" "std::vector< Quackle::ProbableRack >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Quackle::ProbableRack >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ProbableRackList___delslice__" "', argument " "3"" of type '" "std::vector< Quackle::ProbableRack >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< Quackle::ProbableRack >::difference_type >(val3);
  try {
    std_vector_Sl_Quackle_ProbableRack_Sg____delslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProbableRackList___delitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Quackle::ProbableRack > *arg1 = (std::vector< Quackle::ProbableRack > *) 0 ;
  std::vector< Quackle::ProbableRack >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__ProbableRack_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProbableRackList___delitem__" "', argument " "1"" of type '" "std::vector< Quackle::ProbableRack > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::ProbableRack > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ProbableRackList___delitem__" "', argument " "2"" of type '" "std::vector< Quackle::ProbableRack >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Quackle::ProbableRack >::difference_type >(val2);
  try {
    std_vector_Sl_Quackle_ProbableRack_Sg____delitem____SWIG_0(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProbableRackList___getitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Quackle::ProbableRack > *arg1 = (std::vector< Quackle::ProbableRack > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< Quackle::ProbableRack,std::allocator< Quackle::ProbableRack > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__ProbableRack_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProbableRackList___getitem__" "', argument " "1"" of type '" "std::vector< Quackle::ProbableRack > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::ProbableRack > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ProbableRackList___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  try {
    result = (std::vector< Quackle::ProbableRack,std::allocator< Quackle::ProbableRack > > *)std_vector_Sl_Quackle_ProbableRack_Sg____getitem____SWIG_0(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Quackle__ProbableRack_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProbableRackList___setitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Quackle::ProbableRack > *arg1 = (std::vector< Quackle::ProbableRack > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< Quackle::ProbableRack,std::allocator< Quackle::ProbableRack > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__ProbableRack_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProbableRackList___setitem__" "', argument " "1"" of type '" "std::vector< Quackle::ProbableRack > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::ProbableRack > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ProbableRackList___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  {
    std::vector< Quackle::ProbableRack,std::allocator< Quackle::ProbableRack > > *ptr = (std::vector< Quackle::ProbableRack,std::allocator< Quackle::ProbableRack > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ProbableRackList___setitem__" "', argument " "3"" of type '" "std::vector< Quackle::ProbableRack,std::allocator< Quackle::ProbableRack > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ProbableRackList___setitem__" "', argument " "3"" of type '" "std::vector< Quackle::ProbableRack,std::allocator< Quackle::ProbableRack > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_Quackle_ProbableRack_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< Quackle::ProbableRack,std::allocator< Quackle::ProbableRack > > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProbableRackList___setitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Quackle::ProbableRack > *arg1 = (std::vector< Quackle::ProbableRack > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__ProbableRack_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProbableRackList___setitem__" "', argument " "1"" of type '" "std::vector< Quackle::ProbableRack > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::ProbableRack > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ProbableRackList___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  try {
    std_vector_Sl_Quackle_ProbableRack_Sg____setitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProbableRackList___delitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Quackle::ProbableRack > *arg1 = (std::vector< Quackle::ProbableRack > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__ProbableRack_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProbableRackList___delitem__" "', argument " "1"" of type '" "std::vector< Quackle::ProbableRack > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::ProbableRack > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ProbableRackList___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  try {
    std_vector_Sl_Quackle_ProbableRack_Sg____delitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProbableRackList___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ProbableRackList___delitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Quackle::ProbableRack,std::allocator< Quackle::ProbableRack > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_ProbableRackList___delitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Quackle::ProbableRack,std::allocator< Quackle::ProbableRack > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ProbableRackList___delitem____SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ProbableRackList___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Quackle::ProbableRack >::__delitem__(std::vector< Quackle::ProbableRack >::difference_type)\n"
    "    std::vector< Quackle::ProbableRack >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ProbableRackList___getitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Quackle::ProbableRack > *arg1 = (std::vector< Quackle::ProbableRack > *) 0 ;
  std::vector< Quackle::ProbableRack >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< Quackle::ProbableRack >::value_type *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__ProbableRack_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProbableRackList___getitem__" "', argument " "1"" of type '" "std::vector< Quackle::ProbableRack > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::ProbableRack > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ProbableRackList___getitem__" "', argument " "2"" of type '" "std::vector< Quackle::ProbableRack >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Quackle::ProbableRack >::difference_type >(val2);
  try {
    result = (std::vector< Quackle::ProbableRack >::value_type *) &std_vector_Sl_Quackle_ProbableRack_Sg____getitem____SWIG_1((std::vector< Quackle::ProbableRack > const *)arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__ProbableRack, 0 |  0 );
  (void)swig::container_owner<swig::traits<std::vector< Quackle::ProbableRack >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProbableRackList___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ProbableRackList___getitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Quackle::ProbableRack,std::allocator< Quackle::ProbableRack > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_ProbableRackList___getitem____SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Quackle::ProbableRack,std::allocator< Quackle::ProbableRack > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ProbableRackList___getitem____SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ProbableRackList___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Quackle::ProbableRack >::__getitem__(PySliceObject *)\n"
    "    std::vector< Quackle::ProbableRack >::__getitem__(std::vector< Quackle::ProbableRack >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ProbableRackList___setitem____SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Quackle::ProbableRack > *arg1 = (std::vector< Quackle::ProbableRack > *) 0 ;
  std::vector< Quackle::ProbableRack >::difference_type arg2 ;
  std::vector< Quackle::ProbableRack >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__ProbableRack_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProbableRackList___setitem__" "', argument " "1"" of type '" "std::vector< Quackle::ProbableRack > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::ProbableRack > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ProbableRackList___setitem__" "', argument " "2"" of type '" "std::vector< Quackle::ProbableRack >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Quackle::ProbableRack >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_Quackle__ProbableRack,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ProbableRackList___setitem__" "', argument " "3"" of type '" "std::vector< Quackle::ProbableRack >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ProbableRackList___setitem__" "', argument " "3"" of type '" "std::vector< Quackle::ProbableRack >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Quackle::ProbableRack >::value_type * >(argp3);
  try {
    std_vector_Sl_Quackle_ProbableRack_Sg____setitem____SWIG_2(arg1,SWIG_STD_MOVE(arg2),(Quackle::ProbableRack const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProbableRackList___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ProbableRackList___setitem__", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Quackle::ProbableRack,std::allocator< Quackle::ProbableRack > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_ProbableRackList___setitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Quackle::ProbableRack,std::allocator< Quackle::ProbableRack > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< Quackle::ProbableRack,std::allocator< Quackle::ProbableRack > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ProbableRackList___setitem____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Quackle::ProbableRack,std::allocator< Quackle::ProbableRack > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_Quackle__ProbableRack, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ProbableRackList___setitem____SWIG_2(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ProbableRackList___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Quackle::ProbableRack >::__setitem__(PySliceObject *,std::vector< Quackle::ProbableRack,std::allocator< Quackle::ProbableRack > > const &)\n"
    "    std::vector< Quackle::ProbableRack >::__setitem__(PySliceObject *)\n"
    "    std::vector< Quackle::ProbableRack >::__setitem__(std::vector< Quackle::ProbableRack >::difference_type,std::vector< Quackle::ProbableRack >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ProbableRackList_pop(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::ProbableRack > *arg1 = (std::vector< Quackle::ProbableRack > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Quackle::ProbableRack >::value_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__ProbableRack_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProbableRackList_pop" "', argument " "1"" of type '" "std::vector< Quackle::ProbableRack > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::ProbableRack > * >(argp1);
  try {
    result = std_vector_Sl_Quackle_ProbableRack_Sg__pop(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj((new std::vector< Quackle::ProbableRack >::value_type(result)), SWIGTYPE_p_Quackle__ProbableRack, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProbableRackList_append(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::ProbableRack > *arg1 = (std::vector< Quackle::ProbableRack > *) 0 ;
  std::vector< Quackle::ProbableRack >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ProbableRackList_append", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__ProbableRack_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProbableRackList_append" "', argument " "1"" of type '" "std::vector< Quackle::ProbableRack > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::ProbableRack > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__ProbableRack,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ProbableRackList_append" "', argument " "2"" of type '" "std::vector< Quackle::ProbableRack >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ProbableRackList_append" "', argument " "2"" of type '" "std::vector< Quackle::ProbableRack >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Quackle::ProbableRack >::value_type * >(argp2);
  std_vector_Sl_Quackle_ProbableRack_Sg__append(arg1,(Quackle::ProbableRack const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ProbableRackList__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::vector< Quackle::ProbableRack > *result = 0 ;
  
  (void)self;
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (std::vector< Quackle::ProbableRack > *)new std::vector< Quackle::ProbableRack >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Quackle__ProbableRack_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ProbableRackList__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Quackle::ProbableRack > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::vector< Quackle::ProbableRack > *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector< Quackle::ProbableRack,std::allocator< Quackle::ProbableRack > > *ptr = (std::vector< Quackle::ProbableRack,std::allocator< Quackle::ProbableRack > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ProbableRackList" "', argument " "1"" of type '" "std::vector< Quackle::ProbableRack > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ProbableRackList" "', argument " "1"" of type '" "std::vector< Quackle::ProbableRack > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< Quackle::ProbableRack > *)new std::vector< Quackle::ProbableRack >((std::vector< Quackle::ProbableRack > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Quackle__ProbableRack_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProbableRackList_empty(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::ProbableRack > *arg1 = (std::vector< Quackle::ProbableRack > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__ProbableRack_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProbableRackList_empty" "', argument " "1"" of type '" "std::vector< Quackle::ProbableRack > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::ProbableRack > * >(argp1);
  result = (bool)((std::vector< Quackle::ProbableRack > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProbableRackList_size(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::ProbableRack > *arg1 = (std::vector< Quackle::ProbableRack > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Quackle::ProbableRack >::size_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__ProbableRack_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProbableRackList_size" "', argument " "1"" of type '" "std::vector< Quackle::ProbableRack > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::ProbableRack > * >(argp1);
  result = ((std::vector< Quackle::ProbableRack > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProbableRackList_swap(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::ProbableRack > *arg1 = (std::vector< Quackle::ProbableRack > *) 0 ;
  std::vector< Quackle::ProbableRack > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ProbableRackList_swap", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__ProbableRack_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProbableRackList_swap" "', argument " "1"" of type '" "std::vector< Quackle::ProbableRack > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::ProbableRack > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_Quackle__ProbableRack_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ProbableRackList_swap" "', argument " "2"" of type '" "std::vector< Quackle::ProbableRack > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ProbableRackList_swap" "', argument " "2"" of type '" "std::vector< Quackle::ProbableRack > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Quackle::ProbableRack > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProbableRackList_begin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::ProbableRack > *arg1 = (std::vector< Quackle::ProbableRack > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Quackle::ProbableRack >::iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__ProbableRack_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProbableRackList_begin" "', argument " "1"" of type '" "std::vector< Quackle::ProbableRack > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::ProbableRack > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Quackle::ProbableRack >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProbableRackList_end(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::ProbableRack > *arg1 = (std::vector< Quackle::ProbableRack > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Quackle::ProbableRack >::iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__ProbableRack_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProbableRackList_end" "', argument " "1"" of type '" "std::vector< Quackle::ProbableRack > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::ProbableRack > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Quackle::ProbableRack >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProbableRackList_rbegin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::ProbableRack > *arg1 = (std::vector< Quackle::ProbableRack > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Quackle::ProbableRack >::reverse_iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__ProbableRack_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProbableRackList_rbegin" "', argument " "1"" of type '" "std::vector< Quackle::ProbableRack > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::ProbableRack > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Quackle::ProbableRack >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProbableRackList_rend(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::ProbableRack > *arg1 = (std::vector< Quackle::ProbableRack > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Quackle::ProbableRack >::reverse_iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__ProbableRack_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProbableRackList_rend" "', argument " "1"" of type '" "std::vector< Quackle::ProbableRack > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::ProbableRack > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Quackle::ProbableRack >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProbableRackList_clear(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::ProbableRack > *arg1 = (std::vector< Quackle::ProbableRack > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__ProbableRack_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProbableRackList_clear" "', argument " "1"" of type '" "std::vector< Quackle::ProbableRack > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::ProbableRack > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProbableRackList_get_allocator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::ProbableRack > *arg1 = (std::vector< Quackle::ProbableRack > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::allocator< Quackle::ProbableRack > > result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__ProbableRack_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProbableRackList_get_allocator" "', argument " "1"" of type '" "std::vector< Quackle::ProbableRack > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::ProbableRack > * >(argp1);
  result = ((std::vector< Quackle::ProbableRack > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< Quackle::ProbableRack >::allocator_type(result)), SWIGTYPE_p_std__allocatorT_Quackle__ProbableRack_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ProbableRackList__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Quackle::ProbableRack >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< Quackle::ProbableRack > *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ProbableRackList" "', argument " "1"" of type '" "std::vector< Quackle::ProbableRack >::size_type""'");
  } 
  arg1 = static_cast< std::vector< Quackle::ProbableRack >::size_type >(val1);
  result = (std::vector< Quackle::ProbableRack > *)new std::vector< Quackle::ProbableRack >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Quackle__ProbableRack_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProbableRackList_pop_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::ProbableRack > *arg1 = (std::vector< Quackle::ProbableRack > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__ProbableRack_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProbableRackList_pop_back" "', argument " "1"" of type '" "std::vector< Quackle::ProbableRack > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::ProbableRack > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProbableRackList_resize__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Quackle::ProbableRack > *arg1 = (std::vector< Quackle::ProbableRack > *) 0 ;
  std::vector< Quackle::ProbableRack >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__ProbableRack_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProbableRackList_resize" "', argument " "1"" of type '" "std::vector< Quackle::ProbableRack > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::ProbableRack > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ProbableRackList_resize" "', argument " "2"" of type '" "std::vector< Quackle::ProbableRack >::size_type""'");
  } 
  arg2 = static_cast< std::vector< Quackle::ProbableRack >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProbableRackList_erase__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Quackle::ProbableRack > *arg1 = (std::vector< Quackle::ProbableRack > *) 0 ;
  std::vector< Quackle::ProbableRack >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< Quackle::ProbableRack >::iterator result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__ProbableRack_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProbableRackList_erase" "', argument " "1"" of type '" "std::vector< Quackle::ProbableRack > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::ProbableRack > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ProbableRackList_erase" "', argument " "2"" of type '" "std::vector< Quackle::ProbableRack >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< Quackle::ProbableRack >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< Quackle::ProbableRack >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ProbableRackList_erase" "', argument " "2"" of type '" "std::vector< Quackle::ProbableRack >::iterator""'");
    }
  }
  result = std_vector_Sl_Quackle_ProbableRack_Sg__erase__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Quackle::ProbableRack >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProbableRackList_erase__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Quackle::ProbableRack > *arg1 = (std::vector< Quackle::ProbableRack > *) 0 ;
  std::vector< Quackle::ProbableRack >::iterator arg2 ;
  std::vector< Quackle::ProbableRack >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  std::vector< Quackle::ProbableRack >::iterator result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__ProbableRack_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProbableRackList_erase" "', argument " "1"" of type '" "std::vector< Quackle::ProbableRack > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::ProbableRack > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ProbableRackList_erase" "', argument " "2"" of type '" "std::vector< Quackle::ProbableRack >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< Quackle::ProbableRack >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< Quackle::ProbableRack >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ProbableRackList_erase" "', argument " "2"" of type '" "std::vector< Quackle::ProbableRack >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ProbableRackList_erase" "', argument " "3"" of type '" "std::vector< Quackle::ProbableRack >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< Quackle::ProbableRack >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< Quackle::ProbableRack >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ProbableRackList_erase" "', argument " "3"" of type '" "std::vector< Quackle::ProbableRack >::iterator""'");
    }
  }
  result = std_vector_Sl_Quackle_ProbableRack_Sg__erase__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Quackle::ProbableRack >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProbableRackList_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ProbableRackList_erase", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Quackle::ProbableRack,std::allocator< Quackle::ProbableRack > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< Quackle::ProbableRack >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_ProbableRackList_erase__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Quackle::ProbableRack,std::allocator< Quackle::ProbableRack > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< Quackle::ProbableRack >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< Quackle::ProbableRack >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_ProbableRackList_erase__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ProbableRackList_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Quackle::ProbableRack >::erase(std::vector< Quackle::ProbableRack >::iterator)\n"
    "    std::vector< Quackle::ProbableRack >::erase(std::vector< Quackle::ProbableRack >::iterator,std::vector< Quackle::ProbableRack >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_ProbableRackList__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Quackle::ProbableRack >::size_type arg1 ;
  std::vector< Quackle::ProbableRack >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::vector< Quackle::ProbableRack > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ProbableRackList" "', argument " "1"" of type '" "std::vector< Quackle::ProbableRack >::size_type""'");
  } 
  arg1 = static_cast< std::vector< Quackle::ProbableRack >::size_type >(val1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__ProbableRack,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ProbableRackList" "', argument " "2"" of type '" "std::vector< Quackle::ProbableRack >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ProbableRackList" "', argument " "2"" of type '" "std::vector< Quackle::ProbableRack >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Quackle::ProbableRack >::value_type * >(argp2);
  result = (std::vector< Quackle::ProbableRack > *)new std::vector< Quackle::ProbableRack >(arg1,(std::vector< Quackle::ProbableRack >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Quackle__ProbableRack_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ProbableRackList(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_ProbableRackList", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_ProbableRackList__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_ProbableRackList__SWIG_2(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Quackle::ProbableRack,std::allocator< Quackle::ProbableRack > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ProbableRackList__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Quackle__ProbableRack, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_ProbableRackList__SWIG_3(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_ProbableRackList'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Quackle::ProbableRack >::vector()\n"
    "    std::vector< Quackle::ProbableRack >::vector(std::vector< Quackle::ProbableRack > const &)\n"
    "    std::vector< Quackle::ProbableRack >::vector(std::vector< Quackle::ProbableRack >::size_type)\n"
    "    std::vector< Quackle::ProbableRack >::vector(std::vector< Quackle::ProbableRack >::size_type,std::vector< Quackle::ProbableRack >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ProbableRackList_push_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::ProbableRack > *arg1 = (std::vector< Quackle::ProbableRack > *) 0 ;
  std::vector< Quackle::ProbableRack >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ProbableRackList_push_back", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__ProbableRack_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProbableRackList_push_back" "', argument " "1"" of type '" "std::vector< Quackle::ProbableRack > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::ProbableRack > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__ProbableRack,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ProbableRackList_push_back" "', argument " "2"" of type '" "std::vector< Quackle::ProbableRack >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ProbableRackList_push_back" "', argument " "2"" of type '" "std::vector< Quackle::ProbableRack >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Quackle::ProbableRack >::value_type * >(argp2);
  (arg1)->push_back((std::vector< Quackle::ProbableRack >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProbableRackList_front(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::ProbableRack > *arg1 = (std::vector< Quackle::ProbableRack > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Quackle::ProbableRack >::value_type *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__ProbableRack_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProbableRackList_front" "', argument " "1"" of type '" "std::vector< Quackle::ProbableRack > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::ProbableRack > * >(argp1);
  result = (std::vector< Quackle::ProbableRack >::value_type *) &((std::vector< Quackle::ProbableRack > const *)arg1)->front();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__ProbableRack, 0 |  0 );
  (void)swig::container_owner<swig::traits<std::vector< Quackle::ProbableRack >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProbableRackList_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::ProbableRack > *arg1 = (std::vector< Quackle::ProbableRack > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Quackle::ProbableRack >::value_type *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__ProbableRack_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProbableRackList_back" "', argument " "1"" of type '" "std::vector< Quackle::ProbableRack > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::ProbableRack > * >(argp1);
  result = (std::vector< Quackle::ProbableRack >::value_type *) &((std::vector< Quackle::ProbableRack > const *)arg1)->back();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__ProbableRack, 0 |  0 );
  (void)swig::container_owner<swig::traits<std::vector< Quackle::ProbableRack >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProbableRackList_assign(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::ProbableRack > *arg1 = (std::vector< Quackle::ProbableRack > *) 0 ;
  std::vector< Quackle::ProbableRack >::size_type arg2 ;
  std::vector< Quackle::ProbableRack >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ProbableRackList_assign", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__ProbableRack_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProbableRackList_assign" "', argument " "1"" of type '" "std::vector< Quackle::ProbableRack > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::ProbableRack > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ProbableRackList_assign" "', argument " "2"" of type '" "std::vector< Quackle::ProbableRack >::size_type""'");
  } 
  arg2 = static_cast< std::vector< Quackle::ProbableRack >::size_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_Quackle__ProbableRack,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ProbableRackList_assign" "', argument " "3"" of type '" "std::vector< Quackle::ProbableRack >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ProbableRackList_assign" "', argument " "3"" of type '" "std::vector< Quackle::ProbableRack >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Quackle::ProbableRack >::value_type * >(argp3);
  (arg1)->assign(arg2,(std::vector< Quackle::ProbableRack >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProbableRackList_resize__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Quackle::ProbableRack > *arg1 = (std::vector< Quackle::ProbableRack > *) 0 ;
  std::vector< Quackle::ProbableRack >::size_type arg2 ;
  std::vector< Quackle::ProbableRack >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__ProbableRack_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProbableRackList_resize" "', argument " "1"" of type '" "std::vector< Quackle::ProbableRack > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::ProbableRack > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ProbableRackList_resize" "', argument " "2"" of type '" "std::vector< Quackle::ProbableRack >::size_type""'");
  } 
  arg2 = static_cast< std::vector< Quackle::ProbableRack >::size_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_Quackle__ProbableRack,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ProbableRackList_resize" "', argument " "3"" of type '" "std::vector< Quackle::ProbableRack >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ProbableRackList_resize" "', argument " "3"" of type '" "std::vector< Quackle::ProbableRack >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Quackle::ProbableRack >::value_type * >(argp3);
  (arg1)->resize(arg2,(std::vector< Quackle::ProbableRack >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProbableRackList_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ProbableRackList_resize", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Quackle::ProbableRack,std::allocator< Quackle::ProbableRack > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ProbableRackList_resize__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Quackle::ProbableRack,std::allocator< Quackle::ProbableRack > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_Quackle__ProbableRack, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ProbableRackList_resize__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ProbableRackList_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Quackle::ProbableRack >::resize(std::vector< Quackle::ProbableRack >::size_type)\n"
    "    std::vector< Quackle::ProbableRack >::resize(std::vector< Quackle::ProbableRack >::size_type,std::vector< Quackle::ProbableRack >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ProbableRackList_insert__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Quackle::ProbableRack > *arg1 = (std::vector< Quackle::ProbableRack > *) 0 ;
  std::vector< Quackle::ProbableRack >::iterator arg2 ;
  std::vector< Quackle::ProbableRack >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  std::vector< Quackle::ProbableRack >::iterator result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__ProbableRack_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProbableRackList_insert" "', argument " "1"" of type '" "std::vector< Quackle::ProbableRack > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::ProbableRack > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ProbableRackList_insert" "', argument " "2"" of type '" "std::vector< Quackle::ProbableRack >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< Quackle::ProbableRack >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< Quackle::ProbableRack >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ProbableRackList_insert" "', argument " "2"" of type '" "std::vector< Quackle::ProbableRack >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_Quackle__ProbableRack,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ProbableRackList_insert" "', argument " "3"" of type '" "std::vector< Quackle::ProbableRack >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ProbableRackList_insert" "', argument " "3"" of type '" "std::vector< Quackle::ProbableRack >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Quackle::ProbableRack >::value_type * >(argp3);
  result = std_vector_Sl_Quackle_ProbableRack_Sg__insert__SWIG_0(arg1,SWIG_STD_MOVE(arg2),(Quackle::ProbableRack const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Quackle::ProbableRack >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProbableRackList_insert__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Quackle::ProbableRack > *arg1 = (std::vector< Quackle::ProbableRack > *) 0 ;
  std::vector< Quackle::ProbableRack >::iterator arg2 ;
  std::vector< Quackle::ProbableRack >::size_type arg3 ;
  std::vector< Quackle::ProbableRack >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__ProbableRack_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProbableRackList_insert" "', argument " "1"" of type '" "std::vector< Quackle::ProbableRack > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::ProbableRack > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ProbableRackList_insert" "', argument " "2"" of type '" "std::vector< Quackle::ProbableRack >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< Quackle::ProbableRack >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< Quackle::ProbableRack >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ProbableRackList_insert" "', argument " "2"" of type '" "std::vector< Quackle::ProbableRack >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ProbableRackList_insert" "', argument " "3"" of type '" "std::vector< Quackle::ProbableRack >::size_type""'");
  } 
  arg3 = static_cast< std::vector< Quackle::ProbableRack >::size_type >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_Quackle__ProbableRack,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ProbableRackList_insert" "', argument " "4"" of type '" "std::vector< Quackle::ProbableRack >::value_type const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ProbableRackList_insert" "', argument " "4"" of type '" "std::vector< Quackle::ProbableRack >::value_type const &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< Quackle::ProbableRack >::value_type * >(argp4);
  std_vector_Sl_Quackle_ProbableRack_Sg__insert__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(Quackle::ProbableRack const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProbableRackList_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ProbableRackList_insert", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Quackle::ProbableRack,std::allocator< Quackle::ProbableRack > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< Quackle::ProbableRack >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_Quackle__ProbableRack, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ProbableRackList_insert__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Quackle::ProbableRack,std::allocator< Quackle::ProbableRack > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< Quackle::ProbableRack >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_Quackle__ProbableRack, SWIG_POINTER_NO_NULL | 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_ProbableRackList_insert__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ProbableRackList_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Quackle::ProbableRack >::insert(std::vector< Quackle::ProbableRack >::iterator,std::vector< Quackle::ProbableRack >::value_type const &)\n"
    "    std::vector< Quackle::ProbableRack >::insert(std::vector< Quackle::ProbableRack >::iterator,std::vector< Quackle::ProbableRack >::size_type,std::vector< Quackle::ProbableRack >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ProbableRackList_reserve(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::ProbableRack > *arg1 = (std::vector< Quackle::ProbableRack > *) 0 ;
  std::vector< Quackle::ProbableRack >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ProbableRackList_reserve", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__ProbableRack_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProbableRackList_reserve" "', argument " "1"" of type '" "std::vector< Quackle::ProbableRack > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::ProbableRack > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ProbableRackList_reserve" "', argument " "2"" of type '" "std::vector< Quackle::ProbableRack >::size_type""'");
  } 
  arg2 = static_cast< std::vector< Quackle::ProbableRack >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProbableRackList_capacity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::ProbableRack > *arg1 = (std::vector< Quackle::ProbableRack > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Quackle::ProbableRack >::size_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__ProbableRack_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProbableRackList_capacity" "', argument " "1"" of type '" "std::vector< Quackle::ProbableRack > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::ProbableRack > * >(argp1);
  result = ((std::vector< Quackle::ProbableRack > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ProbableRackList(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::ProbableRack > *arg1 = (std::vector< Quackle::ProbableRack > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__ProbableRack_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ProbableRackList" "', argument " "1"" of type '" "std::vector< Quackle::ProbableRack > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::ProbableRack > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ProbableRackList_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_Quackle__ProbableRack_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *ProbableRackList_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_PositionList_iterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::GamePosition > *arg1 = (std::vector< Quackle::GamePosition > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &swig_obj[0];
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__GamePosition_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionList_iterator" "', argument " "1"" of type '" "std::vector< Quackle::GamePosition > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::GamePosition > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_Quackle_GamePosition_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PositionList___nonzero__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::GamePosition > *arg1 = (std::vector< Quackle::GamePosition > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__GamePosition_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionList___nonzero__" "', argument " "1"" of type '" "std::vector< Quackle::GamePosition > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::GamePosition > * >(argp1);
  result = (bool)std_vector_Sl_Quackle_GamePosition_Sg____nonzero__((std::vector< Quackle::GamePosition > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PositionList___bool__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::GamePosition > *arg1 = (std::vector< Quackle::GamePosition > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__GamePosition_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionList___bool__" "', argument " "1"" of type '" "std::vector< Quackle::GamePosition > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::GamePosition > * >(argp1);
  result = (bool)std_vector_Sl_Quackle_GamePosition_Sg____bool__((std::vector< Quackle::GamePosition > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PositionList___len__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::GamePosition > *arg1 = (std::vector< Quackle::GamePosition > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Quackle::GamePosition >::size_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__GamePosition_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionList___len__" "', argument " "1"" of type '" "std::vector< Quackle::GamePosition > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::GamePosition > * >(argp1);
  result = std_vector_Sl_Quackle_GamePosition_Sg____len__((std::vector< Quackle::GamePosition > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PositionList___getslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::GamePosition > *arg1 = (std::vector< Quackle::GamePosition > *) 0 ;
  std::vector< Quackle::GamePosition >::difference_type arg2 ;
  std::vector< Quackle::GamePosition >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  std::vector< Quackle::GamePosition,std::allocator< Quackle::GamePosition > > *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "PositionList___getslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__GamePosition_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionList___getslice__" "', argument " "1"" of type '" "std::vector< Quackle::GamePosition > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::GamePosition > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PositionList___getslice__" "', argument " "2"" of type '" "std::vector< Quackle::GamePosition >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Quackle::GamePosition >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PositionList___getslice__" "', argument " "3"" of type '" "std::vector< Quackle::GamePosition >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< Quackle::GamePosition >::difference_type >(val3);
  try {
    result = (std::vector< Quackle::GamePosition,std::allocator< Quackle::GamePosition > > *)std_vector_Sl_Quackle_GamePosition_Sg____getslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Quackle__GamePosition_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PositionList___setslice____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Quackle::GamePosition > *arg1 = (std::vector< Quackle::GamePosition > *) 0 ;
  std::vector< Quackle::GamePosition >::difference_type arg2 ;
  std::vector< Quackle::GamePosition >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__GamePosition_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionList___setslice__" "', argument " "1"" of type '" "std::vector< Quackle::GamePosition > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::GamePosition > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PositionList___setslice__" "', argument " "2"" of type '" "std::vector< Quackle::GamePosition >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Quackle::GamePosition >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PositionList___setslice__" "', argument " "3"" of type '" "std::vector< Quackle::GamePosition >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< Quackle::GamePosition >::difference_type >(val3);
  try {
    std_vector_Sl_Quackle_GamePosition_Sg____setslice____SWIG_0(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PositionList___setslice____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Quackle::GamePosition > *arg1 = (std::vector< Quackle::GamePosition > *) 0 ;
  std::vector< Quackle::GamePosition >::difference_type arg2 ;
  std::vector< Quackle::GamePosition >::difference_type arg3 ;
  std::vector< Quackle::GamePosition,std::allocator< Quackle::GamePosition > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__GamePosition_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionList___setslice__" "', argument " "1"" of type '" "std::vector< Quackle::GamePosition > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::GamePosition > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PositionList___setslice__" "', argument " "2"" of type '" "std::vector< Quackle::GamePosition >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Quackle::GamePosition >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PositionList___setslice__" "', argument " "3"" of type '" "std::vector< Quackle::GamePosition >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< Quackle::GamePosition >::difference_type >(val3);
  {
    std::vector< Quackle::GamePosition,std::allocator< Quackle::GamePosition > > *ptr = (std::vector< Quackle::GamePosition,std::allocator< Quackle::GamePosition > > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "PositionList___setslice__" "', argument " "4"" of type '" "std::vector< Quackle::GamePosition,std::allocator< Quackle::GamePosition > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PositionList___setslice__" "', argument " "4"" of type '" "std::vector< Quackle::GamePosition,std::allocator< Quackle::GamePosition > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_Quackle_GamePosition_Sg____setslice____SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(std::vector< Quackle::GamePosition,std::allocator< Quackle::GamePosition > > const &)*arg4);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PositionList___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "PositionList___setslice__", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Quackle::GamePosition,std::allocator< Quackle::GamePosition > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_PositionList___setslice____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Quackle::GamePosition,std::allocator< Quackle::GamePosition > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< Quackle::GamePosition,std::allocator< Quackle::GamePosition > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_PositionList___setslice____SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'PositionList___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Quackle::GamePosition >::__setslice__(std::vector< Quackle::GamePosition >::difference_type,std::vector< Quackle::GamePosition >::difference_type)\n"
    "    std::vector< Quackle::GamePosition >::__setslice__(std::vector< Quackle::GamePosition >::difference_type,std::vector< Quackle::GamePosition >::difference_type,std::vector< Quackle::GamePosition,std::allocator< Quackle::GamePosition > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PositionList___delslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::GamePosition > *arg1 = (std::vector< Quackle::GamePosition > *) 0 ;
  std::vector< Quackle::GamePosition >::difference_type arg2 ;
  std::vector< Quackle::GamePosition >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "PositionList___delslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__GamePosition_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionList___delslice__" "', argument " "1"" of type '" "std::vector< Quackle::GamePosition > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::GamePosition > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PositionList___delslice__" "', argument " "2"" of type '" "std::vector< Quackle::GamePosition >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Quackle::GamePosition >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PositionList___delslice__" "', argument " "3"" of type '" "std::vector< Quackle::GamePosition >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< Quackle::GamePosition >::difference_type >(val3);
  try {
    std_vector_Sl_Quackle_GamePosition_Sg____delslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PositionList___delitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Quackle::GamePosition > *arg1 = (std::vector< Quackle::GamePosition > *) 0 ;
  std::vector< Quackle::GamePosition >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__GamePosition_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionList___delitem__" "', argument " "1"" of type '" "std::vector< Quackle::GamePosition > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::GamePosition > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PositionList___delitem__" "', argument " "2"" of type '" "std::vector< Quackle::GamePosition >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Quackle::GamePosition >::difference_type >(val2);
  try {
    std_vector_Sl_Quackle_GamePosition_Sg____delitem____SWIG_0(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PositionList___getitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Quackle::GamePosition > *arg1 = (std::vector< Quackle::GamePosition > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< Quackle::GamePosition,std::allocator< Quackle::GamePosition > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__GamePosition_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionList___getitem__" "', argument " "1"" of type '" "std::vector< Quackle::GamePosition > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::GamePosition > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "PositionList___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  try {
    result = (std::vector< Quackle::GamePosition,std::allocator< Quackle::GamePosition > > *)std_vector_Sl_Quackle_GamePosition_Sg____getitem____SWIG_0(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Quackle__GamePosition_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PositionList___setitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Quackle::GamePosition > *arg1 = (std::vector< Quackle::GamePosition > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< Quackle::GamePosition,std::allocator< Quackle::GamePosition > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__GamePosition_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionList___setitem__" "', argument " "1"" of type '" "std::vector< Quackle::GamePosition > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::GamePosition > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "PositionList___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  {
    std::vector< Quackle::GamePosition,std::allocator< Quackle::GamePosition > > *ptr = (std::vector< Quackle::GamePosition,std::allocator< Quackle::GamePosition > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PositionList___setitem__" "', argument " "3"" of type '" "std::vector< Quackle::GamePosition,std::allocator< Quackle::GamePosition > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PositionList___setitem__" "', argument " "3"" of type '" "std::vector< Quackle::GamePosition,std::allocator< Quackle::GamePosition > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_Quackle_GamePosition_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< Quackle::GamePosition,std::allocator< Quackle::GamePosition > > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PositionList___setitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Quackle::GamePosition > *arg1 = (std::vector< Quackle::GamePosition > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__GamePosition_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionList___setitem__" "', argument " "1"" of type '" "std::vector< Quackle::GamePosition > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::GamePosition > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "PositionList___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  try {
    std_vector_Sl_Quackle_GamePosition_Sg____setitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PositionList___delitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Quackle::GamePosition > *arg1 = (std::vector< Quackle::GamePosition > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__GamePosition_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionList___delitem__" "', argument " "1"" of type '" "std::vector< Quackle::GamePosition > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::GamePosition > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "PositionList___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  try {
    std_vector_Sl_Quackle_GamePosition_Sg____delitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PositionList___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "PositionList___delitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Quackle::GamePosition,std::allocator< Quackle::GamePosition > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_PositionList___delitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Quackle::GamePosition,std::allocator< Quackle::GamePosition > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_PositionList___delitem____SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'PositionList___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Quackle::GamePosition >::__delitem__(std::vector< Quackle::GamePosition >::difference_type)\n"
    "    std::vector< Quackle::GamePosition >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PositionList___getitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Quackle::GamePosition > *arg1 = (std::vector< Quackle::GamePosition > *) 0 ;
  std::vector< Quackle::GamePosition >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< Quackle::GamePosition >::value_type *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__GamePosition_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionList___getitem__" "', argument " "1"" of type '" "std::vector< Quackle::GamePosition > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::GamePosition > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PositionList___getitem__" "', argument " "2"" of type '" "std::vector< Quackle::GamePosition >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Quackle::GamePosition >::difference_type >(val2);
  try {
    result = (std::vector< Quackle::GamePosition >::value_type *) &std_vector_Sl_Quackle_GamePosition_Sg____getitem____SWIG_1((std::vector< Quackle::GamePosition > const *)arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__GamePosition, 0 |  0 );
  (void)swig::container_owner<swig::traits<std::vector< Quackle::GamePosition >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PositionList___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "PositionList___getitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Quackle::GamePosition,std::allocator< Quackle::GamePosition > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_PositionList___getitem____SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Quackle::GamePosition,std::allocator< Quackle::GamePosition > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_PositionList___getitem____SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'PositionList___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Quackle::GamePosition >::__getitem__(PySliceObject *)\n"
    "    std::vector< Quackle::GamePosition >::__getitem__(std::vector< Quackle::GamePosition >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PositionList___setitem____SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Quackle::GamePosition > *arg1 = (std::vector< Quackle::GamePosition > *) 0 ;
  std::vector< Quackle::GamePosition >::difference_type arg2 ;
  std::vector< Quackle::GamePosition >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__GamePosition_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionList___setitem__" "', argument " "1"" of type '" "std::vector< Quackle::GamePosition > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::GamePosition > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PositionList___setitem__" "', argument " "2"" of type '" "std::vector< Quackle::GamePosition >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Quackle::GamePosition >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_Quackle__GamePosition,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PositionList___setitem__" "', argument " "3"" of type '" "std::vector< Quackle::GamePosition >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PositionList___setitem__" "', argument " "3"" of type '" "std::vector< Quackle::GamePosition >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Quackle::GamePosition >::value_type * >(argp3);
  try {
    std_vector_Sl_Quackle_GamePosition_Sg____setitem____SWIG_2(arg1,SWIG_STD_MOVE(arg2),(Quackle::GamePosition const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PositionList___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "PositionList___setitem__", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Quackle::GamePosition,std::allocator< Quackle::GamePosition > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_PositionList___setitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Quackle::GamePosition,std::allocator< Quackle::GamePosition > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< Quackle::GamePosition,std::allocator< Quackle::GamePosition > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_PositionList___setitem____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Quackle::GamePosition,std::allocator< Quackle::GamePosition > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_Quackle__GamePosition, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_PositionList___setitem____SWIG_2(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'PositionList___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Quackle::GamePosition >::__setitem__(PySliceObject *,std::vector< Quackle::GamePosition,std::allocator< Quackle::GamePosition > > const &)\n"
    "    std::vector< Quackle::GamePosition >::__setitem__(PySliceObject *)\n"
    "    std::vector< Quackle::GamePosition >::__setitem__(std::vector< Quackle::GamePosition >::difference_type,std::vector< Quackle::GamePosition >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PositionList_pop(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::GamePosition > *arg1 = (std::vector< Quackle::GamePosition > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Quackle::GamePosition >::value_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__GamePosition_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionList_pop" "', argument " "1"" of type '" "std::vector< Quackle::GamePosition > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::GamePosition > * >(argp1);
  try {
    result = std_vector_Sl_Quackle_GamePosition_Sg__pop(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj((new std::vector< Quackle::GamePosition >::value_type(result)), SWIGTYPE_p_Quackle__GamePosition, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PositionList_append(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::GamePosition > *arg1 = (std::vector< Quackle::GamePosition > *) 0 ;
  std::vector< Quackle::GamePosition >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "PositionList_append", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__GamePosition_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionList_append" "', argument " "1"" of type '" "std::vector< Quackle::GamePosition > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::GamePosition > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__GamePosition,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PositionList_append" "', argument " "2"" of type '" "std::vector< Quackle::GamePosition >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PositionList_append" "', argument " "2"" of type '" "std::vector< Quackle::GamePosition >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Quackle::GamePosition >::value_type * >(argp2);
  std_vector_Sl_Quackle_GamePosition_Sg__append(arg1,(Quackle::GamePosition const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PositionList__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::vector< Quackle::GamePosition > *result = 0 ;
  
  (void)self;
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (std::vector< Quackle::GamePosition > *)new std::vector< Quackle::GamePosition >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Quackle__GamePosition_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PositionList__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Quackle::GamePosition > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::vector< Quackle::GamePosition > *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector< Quackle::GamePosition,std::allocator< Quackle::GamePosition > > *ptr = (std::vector< Quackle::GamePosition,std::allocator< Quackle::GamePosition > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PositionList" "', argument " "1"" of type '" "std::vector< Quackle::GamePosition > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PositionList" "', argument " "1"" of type '" "std::vector< Quackle::GamePosition > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< Quackle::GamePosition > *)new std::vector< Quackle::GamePosition >((std::vector< Quackle::GamePosition > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Quackle__GamePosition_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PositionList_empty(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::GamePosition > *arg1 = (std::vector< Quackle::GamePosition > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__GamePosition_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionList_empty" "', argument " "1"" of type '" "std::vector< Quackle::GamePosition > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::GamePosition > * >(argp1);
  result = (bool)((std::vector< Quackle::GamePosition > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PositionList_size(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::GamePosition > *arg1 = (std::vector< Quackle::GamePosition > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Quackle::GamePosition >::size_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__GamePosition_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionList_size" "', argument " "1"" of type '" "std::vector< Quackle::GamePosition > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::GamePosition > * >(argp1);
  result = ((std::vector< Quackle::GamePosition > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PositionList_swap(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::GamePosition > *arg1 = (std::vector< Quackle::GamePosition > *) 0 ;
  std::vector< Quackle::GamePosition > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "PositionList_swap", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__GamePosition_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionList_swap" "', argument " "1"" of type '" "std::vector< Quackle::GamePosition > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::GamePosition > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_Quackle__GamePosition_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PositionList_swap" "', argument " "2"" of type '" "std::vector< Quackle::GamePosition > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PositionList_swap" "', argument " "2"" of type '" "std::vector< Quackle::GamePosition > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Quackle::GamePosition > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PositionList_begin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::GamePosition > *arg1 = (std::vector< Quackle::GamePosition > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Quackle::GamePosition >::iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__GamePosition_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionList_begin" "', argument " "1"" of type '" "std::vector< Quackle::GamePosition > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::GamePosition > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Quackle::GamePosition >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PositionList_end(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::GamePosition > *arg1 = (std::vector< Quackle::GamePosition > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Quackle::GamePosition >::iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__GamePosition_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionList_end" "', argument " "1"" of type '" "std::vector< Quackle::GamePosition > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::GamePosition > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Quackle::GamePosition >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PositionList_rbegin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::GamePosition > *arg1 = (std::vector< Quackle::GamePosition > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Quackle::GamePosition >::reverse_iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__GamePosition_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionList_rbegin" "', argument " "1"" of type '" "std::vector< Quackle::GamePosition > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::GamePosition > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Quackle::GamePosition >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PositionList_rend(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::GamePosition > *arg1 = (std::vector< Quackle::GamePosition > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Quackle::GamePosition >::reverse_iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__GamePosition_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionList_rend" "', argument " "1"" of type '" "std::vector< Quackle::GamePosition > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::GamePosition > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Quackle::GamePosition >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PositionList_clear(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::GamePosition > *arg1 = (std::vector< Quackle::GamePosition > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__GamePosition_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionList_clear" "', argument " "1"" of type '" "std::vector< Quackle::GamePosition > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::GamePosition > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PositionList_get_allocator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::GamePosition > *arg1 = (std::vector< Quackle::GamePosition > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::allocator< Quackle::GamePosition > > result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__GamePosition_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionList_get_allocator" "', argument " "1"" of type '" "std::vector< Quackle::GamePosition > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::GamePosition > * >(argp1);
  result = ((std::vector< Quackle::GamePosition > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< Quackle::GamePosition >::allocator_type(result)), SWIGTYPE_p_std__allocatorT_Quackle__GamePosition_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PositionList__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Quackle::GamePosition >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< Quackle::GamePosition > *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_PositionList" "', argument " "1"" of type '" "std::vector< Quackle::GamePosition >::size_type""'");
  } 
  arg1 = static_cast< std::vector< Quackle::GamePosition >::size_type >(val1);
  result = (std::vector< Quackle::GamePosition > *)new std::vector< Quackle::GamePosition >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Quackle__GamePosition_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PositionList_pop_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::GamePosition > *arg1 = (std::vector< Quackle::GamePosition > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__GamePosition_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionList_pop_back" "', argument " "1"" of type '" "std::vector< Quackle::GamePosition > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::GamePosition > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PositionList_resize__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Quackle::GamePosition > *arg1 = (std::vector< Quackle::GamePosition > *) 0 ;
  std::vector< Quackle::GamePosition >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__GamePosition_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionList_resize" "', argument " "1"" of type '" "std::vector< Quackle::GamePosition > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::GamePosition > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PositionList_resize" "', argument " "2"" of type '" "std::vector< Quackle::GamePosition >::size_type""'");
  } 
  arg2 = static_cast< std::vector< Quackle::GamePosition >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PositionList_erase__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Quackle::GamePosition > *arg1 = (std::vector< Quackle::GamePosition > *) 0 ;
  std::vector< Quackle::GamePosition >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< Quackle::GamePosition >::iterator result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__GamePosition_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionList_erase" "', argument " "1"" of type '" "std::vector< Quackle::GamePosition > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::GamePosition > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "PositionList_erase" "', argument " "2"" of type '" "std::vector< Quackle::GamePosition >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< Quackle::GamePosition >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< Quackle::GamePosition >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "PositionList_erase" "', argument " "2"" of type '" "std::vector< Quackle::GamePosition >::iterator""'");
    }
  }
  result = std_vector_Sl_Quackle_GamePosition_Sg__erase__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Quackle::GamePosition >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PositionList_erase__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Quackle::GamePosition > *arg1 = (std::vector< Quackle::GamePosition > *) 0 ;
  std::vector< Quackle::GamePosition >::iterator arg2 ;
  std::vector< Quackle::GamePosition >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  std::vector< Quackle::GamePosition >::iterator result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__GamePosition_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionList_erase" "', argument " "1"" of type '" "std::vector< Quackle::GamePosition > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::GamePosition > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "PositionList_erase" "', argument " "2"" of type '" "std::vector< Quackle::GamePosition >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< Quackle::GamePosition >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< Quackle::GamePosition >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "PositionList_erase" "', argument " "2"" of type '" "std::vector< Quackle::GamePosition >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "PositionList_erase" "', argument " "3"" of type '" "std::vector< Quackle::GamePosition >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< Quackle::GamePosition >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< Quackle::GamePosition >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "PositionList_erase" "', argument " "3"" of type '" "std::vector< Quackle::GamePosition >::iterator""'");
    }
  }
  result = std_vector_Sl_Quackle_GamePosition_Sg__erase__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Quackle::GamePosition >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PositionList_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "PositionList_erase", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Quackle::GamePosition,std::allocator< Quackle::GamePosition > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< Quackle::GamePosition >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_PositionList_erase__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Quackle::GamePosition,std::allocator< Quackle::GamePosition > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< Quackle::GamePosition >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< Quackle::GamePosition >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_PositionList_erase__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'PositionList_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Quackle::GamePosition >::erase(std::vector< Quackle::GamePosition >::iterator)\n"
    "    std::vector< Quackle::GamePosition >::erase(std::vector< Quackle::GamePosition >::iterator,std::vector< Quackle::GamePosition >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_PositionList__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Quackle::GamePosition >::size_type arg1 ;
  std::vector< Quackle::GamePosition >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::vector< Quackle::GamePosition > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_PositionList" "', argument " "1"" of type '" "std::vector< Quackle::GamePosition >::size_type""'");
  } 
  arg1 = static_cast< std::vector< Quackle::GamePosition >::size_type >(val1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__GamePosition,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_PositionList" "', argument " "2"" of type '" "std::vector< Quackle::GamePosition >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PositionList" "', argument " "2"" of type '" "std::vector< Quackle::GamePosition >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Quackle::GamePosition >::value_type * >(argp2);
  result = (std::vector< Quackle::GamePosition > *)new std::vector< Quackle::GamePosition >(arg1,(std::vector< Quackle::GamePosition >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Quackle__GamePosition_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PositionList(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_PositionList", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_PositionList__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_PositionList__SWIG_2(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Quackle::GamePosition,std::allocator< Quackle::GamePosition > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_PositionList__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Quackle__GamePosition, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_PositionList__SWIG_3(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_PositionList'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Quackle::GamePosition >::vector()\n"
    "    std::vector< Quackle::GamePosition >::vector(std::vector< Quackle::GamePosition > const &)\n"
    "    std::vector< Quackle::GamePosition >::vector(std::vector< Quackle::GamePosition >::size_type)\n"
    "    std::vector< Quackle::GamePosition >::vector(std::vector< Quackle::GamePosition >::size_type,std::vector< Quackle::GamePosition >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PositionList_push_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::GamePosition > *arg1 = (std::vector< Quackle::GamePosition > *) 0 ;
  std::vector< Quackle::GamePosition >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "PositionList_push_back", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__GamePosition_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionList_push_back" "', argument " "1"" of type '" "std::vector< Quackle::GamePosition > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::GamePosition > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__GamePosition,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PositionList_push_back" "', argument " "2"" of type '" "std::vector< Quackle::GamePosition >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PositionList_push_back" "', argument " "2"" of type '" "std::vector< Quackle::GamePosition >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Quackle::GamePosition >::value_type * >(argp2);
  (arg1)->push_back((std::vector< Quackle::GamePosition >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PositionList_front(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::GamePosition > *arg1 = (std::vector< Quackle::GamePosition > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Quackle::GamePosition >::value_type *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__GamePosition_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionList_front" "', argument " "1"" of type '" "std::vector< Quackle::GamePosition > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::GamePosition > * >(argp1);
  result = (std::vector< Quackle::GamePosition >::value_type *) &((std::vector< Quackle::GamePosition > const *)arg1)->front();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__GamePosition, 0 |  0 );
  (void)swig::container_owner<swig::traits<std::vector< Quackle::GamePosition >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PositionList_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::GamePosition > *arg1 = (std::vector< Quackle::GamePosition > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Quackle::GamePosition >::value_type *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__GamePosition_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionList_back" "', argument " "1"" of type '" "std::vector< Quackle::GamePosition > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::GamePosition > * >(argp1);
  result = (std::vector< Quackle::GamePosition >::value_type *) &((std::vector< Quackle::GamePosition > const *)arg1)->back();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__GamePosition, 0 |  0 );
  (void)swig::container_owner<swig::traits<std::vector< Quackle::GamePosition >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PositionList_assign(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::GamePosition > *arg1 = (std::vector< Quackle::GamePosition > *) 0 ;
  std::vector< Quackle::GamePosition >::size_type arg2 ;
  std::vector< Quackle::GamePosition >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "PositionList_assign", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__GamePosition_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionList_assign" "', argument " "1"" of type '" "std::vector< Quackle::GamePosition > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::GamePosition > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PositionList_assign" "', argument " "2"" of type '" "std::vector< Quackle::GamePosition >::size_type""'");
  } 
  arg2 = static_cast< std::vector< Quackle::GamePosition >::size_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_Quackle__GamePosition,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PositionList_assign" "', argument " "3"" of type '" "std::vector< Quackle::GamePosition >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PositionList_assign" "', argument " "3"" of type '" "std::vector< Quackle::GamePosition >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Quackle::GamePosition >::value_type * >(argp3);
  (arg1)->assign(arg2,(std::vector< Quackle::GamePosition >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PositionList_resize__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Quackle::GamePosition > *arg1 = (std::vector< Quackle::GamePosition > *) 0 ;
  std::vector< Quackle::GamePosition >::size_type arg2 ;
  std::vector< Quackle::GamePosition >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__GamePosition_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionList_resize" "', argument " "1"" of type '" "std::vector< Quackle::GamePosition > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::GamePosition > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PositionList_resize" "', argument " "2"" of type '" "std::vector< Quackle::GamePosition >::size_type""'");
  } 
  arg2 = static_cast< std::vector< Quackle::GamePosition >::size_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_Quackle__GamePosition,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PositionList_resize" "', argument " "3"" of type '" "std::vector< Quackle::GamePosition >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PositionList_resize" "', argument " "3"" of type '" "std::vector< Quackle::GamePosition >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Quackle::GamePosition >::value_type * >(argp3);
  (arg1)->resize(arg2,(std::vector< Quackle::GamePosition >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PositionList_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "PositionList_resize", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Quackle::GamePosition,std::allocator< Quackle::GamePosition > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_PositionList_resize__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Quackle::GamePosition,std::allocator< Quackle::GamePosition > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_Quackle__GamePosition, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_PositionList_resize__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'PositionList_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Quackle::GamePosition >::resize(std::vector< Quackle::GamePosition >::size_type)\n"
    "    std::vector< Quackle::GamePosition >::resize(std::vector< Quackle::GamePosition >::size_type,std::vector< Quackle::GamePosition >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PositionList_insert__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Quackle::GamePosition > *arg1 = (std::vector< Quackle::GamePosition > *) 0 ;
  std::vector< Quackle::GamePosition >::iterator arg2 ;
  std::vector< Quackle::GamePosition >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  std::vector< Quackle::GamePosition >::iterator result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__GamePosition_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionList_insert" "', argument " "1"" of type '" "std::vector< Quackle::GamePosition > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::GamePosition > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "PositionList_insert" "', argument " "2"" of type '" "std::vector< Quackle::GamePosition >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< Quackle::GamePosition >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< Quackle::GamePosition >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "PositionList_insert" "', argument " "2"" of type '" "std::vector< Quackle::GamePosition >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_Quackle__GamePosition,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PositionList_insert" "', argument " "3"" of type '" "std::vector< Quackle::GamePosition >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PositionList_insert" "', argument " "3"" of type '" "std::vector< Quackle::GamePosition >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Quackle::GamePosition >::value_type * >(argp3);
  result = std_vector_Sl_Quackle_GamePosition_Sg__insert__SWIG_0(arg1,SWIG_STD_MOVE(arg2),(Quackle::GamePosition const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Quackle::GamePosition >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PositionList_insert__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Quackle::GamePosition > *arg1 = (std::vector< Quackle::GamePosition > *) 0 ;
  std::vector< Quackle::GamePosition >::iterator arg2 ;
  std::vector< Quackle::GamePosition >::size_type arg3 ;
  std::vector< Quackle::GamePosition >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__GamePosition_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionList_insert" "', argument " "1"" of type '" "std::vector< Quackle::GamePosition > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::GamePosition > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "PositionList_insert" "', argument " "2"" of type '" "std::vector< Quackle::GamePosition >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< Quackle::GamePosition >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< Quackle::GamePosition >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "PositionList_insert" "', argument " "2"" of type '" "std::vector< Quackle::GamePosition >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PositionList_insert" "', argument " "3"" of type '" "std::vector< Quackle::GamePosition >::size_type""'");
  } 
  arg3 = static_cast< std::vector< Quackle::GamePosition >::size_type >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_Quackle__GamePosition,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "PositionList_insert" "', argument " "4"" of type '" "std::vector< Quackle::GamePosition >::value_type const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PositionList_insert" "', argument " "4"" of type '" "std::vector< Quackle::GamePosition >::value_type const &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< Quackle::GamePosition >::value_type * >(argp4);
  std_vector_Sl_Quackle_GamePosition_Sg__insert__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(Quackle::GamePosition const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PositionList_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "PositionList_insert", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Quackle::GamePosition,std::allocator< Quackle::GamePosition > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< Quackle::GamePosition >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_Quackle__GamePosition, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_PositionList_insert__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Quackle::GamePosition,std::allocator< Quackle::GamePosition > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< Quackle::GamePosition >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_Quackle__GamePosition, SWIG_POINTER_NO_NULL | 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_PositionList_insert__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'PositionList_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Quackle::GamePosition >::insert(std::vector< Quackle::GamePosition >::iterator,std::vector< Quackle::GamePosition >::value_type const &)\n"
    "    std::vector< Quackle::GamePosition >::insert(std::vector< Quackle::GamePosition >::iterator,std::vector< Quackle::GamePosition >::size_type,std::vector< Quackle::GamePosition >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PositionList_reserve(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::GamePosition > *arg1 = (std::vector< Quackle::GamePosition > *) 0 ;
  std::vector< Quackle::GamePosition >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "PositionList_reserve", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__GamePosition_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionList_reserve" "', argument " "1"" of type '" "std::vector< Quackle::GamePosition > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::GamePosition > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PositionList_reserve" "', argument " "2"" of type '" "std::vector< Quackle::GamePosition >::size_type""'");
  } 
  arg2 = static_cast< std::vector< Quackle::GamePosition >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PositionList_capacity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::GamePosition > *arg1 = (std::vector< Quackle::GamePosition > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Quackle::GamePosition >::size_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__GamePosition_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionList_capacity" "', argument " "1"" of type '" "std::vector< Quackle::GamePosition > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::GamePosition > * >(argp1);
  result = ((std::vector< Quackle::GamePosition > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_PositionList(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::GamePosition > *arg1 = (std::vector< Quackle::GamePosition > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__GamePosition_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PositionList" "', argument " "1"" of type '" "std::vector< Quackle::GamePosition > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::GamePosition > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *PositionList_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_Quackle__GamePosition_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *PositionList_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_LetterParameterVector_iterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::LetterParameter > *arg1 = (std::vector< Quackle::LetterParameter > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &swig_obj[0];
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__LetterParameter_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LetterParameterVector_iterator" "', argument " "1"" of type '" "std::vector< Quackle::LetterParameter > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::LetterParameter > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_Quackle_LetterParameter_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LetterParameterVector___nonzero__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::LetterParameter > *arg1 = (std::vector< Quackle::LetterParameter > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__LetterParameter_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LetterParameterVector___nonzero__" "', argument " "1"" of type '" "std::vector< Quackle::LetterParameter > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::LetterParameter > * >(argp1);
  result = (bool)std_vector_Sl_Quackle_LetterParameter_Sg____nonzero__((std::vector< Quackle::LetterParameter > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LetterParameterVector___bool__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::LetterParameter > *arg1 = (std::vector< Quackle::LetterParameter > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__LetterParameter_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LetterParameterVector___bool__" "', argument " "1"" of type '" "std::vector< Quackle::LetterParameter > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::LetterParameter > * >(argp1);
  result = (bool)std_vector_Sl_Quackle_LetterParameter_Sg____bool__((std::vector< Quackle::LetterParameter > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LetterParameterVector___len__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::LetterParameter > *arg1 = (std::vector< Quackle::LetterParameter > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Quackle::LetterParameter >::size_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__LetterParameter_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LetterParameterVector___len__" "', argument " "1"" of type '" "std::vector< Quackle::LetterParameter > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::LetterParameter > * >(argp1);
  result = std_vector_Sl_Quackle_LetterParameter_Sg____len__((std::vector< Quackle::LetterParameter > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LetterParameterVector___getslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::LetterParameter > *arg1 = (std::vector< Quackle::LetterParameter > *) 0 ;
  std::vector< Quackle::LetterParameter >::difference_type arg2 ;
  std::vector< Quackle::LetterParameter >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  std::vector< Quackle::LetterParameter,std::allocator< Quackle::LetterParameter > > *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LetterParameterVector___getslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__LetterParameter_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LetterParameterVector___getslice__" "', argument " "1"" of type '" "std::vector< Quackle::LetterParameter > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::LetterParameter > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LetterParameterVector___getslice__" "', argument " "2"" of type '" "std::vector< Quackle::LetterParameter >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Quackle::LetterParameter >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "LetterParameterVector___getslice__" "', argument " "3"" of type '" "std::vector< Quackle::LetterParameter >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< Quackle::LetterParameter >::difference_type >(val3);
  try {
    result = (std::vector< Quackle::LetterParameter,std::allocator< Quackle::LetterParameter > > *)std_vector_Sl_Quackle_LetterParameter_Sg____getslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Quackle__LetterParameter_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LetterParameterVector___setslice____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Quackle::LetterParameter > *arg1 = (std::vector< Quackle::LetterParameter > *) 0 ;
  std::vector< Quackle::LetterParameter >::difference_type arg2 ;
  std::vector< Quackle::LetterParameter >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__LetterParameter_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LetterParameterVector___setslice__" "', argument " "1"" of type '" "std::vector< Quackle::LetterParameter > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::LetterParameter > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LetterParameterVector___setslice__" "', argument " "2"" of type '" "std::vector< Quackle::LetterParameter >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Quackle::LetterParameter >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "LetterParameterVector___setslice__" "', argument " "3"" of type '" "std::vector< Quackle::LetterParameter >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< Quackle::LetterParameter >::difference_type >(val3);
  try {
    std_vector_Sl_Quackle_LetterParameter_Sg____setslice____SWIG_0(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LetterParameterVector___setslice____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Quackle::LetterParameter > *arg1 = (std::vector< Quackle::LetterParameter > *) 0 ;
  std::vector< Quackle::LetterParameter >::difference_type arg2 ;
  std::vector< Quackle::LetterParameter >::difference_type arg3 ;
  std::vector< Quackle::LetterParameter,std::allocator< Quackle::LetterParameter > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__LetterParameter_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LetterParameterVector___setslice__" "', argument " "1"" of type '" "std::vector< Quackle::LetterParameter > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::LetterParameter > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LetterParameterVector___setslice__" "', argument " "2"" of type '" "std::vector< Quackle::LetterParameter >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Quackle::LetterParameter >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "LetterParameterVector___setslice__" "', argument " "3"" of type '" "std::vector< Quackle::LetterParameter >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< Quackle::LetterParameter >::difference_type >(val3);
  {
    std::vector< Quackle::LetterParameter,std::allocator< Quackle::LetterParameter > > *ptr = (std::vector< Quackle::LetterParameter,std::allocator< Quackle::LetterParameter > > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "LetterParameterVector___setslice__" "', argument " "4"" of type '" "std::vector< Quackle::LetterParameter,std::allocator< Quackle::LetterParameter > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LetterParameterVector___setslice__" "', argument " "4"" of type '" "std::vector< Quackle::LetterParameter,std::allocator< Quackle::LetterParameter > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_Quackle_LetterParameter_Sg____setslice____SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(std::vector< Quackle::LetterParameter,std::allocator< Quackle::LetterParameter > > const &)*arg4);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LetterParameterVector___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "LetterParameterVector___setslice__", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Quackle::LetterParameter,std::allocator< Quackle::LetterParameter > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_LetterParameterVector___setslice____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Quackle::LetterParameter,std::allocator< Quackle::LetterParameter > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< Quackle::LetterParameter,std::allocator< Quackle::LetterParameter > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_LetterParameterVector___setslice____SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'LetterParameterVector___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Quackle::LetterParameter >::__setslice__(std::vector< Quackle::LetterParameter >::difference_type,std::vector< Quackle::LetterParameter >::difference_type)\n"
    "    std::vector< Quackle::LetterParameter >::__setslice__(std::vector< Quackle::LetterParameter >::difference_type,std::vector< Quackle::LetterParameter >::difference_type,std::vector< Quackle::LetterParameter,std::allocator< Quackle::LetterParameter > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LetterParameterVector___delslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::LetterParameter > *arg1 = (std::vector< Quackle::LetterParameter > *) 0 ;
  std::vector< Quackle::LetterParameter >::difference_type arg2 ;
  std::vector< Quackle::LetterParameter >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LetterParameterVector___delslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__LetterParameter_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LetterParameterVector___delslice__" "', argument " "1"" of type '" "std::vector< Quackle::LetterParameter > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::LetterParameter > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LetterParameterVector___delslice__" "', argument " "2"" of type '" "std::vector< Quackle::LetterParameter >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Quackle::LetterParameter >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "LetterParameterVector___delslice__" "', argument " "3"" of type '" "std::vector< Quackle::LetterParameter >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< Quackle::LetterParameter >::difference_type >(val3);
  try {
    std_vector_Sl_Quackle_LetterParameter_Sg____delslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LetterParameterVector___delitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Quackle::LetterParameter > *arg1 = (std::vector< Quackle::LetterParameter > *) 0 ;
  std::vector< Quackle::LetterParameter >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__LetterParameter_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LetterParameterVector___delitem__" "', argument " "1"" of type '" "std::vector< Quackle::LetterParameter > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::LetterParameter > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LetterParameterVector___delitem__" "', argument " "2"" of type '" "std::vector< Quackle::LetterParameter >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Quackle::LetterParameter >::difference_type >(val2);
  try {
    std_vector_Sl_Quackle_LetterParameter_Sg____delitem____SWIG_0(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LetterParameterVector___getitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Quackle::LetterParameter > *arg1 = (std::vector< Quackle::LetterParameter > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< Quackle::LetterParameter,std::allocator< Quackle::LetterParameter > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__LetterParameter_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LetterParameterVector___getitem__" "', argument " "1"" of type '" "std::vector< Quackle::LetterParameter > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::LetterParameter > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "LetterParameterVector___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  try {
    result = (std::vector< Quackle::LetterParameter,std::allocator< Quackle::LetterParameter > > *)std_vector_Sl_Quackle_LetterParameter_Sg____getitem____SWIG_0(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Quackle__LetterParameter_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LetterParameterVector___setitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Quackle::LetterParameter > *arg1 = (std::vector< Quackle::LetterParameter > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< Quackle::LetterParameter,std::allocator< Quackle::LetterParameter > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__LetterParameter_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LetterParameterVector___setitem__" "', argument " "1"" of type '" "std::vector< Quackle::LetterParameter > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::LetterParameter > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "LetterParameterVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  {
    std::vector< Quackle::LetterParameter,std::allocator< Quackle::LetterParameter > > *ptr = (std::vector< Quackle::LetterParameter,std::allocator< Quackle::LetterParameter > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LetterParameterVector___setitem__" "', argument " "3"" of type '" "std::vector< Quackle::LetterParameter,std::allocator< Quackle::LetterParameter > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LetterParameterVector___setitem__" "', argument " "3"" of type '" "std::vector< Quackle::LetterParameter,std::allocator< Quackle::LetterParameter > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_Quackle_LetterParameter_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< Quackle::LetterParameter,std::allocator< Quackle::LetterParameter > > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LetterParameterVector___setitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Quackle::LetterParameter > *arg1 = (std::vector< Quackle::LetterParameter > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__LetterParameter_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LetterParameterVector___setitem__" "', argument " "1"" of type '" "std::vector< Quackle::LetterParameter > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::LetterParameter > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "LetterParameterVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  try {
    std_vector_Sl_Quackle_LetterParameter_Sg____setitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LetterParameterVector___delitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Quackle::LetterParameter > *arg1 = (std::vector< Quackle::LetterParameter > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__LetterParameter_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LetterParameterVector___delitem__" "', argument " "1"" of type '" "std::vector< Quackle::LetterParameter > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::LetterParameter > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "LetterParameterVector___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  try {
    std_vector_Sl_Quackle_LetterParameter_Sg____delitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LetterParameterVector___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "LetterParameterVector___delitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Quackle::LetterParameter,std::allocator< Quackle::LetterParameter > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_LetterParameterVector___delitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Quackle::LetterParameter,std::allocator< Quackle::LetterParameter > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_LetterParameterVector___delitem____SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'LetterParameterVector___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Quackle::LetterParameter >::__delitem__(std::vector< Quackle::LetterParameter >::difference_type)\n"
    "    std::vector< Quackle::LetterParameter >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LetterParameterVector___getitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Quackle::LetterParameter > *arg1 = (std::vector< Quackle::LetterParameter > *) 0 ;
  std::vector< Quackle::LetterParameter >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< Quackle::LetterParameter >::value_type *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__LetterParameter_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LetterParameterVector___getitem__" "', argument " "1"" of type '" "std::vector< Quackle::LetterParameter > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::LetterParameter > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LetterParameterVector___getitem__" "', argument " "2"" of type '" "std::vector< Quackle::LetterParameter >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Quackle::LetterParameter >::difference_type >(val2);
  try {
    result = (std::vector< Quackle::LetterParameter >::value_type *) &std_vector_Sl_Quackle_LetterParameter_Sg____getitem____SWIG_1((std::vector< Quackle::LetterParameter > const *)arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__LetterParameter, 0 |  0 );
  (void)swig::container_owner<swig::traits<std::vector< Quackle::LetterParameter >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LetterParameterVector___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "LetterParameterVector___getitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Quackle::LetterParameter,std::allocator< Quackle::LetterParameter > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_LetterParameterVector___getitem____SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Quackle::LetterParameter,std::allocator< Quackle::LetterParameter > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_LetterParameterVector___getitem____SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'LetterParameterVector___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Quackle::LetterParameter >::__getitem__(PySliceObject *)\n"
    "    std::vector< Quackle::LetterParameter >::__getitem__(std::vector< Quackle::LetterParameter >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LetterParameterVector___setitem____SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Quackle::LetterParameter > *arg1 = (std::vector< Quackle::LetterParameter > *) 0 ;
  std::vector< Quackle::LetterParameter >::difference_type arg2 ;
  std::vector< Quackle::LetterParameter >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__LetterParameter_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LetterParameterVector___setitem__" "', argument " "1"" of type '" "std::vector< Quackle::LetterParameter > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::LetterParameter > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LetterParameterVector___setitem__" "', argument " "2"" of type '" "std::vector< Quackle::LetterParameter >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Quackle::LetterParameter >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_Quackle__LetterParameter,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LetterParameterVector___setitem__" "', argument " "3"" of type '" "std::vector< Quackle::LetterParameter >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LetterParameterVector___setitem__" "', argument " "3"" of type '" "std::vector< Quackle::LetterParameter >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Quackle::LetterParameter >::value_type * >(argp3);
  try {
    std_vector_Sl_Quackle_LetterParameter_Sg____setitem____SWIG_2(arg1,SWIG_STD_MOVE(arg2),(Quackle::LetterParameter const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LetterParameterVector___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "LetterParameterVector___setitem__", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Quackle::LetterParameter,std::allocator< Quackle::LetterParameter > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_LetterParameterVector___setitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Quackle::LetterParameter,std::allocator< Quackle::LetterParameter > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< Quackle::LetterParameter,std::allocator< Quackle::LetterParameter > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_LetterParameterVector___setitem____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Quackle::LetterParameter,std::allocator< Quackle::LetterParameter > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_Quackle__LetterParameter, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_LetterParameterVector___setitem____SWIG_2(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'LetterParameterVector___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Quackle::LetterParameter >::__setitem__(PySliceObject *,std::vector< Quackle::LetterParameter,std::allocator< Quackle::LetterParameter > > const &)\n"
    "    std::vector< Quackle::LetterParameter >::__setitem__(PySliceObject *)\n"
    "    std::vector< Quackle::LetterParameter >::__setitem__(std::vector< Quackle::LetterParameter >::difference_type,std::vector< Quackle::LetterParameter >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LetterParameterVector_pop(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::LetterParameter > *arg1 = (std::vector< Quackle::LetterParameter > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Quackle::LetterParameter >::value_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__LetterParameter_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LetterParameterVector_pop" "', argument " "1"" of type '" "std::vector< Quackle::LetterParameter > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::LetterParameter > * >(argp1);
  try {
    result = std_vector_Sl_Quackle_LetterParameter_Sg__pop(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj((new std::vector< Quackle::LetterParameter >::value_type(result)), SWIGTYPE_p_Quackle__LetterParameter, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LetterParameterVector_append(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::LetterParameter > *arg1 = (std::vector< Quackle::LetterParameter > *) 0 ;
  std::vector< Quackle::LetterParameter >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LetterParameterVector_append", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__LetterParameter_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LetterParameterVector_append" "', argument " "1"" of type '" "std::vector< Quackle::LetterParameter > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::LetterParameter > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__LetterParameter,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LetterParameterVector_append" "', argument " "2"" of type '" "std::vector< Quackle::LetterParameter >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LetterParameterVector_append" "', argument " "2"" of type '" "std::vector< Quackle::LetterParameter >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Quackle::LetterParameter >::value_type * >(argp2);
  std_vector_Sl_Quackle_LetterParameter_Sg__append(arg1,(Quackle::LetterParameter const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LetterParameterVector__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::vector< Quackle::LetterParameter > *result = 0 ;
  
  (void)self;
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (std::vector< Quackle::LetterParameter > *)new std::vector< Quackle::LetterParameter >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Quackle__LetterParameter_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LetterParameterVector__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Quackle::LetterParameter > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::vector< Quackle::LetterParameter > *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector< Quackle::LetterParameter,std::allocator< Quackle::LetterParameter > > *ptr = (std::vector< Quackle::LetterParameter,std::allocator< Quackle::LetterParameter > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LetterParameterVector" "', argument " "1"" of type '" "std::vector< Quackle::LetterParameter > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LetterParameterVector" "', argument " "1"" of type '" "std::vector< Quackle::LetterParameter > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< Quackle::LetterParameter > *)new std::vector< Quackle::LetterParameter >((std::vector< Quackle::LetterParameter > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Quackle__LetterParameter_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LetterParameterVector_empty(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::LetterParameter > *arg1 = (std::vector< Quackle::LetterParameter > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__LetterParameter_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LetterParameterVector_empty" "', argument " "1"" of type '" "std::vector< Quackle::LetterParameter > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::LetterParameter > * >(argp1);
  result = (bool)((std::vector< Quackle::LetterParameter > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LetterParameterVector_size(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::LetterParameter > *arg1 = (std::vector< Quackle::LetterParameter > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Quackle::LetterParameter >::size_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__LetterParameter_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LetterParameterVector_size" "', argument " "1"" of type '" "std::vector< Quackle::LetterParameter > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::LetterParameter > * >(argp1);
  result = ((std::vector< Quackle::LetterParameter > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LetterParameterVector_swap(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::LetterParameter > *arg1 = (std::vector< Quackle::LetterParameter > *) 0 ;
  std::vector< Quackle::LetterParameter > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LetterParameterVector_swap", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__LetterParameter_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LetterParameterVector_swap" "', argument " "1"" of type '" "std::vector< Quackle::LetterParameter > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::LetterParameter > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_Quackle__LetterParameter_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LetterParameterVector_swap" "', argument " "2"" of type '" "std::vector< Quackle::LetterParameter > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LetterParameterVector_swap" "', argument " "2"" of type '" "std::vector< Quackle::LetterParameter > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Quackle::LetterParameter > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LetterParameterVector_begin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::LetterParameter > *arg1 = (std::vector< Quackle::LetterParameter > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Quackle::LetterParameter >::iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__LetterParameter_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LetterParameterVector_begin" "', argument " "1"" of type '" "std::vector< Quackle::LetterParameter > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::LetterParameter > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Quackle::LetterParameter >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LetterParameterVector_end(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::LetterParameter > *arg1 = (std::vector< Quackle::LetterParameter > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Quackle::LetterParameter >::iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__LetterParameter_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LetterParameterVector_end" "', argument " "1"" of type '" "std::vector< Quackle::LetterParameter > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::LetterParameter > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Quackle::LetterParameter >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LetterParameterVector_rbegin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::LetterParameter > *arg1 = (std::vector< Quackle::LetterParameter > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Quackle::LetterParameter >::reverse_iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__LetterParameter_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LetterParameterVector_rbegin" "', argument " "1"" of type '" "std::vector< Quackle::LetterParameter > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::LetterParameter > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Quackle::LetterParameter >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LetterParameterVector_rend(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::LetterParameter > *arg1 = (std::vector< Quackle::LetterParameter > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Quackle::LetterParameter >::reverse_iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__LetterParameter_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LetterParameterVector_rend" "', argument " "1"" of type '" "std::vector< Quackle::LetterParameter > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::LetterParameter > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Quackle::LetterParameter >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LetterParameterVector_clear(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::LetterParameter > *arg1 = (std::vector< Quackle::LetterParameter > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__LetterParameter_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LetterParameterVector_clear" "', argument " "1"" of type '" "std::vector< Quackle::LetterParameter > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::LetterParameter > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LetterParameterVector_get_allocator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::LetterParameter > *arg1 = (std::vector< Quackle::LetterParameter > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::allocator< Quackle::LetterParameter > > result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__LetterParameter_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LetterParameterVector_get_allocator" "', argument " "1"" of type '" "std::vector< Quackle::LetterParameter > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::LetterParameter > * >(argp1);
  result = ((std::vector< Quackle::LetterParameter > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< Quackle::LetterParameter >::allocator_type(result)), SWIGTYPE_p_std__allocatorT_Quackle__LetterParameter_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LetterParameterVector__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Quackle::LetterParameter >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< Quackle::LetterParameter > *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_LetterParameterVector" "', argument " "1"" of type '" "std::vector< Quackle::LetterParameter >::size_type""'");
  } 
  arg1 = static_cast< std::vector< Quackle::LetterParameter >::size_type >(val1);
  result = (std::vector< Quackle::LetterParameter > *)new std::vector< Quackle::LetterParameter >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Quackle__LetterParameter_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LetterParameterVector_pop_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::LetterParameter > *arg1 = (std::vector< Quackle::LetterParameter > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__LetterParameter_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LetterParameterVector_pop_back" "', argument " "1"" of type '" "std::vector< Quackle::LetterParameter > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::LetterParameter > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LetterParameterVector_resize__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Quackle::LetterParameter > *arg1 = (std::vector< Quackle::LetterParameter > *) 0 ;
  std::vector< Quackle::LetterParameter >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__LetterParameter_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LetterParameterVector_resize" "', argument " "1"" of type '" "std::vector< Quackle::LetterParameter > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::LetterParameter > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LetterParameterVector_resize" "', argument " "2"" of type '" "std::vector< Quackle::LetterParameter >::size_type""'");
  } 
  arg2 = static_cast< std::vector< Quackle::LetterParameter >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LetterParameterVector_erase__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Quackle::LetterParameter > *arg1 = (std::vector< Quackle::LetterParameter > *) 0 ;
  std::vector< Quackle::LetterParameter >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< Quackle::LetterParameter >::iterator result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__LetterParameter_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LetterParameterVector_erase" "', argument " "1"" of type '" "std::vector< Quackle::LetterParameter > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::LetterParameter > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "LetterParameterVector_erase" "', argument " "2"" of type '" "std::vector< Quackle::LetterParameter >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< Quackle::LetterParameter >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< Quackle::LetterParameter >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "LetterParameterVector_erase" "', argument " "2"" of type '" "std::vector< Quackle::LetterParameter >::iterator""'");
    }
  }
  result = std_vector_Sl_Quackle_LetterParameter_Sg__erase__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Quackle::LetterParameter >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LetterParameterVector_erase__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Quackle::LetterParameter > *arg1 = (std::vector< Quackle::LetterParameter > *) 0 ;
  std::vector< Quackle::LetterParameter >::iterator arg2 ;
  std::vector< Quackle::LetterParameter >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  std::vector< Quackle::LetterParameter >::iterator result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__LetterParameter_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LetterParameterVector_erase" "', argument " "1"" of type '" "std::vector< Quackle::LetterParameter > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::LetterParameter > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "LetterParameterVector_erase" "', argument " "2"" of type '" "std::vector< Quackle::LetterParameter >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< Quackle::LetterParameter >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< Quackle::LetterParameter >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "LetterParameterVector_erase" "', argument " "2"" of type '" "std::vector< Quackle::LetterParameter >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "LetterParameterVector_erase" "', argument " "3"" of type '" "std::vector< Quackle::LetterParameter >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< Quackle::LetterParameter >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< Quackle::LetterParameter >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "LetterParameterVector_erase" "', argument " "3"" of type '" "std::vector< Quackle::LetterParameter >::iterator""'");
    }
  }
  result = std_vector_Sl_Quackle_LetterParameter_Sg__erase__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Quackle::LetterParameter >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LetterParameterVector_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "LetterParameterVector_erase", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Quackle::LetterParameter,std::allocator< Quackle::LetterParameter > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< Quackle::LetterParameter >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_LetterParameterVector_erase__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Quackle::LetterParameter,std::allocator< Quackle::LetterParameter > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< Quackle::LetterParameter >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< Quackle::LetterParameter >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_LetterParameterVector_erase__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'LetterParameterVector_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Quackle::LetterParameter >::erase(std::vector< Quackle::LetterParameter >::iterator)\n"
    "    std::vector< Quackle::LetterParameter >::erase(std::vector< Quackle::LetterParameter >::iterator,std::vector< Quackle::LetterParameter >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_LetterParameterVector__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Quackle::LetterParameter >::size_type arg1 ;
  std::vector< Quackle::LetterParameter >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::vector< Quackle::LetterParameter > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_LetterParameterVector" "', argument " "1"" of type '" "std::vector< Quackle::LetterParameter >::size_type""'");
  } 
  arg1 = static_cast< std::vector< Quackle::LetterParameter >::size_type >(val1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__LetterParameter,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_LetterParameterVector" "', argument " "2"" of type '" "std::vector< Quackle::LetterParameter >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LetterParameterVector" "', argument " "2"" of type '" "std::vector< Quackle::LetterParameter >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Quackle::LetterParameter >::value_type * >(argp2);
  result = (std::vector< Quackle::LetterParameter > *)new std::vector< Quackle::LetterParameter >(arg1,(std::vector< Quackle::LetterParameter >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Quackle__LetterParameter_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LetterParameterVector(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_LetterParameterVector", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_LetterParameterVector__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_LetterParameterVector__SWIG_2(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Quackle::LetterParameter,std::allocator< Quackle::LetterParameter > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_LetterParameterVector__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Quackle__LetterParameter, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_LetterParameterVector__SWIG_3(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_LetterParameterVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Quackle::LetterParameter >::vector()\n"
    "    std::vector< Quackle::LetterParameter >::vector(std::vector< Quackle::LetterParameter > const &)\n"
    "    std::vector< Quackle::LetterParameter >::vector(std::vector< Quackle::LetterParameter >::size_type)\n"
    "    std::vector< Quackle::LetterParameter >::vector(std::vector< Quackle::LetterParameter >::size_type,std::vector< Quackle::LetterParameter >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LetterParameterVector_push_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::LetterParameter > *arg1 = (std::vector< Quackle::LetterParameter > *) 0 ;
  std::vector< Quackle::LetterParameter >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LetterParameterVector_push_back", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__LetterParameter_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LetterParameterVector_push_back" "', argument " "1"" of type '" "std::vector< Quackle::LetterParameter > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::LetterParameter > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__LetterParameter,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LetterParameterVector_push_back" "', argument " "2"" of type '" "std::vector< Quackle::LetterParameter >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LetterParameterVector_push_back" "', argument " "2"" of type '" "std::vector< Quackle::LetterParameter >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Quackle::LetterParameter >::value_type * >(argp2);
  (arg1)->push_back((std::vector< Quackle::LetterParameter >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LetterParameterVector_front(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::LetterParameter > *arg1 = (std::vector< Quackle::LetterParameter > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Quackle::LetterParameter >::value_type *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__LetterParameter_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LetterParameterVector_front" "', argument " "1"" of type '" "std::vector< Quackle::LetterParameter > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::LetterParameter > * >(argp1);
  result = (std::vector< Quackle::LetterParameter >::value_type *) &((std::vector< Quackle::LetterParameter > const *)arg1)->front();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__LetterParameter, 0 |  0 );
  (void)swig::container_owner<swig::traits<std::vector< Quackle::LetterParameter >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LetterParameterVector_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::LetterParameter > *arg1 = (std::vector< Quackle::LetterParameter > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Quackle::LetterParameter >::value_type *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__LetterParameter_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LetterParameterVector_back" "', argument " "1"" of type '" "std::vector< Quackle::LetterParameter > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::LetterParameter > * >(argp1);
  result = (std::vector< Quackle::LetterParameter >::value_type *) &((std::vector< Quackle::LetterParameter > const *)arg1)->back();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__LetterParameter, 0 |  0 );
  (void)swig::container_owner<swig::traits<std::vector< Quackle::LetterParameter >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LetterParameterVector_assign(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::LetterParameter > *arg1 = (std::vector< Quackle::LetterParameter > *) 0 ;
  std::vector< Quackle::LetterParameter >::size_type arg2 ;
  std::vector< Quackle::LetterParameter >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LetterParameterVector_assign", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__LetterParameter_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LetterParameterVector_assign" "', argument " "1"" of type '" "std::vector< Quackle::LetterParameter > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::LetterParameter > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LetterParameterVector_assign" "', argument " "2"" of type '" "std::vector< Quackle::LetterParameter >::size_type""'");
  } 
  arg2 = static_cast< std::vector< Quackle::LetterParameter >::size_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_Quackle__LetterParameter,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LetterParameterVector_assign" "', argument " "3"" of type '" "std::vector< Quackle::LetterParameter >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LetterParameterVector_assign" "', argument " "3"" of type '" "std::vector< Quackle::LetterParameter >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Quackle::LetterParameter >::value_type * >(argp3);
  (arg1)->assign(arg2,(std::vector< Quackle::LetterParameter >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LetterParameterVector_resize__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Quackle::LetterParameter > *arg1 = (std::vector< Quackle::LetterParameter > *) 0 ;
  std::vector< Quackle::LetterParameter >::size_type arg2 ;
  std::vector< Quackle::LetterParameter >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__LetterParameter_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LetterParameterVector_resize" "', argument " "1"" of type '" "std::vector< Quackle::LetterParameter > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::LetterParameter > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LetterParameterVector_resize" "', argument " "2"" of type '" "std::vector< Quackle::LetterParameter >::size_type""'");
  } 
  arg2 = static_cast< std::vector< Quackle::LetterParameter >::size_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_Quackle__LetterParameter,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LetterParameterVector_resize" "', argument " "3"" of type '" "std::vector< Quackle::LetterParameter >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LetterParameterVector_resize" "', argument " "3"" of type '" "std::vector< Quackle::LetterParameter >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Quackle::LetterParameter >::value_type * >(argp3);
  (arg1)->resize(arg2,(std::vector< Quackle::LetterParameter >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LetterParameterVector_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "LetterParameterVector_resize", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Quackle::LetterParameter,std::allocator< Quackle::LetterParameter > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_LetterParameterVector_resize__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Quackle::LetterParameter,std::allocator< Quackle::LetterParameter > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_Quackle__LetterParameter, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_LetterParameterVector_resize__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'LetterParameterVector_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Quackle::LetterParameter >::resize(std::vector< Quackle::LetterParameter >::size_type)\n"
    "    std::vector< Quackle::LetterParameter >::resize(std::vector< Quackle::LetterParameter >::size_type,std::vector< Quackle::LetterParameter >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LetterParameterVector_insert__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Quackle::LetterParameter > *arg1 = (std::vector< Quackle::LetterParameter > *) 0 ;
  std::vector< Quackle::LetterParameter >::iterator arg2 ;
  std::vector< Quackle::LetterParameter >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  std::vector< Quackle::LetterParameter >::iterator result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__LetterParameter_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LetterParameterVector_insert" "', argument " "1"" of type '" "std::vector< Quackle::LetterParameter > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::LetterParameter > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "LetterParameterVector_insert" "', argument " "2"" of type '" "std::vector< Quackle::LetterParameter >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< Quackle::LetterParameter >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< Quackle::LetterParameter >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "LetterParameterVector_insert" "', argument " "2"" of type '" "std::vector< Quackle::LetterParameter >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_Quackle__LetterParameter,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LetterParameterVector_insert" "', argument " "3"" of type '" "std::vector< Quackle::LetterParameter >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LetterParameterVector_insert" "', argument " "3"" of type '" "std::vector< Quackle::LetterParameter >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Quackle::LetterParameter >::value_type * >(argp3);
  result = std_vector_Sl_Quackle_LetterParameter_Sg__insert__SWIG_0(arg1,SWIG_STD_MOVE(arg2),(Quackle::LetterParameter const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Quackle::LetterParameter >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LetterParameterVector_insert__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Quackle::LetterParameter > *arg1 = (std::vector< Quackle::LetterParameter > *) 0 ;
  std::vector< Quackle::LetterParameter >::iterator arg2 ;
  std::vector< Quackle::LetterParameter >::size_type arg3 ;
  std::vector< Quackle::LetterParameter >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__LetterParameter_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LetterParameterVector_insert" "', argument " "1"" of type '" "std::vector< Quackle::LetterParameter > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::LetterParameter > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "LetterParameterVector_insert" "', argument " "2"" of type '" "std::vector< Quackle::LetterParameter >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< Quackle::LetterParameter >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< Quackle::LetterParameter >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "LetterParameterVector_insert" "', argument " "2"" of type '" "std::vector< Quackle::LetterParameter >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "LetterParameterVector_insert" "', argument " "3"" of type '" "std::vector< Quackle::LetterParameter >::size_type""'");
  } 
  arg3 = static_cast< std::vector< Quackle::LetterParameter >::size_type >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_Quackle__LetterParameter,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "LetterParameterVector_insert" "', argument " "4"" of type '" "std::vector< Quackle::LetterParameter >::value_type const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LetterParameterVector_insert" "', argument " "4"" of type '" "std::vector< Quackle::LetterParameter >::value_type const &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< Quackle::LetterParameter >::value_type * >(argp4);
  std_vector_Sl_Quackle_LetterParameter_Sg__insert__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(Quackle::LetterParameter const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LetterParameterVector_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "LetterParameterVector_insert", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Quackle::LetterParameter,std::allocator< Quackle::LetterParameter > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< Quackle::LetterParameter >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_Quackle__LetterParameter, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_LetterParameterVector_insert__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Quackle::LetterParameter,std::allocator< Quackle::LetterParameter > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< Quackle::LetterParameter >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_Quackle__LetterParameter, SWIG_POINTER_NO_NULL | 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_LetterParameterVector_insert__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'LetterParameterVector_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Quackle::LetterParameter >::insert(std::vector< Quackle::LetterParameter >::iterator,std::vector< Quackle::LetterParameter >::value_type const &)\n"
    "    std::vector< Quackle::LetterParameter >::insert(std::vector< Quackle::LetterParameter >::iterator,std::vector< Quackle::LetterParameter >::size_type,std::vector< Quackle::LetterParameter >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LetterParameterVector_reserve(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::LetterParameter > *arg1 = (std::vector< Quackle::LetterParameter > *) 0 ;
  std::vector< Quackle::LetterParameter >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LetterParameterVector_reserve", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__LetterParameter_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LetterParameterVector_reserve" "', argument " "1"" of type '" "std::vector< Quackle::LetterParameter > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::LetterParameter > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LetterParameterVector_reserve" "', argument " "2"" of type '" "std::vector< Quackle::LetterParameter >::size_type""'");
  } 
  arg2 = static_cast< std::vector< Quackle::LetterParameter >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LetterParameterVector_capacity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::LetterParameter > *arg1 = (std::vector< Quackle::LetterParameter > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Quackle::LetterParameter >::size_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__LetterParameter_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LetterParameterVector_capacity" "', argument " "1"" of type '" "std::vector< Quackle::LetterParameter > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::LetterParameter > * >(argp1);
  result = ((std::vector< Quackle::LetterParameter > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_LetterParameterVector(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::LetterParameter > *arg1 = (std::vector< Quackle::LetterParameter > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__LetterParameter_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LetterParameterVector" "', argument " "1"" of type '" "std::vector< Quackle::LetterParameter > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::LetterParameter > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *LetterParameterVector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_Quackle__LetterParameter_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *LetterParameterVector_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_LetterStringVector_iterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::LetterString > *arg1 = (std::vector< Quackle::LetterString > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &swig_obj[0];
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__LetterString_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LetterStringVector_iterator" "', argument " "1"" of type '" "std::vector< Quackle::LetterString > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::LetterString > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_Quackle_LetterString_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LetterStringVector___nonzero__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::LetterString > *arg1 = (std::vector< Quackle::LetterString > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__LetterString_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LetterStringVector___nonzero__" "', argument " "1"" of type '" "std::vector< Quackle::LetterString > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::LetterString > * >(argp1);
  result = (bool)std_vector_Sl_Quackle_LetterString_Sg____nonzero__((std::vector< Quackle::FixedLengthString > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LetterStringVector___bool__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::LetterString > *arg1 = (std::vector< Quackle::LetterString > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__LetterString_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LetterStringVector___bool__" "', argument " "1"" of type '" "std::vector< Quackle::LetterString > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::LetterString > * >(argp1);
  result = (bool)std_vector_Sl_Quackle_LetterString_Sg____bool__((std::vector< Quackle::FixedLengthString > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LetterStringVector___len__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::LetterString > *arg1 = (std::vector< Quackle::LetterString > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Quackle::FixedLengthString >::size_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__LetterString_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LetterStringVector___len__" "', argument " "1"" of type '" "std::vector< Quackle::LetterString > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::LetterString > * >(argp1);
  result = std_vector_Sl_Quackle_LetterString_Sg____len__((std::vector< Quackle::FixedLengthString > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LetterStringVector___getslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::LetterString > *arg1 = (std::vector< Quackle::LetterString > *) 0 ;
  std::vector< Quackle::FixedLengthString >::difference_type arg2 ;
  std::vector< Quackle::FixedLengthString >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  std::vector< Quackle::FixedLengthString,std::allocator< Quackle::FixedLengthString > > *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LetterStringVector___getslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__LetterString_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LetterStringVector___getslice__" "', argument " "1"" of type '" "std::vector< Quackle::LetterString > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::LetterString > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LetterStringVector___getslice__" "', argument " "2"" of type '" "std::vector< Quackle::FixedLengthString >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Quackle::FixedLengthString >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "LetterStringVector___getslice__" "', argument " "3"" of type '" "std::vector< Quackle::FixedLengthString >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< Quackle::FixedLengthString >::difference_type >(val3);
  try {
    result = (std::vector< Quackle::FixedLengthString,std::allocator< Quackle::FixedLengthString > > *)std_vector_Sl_Quackle_LetterString_Sg____getslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Quackle__LetterString_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LetterStringVector___setslice____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Quackle::LetterString > *arg1 = (std::vector< Quackle::LetterString > *) 0 ;
  std::vector< Quackle::FixedLengthString >::difference_type arg2 ;
  std::vector< Quackle::FixedLengthString >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__LetterString_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LetterStringVector___setslice__" "', argument " "1"" of type '" "std::vector< Quackle::LetterString > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::LetterString > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LetterStringVector___setslice__" "', argument " "2"" of type '" "std::vector< Quackle::FixedLengthString >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Quackle::FixedLengthString >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "LetterStringVector___setslice__" "', argument " "3"" of type '" "std::vector< Quackle::FixedLengthString >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< Quackle::FixedLengthString >::difference_type >(val3);
  try {
    std_vector_Sl_Quackle_LetterString_Sg____setslice____SWIG_0(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LetterStringVector___setslice____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Quackle::LetterString > *arg1 = (std::vector< Quackle::LetterString > *) 0 ;
  std::vector< Quackle::FixedLengthString >::difference_type arg2 ;
  std::vector< Quackle::FixedLengthString >::difference_type arg3 ;
  std::vector< Quackle::FixedLengthString,std::allocator< Quackle::FixedLengthString > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__LetterString_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LetterStringVector___setslice__" "', argument " "1"" of type '" "std::vector< Quackle::LetterString > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::LetterString > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LetterStringVector___setslice__" "', argument " "2"" of type '" "std::vector< Quackle::FixedLengthString >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Quackle::FixedLengthString >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "LetterStringVector___setslice__" "', argument " "3"" of type '" "std::vector< Quackle::FixedLengthString >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< Quackle::FixedLengthString >::difference_type >(val3);
  {
    std::vector< Quackle::FixedLengthString,std::allocator< Quackle::FixedLengthString > > *ptr = (std::vector< Quackle::FixedLengthString,std::allocator< Quackle::FixedLengthString > > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "LetterStringVector___setslice__" "', argument " "4"" of type '" "std::vector< Quackle::FixedLengthString,std::allocator< Quackle::FixedLengthString > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LetterStringVector___setslice__" "', argument " "4"" of type '" "std::vector< Quackle::FixedLengthString,std::allocator< Quackle::FixedLengthString > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_Quackle_LetterString_Sg____setslice____SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(std::vector< Quackle::FixedLengthString,std::allocator< Quackle::FixedLengthString > > const &)*arg4);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LetterStringVector___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "LetterStringVector___setslice__", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Quackle::FixedLengthString,std::allocator< Quackle::FixedLengthString > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_LetterStringVector___setslice____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Quackle::FixedLengthString,std::allocator< Quackle::FixedLengthString > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< Quackle::FixedLengthString,std::allocator< Quackle::FixedLengthString > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_LetterStringVector___setslice____SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'LetterStringVector___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Quackle::LetterString >::__setslice__(std::vector< Quackle::FixedLengthString >::difference_type,std::vector< Quackle::FixedLengthString >::difference_type)\n"
    "    std::vector< Quackle::LetterString >::__setslice__(std::vector< Quackle::FixedLengthString >::difference_type,std::vector< Quackle::FixedLengthString >::difference_type,std::vector< Quackle::FixedLengthString,std::allocator< Quackle::FixedLengthString > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LetterStringVector___delslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::LetterString > *arg1 = (std::vector< Quackle::LetterString > *) 0 ;
  std::vector< Quackle::FixedLengthString >::difference_type arg2 ;
  std::vector< Quackle::FixedLengthString >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LetterStringVector___delslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__LetterString_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LetterStringVector___delslice__" "', argument " "1"" of type '" "std::vector< Quackle::LetterString > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::LetterString > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LetterStringVector___delslice__" "', argument " "2"" of type '" "std::vector< Quackle::FixedLengthString >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Quackle::FixedLengthString >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "LetterStringVector___delslice__" "', argument " "3"" of type '" "std::vector< Quackle::FixedLengthString >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< Quackle::FixedLengthString >::difference_type >(val3);
  try {
    std_vector_Sl_Quackle_LetterString_Sg____delslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LetterStringVector___delitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Quackle::LetterString > *arg1 = (std::vector< Quackle::LetterString > *) 0 ;
  std::vector< Quackle::FixedLengthString >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__LetterString_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LetterStringVector___delitem__" "', argument " "1"" of type '" "std::vector< Quackle::LetterString > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::LetterString > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LetterStringVector___delitem__" "', argument " "2"" of type '" "std::vector< Quackle::FixedLengthString >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Quackle::FixedLengthString >::difference_type >(val2);
  try {
    std_vector_Sl_Quackle_LetterString_Sg____delitem____SWIG_0(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LetterStringVector___getitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Quackle::LetterString > *arg1 = (std::vector< Quackle::LetterString > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< Quackle::FixedLengthString,std::allocator< Quackle::FixedLengthString > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__LetterString_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LetterStringVector___getitem__" "', argument " "1"" of type '" "std::vector< Quackle::LetterString > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::LetterString > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "LetterStringVector___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  try {
    result = (std::vector< Quackle::FixedLengthString,std::allocator< Quackle::FixedLengthString > > *)std_vector_Sl_Quackle_LetterString_Sg____getitem____SWIG_0(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Quackle__LetterString_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LetterStringVector___setitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Quackle::LetterString > *arg1 = (std::vector< Quackle::LetterString > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< Quackle::FixedLengthString,std::allocator< Quackle::FixedLengthString > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__LetterString_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LetterStringVector___setitem__" "', argument " "1"" of type '" "std::vector< Quackle::LetterString > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::LetterString > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "LetterStringVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  {
    std::vector< Quackle::FixedLengthString,std::allocator< Quackle::FixedLengthString > > *ptr = (std::vector< Quackle::FixedLengthString,std::allocator< Quackle::FixedLengthString > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LetterStringVector___setitem__" "', argument " "3"" of type '" "std::vector< Quackle::FixedLengthString,std::allocator< Quackle::FixedLengthString > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LetterStringVector___setitem__" "', argument " "3"" of type '" "std::vector< Quackle::FixedLengthString,std::allocator< Quackle::FixedLengthString > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_Quackle_LetterString_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< Quackle::FixedLengthString,std::allocator< Quackle::FixedLengthString > > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LetterStringVector___setitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Quackle::LetterString > *arg1 = (std::vector< Quackle::LetterString > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__LetterString_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LetterStringVector___setitem__" "', argument " "1"" of type '" "std::vector< Quackle::LetterString > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::LetterString > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "LetterStringVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  try {
    std_vector_Sl_Quackle_LetterString_Sg____setitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LetterStringVector___delitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Quackle::LetterString > *arg1 = (std::vector< Quackle::LetterString > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__LetterString_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LetterStringVector___delitem__" "', argument " "1"" of type '" "std::vector< Quackle::LetterString > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::LetterString > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "LetterStringVector___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  try {
    std_vector_Sl_Quackle_LetterString_Sg____delitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LetterStringVector___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "LetterStringVector___delitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Quackle::FixedLengthString,std::allocator< Quackle::FixedLengthString > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_LetterStringVector___delitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Quackle::FixedLengthString,std::allocator< Quackle::FixedLengthString > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_LetterStringVector___delitem____SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'LetterStringVector___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Quackle::LetterString >::__delitem__(std::vector< Quackle::FixedLengthString >::difference_type)\n"
    "    std::vector< Quackle::LetterString >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LetterStringVector___getitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Quackle::LetterString > *arg1 = (std::vector< Quackle::LetterString > *) 0 ;
  std::vector< Quackle::FixedLengthString >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< Quackle::FixedLengthString >::value_type *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__LetterString_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LetterStringVector___getitem__" "', argument " "1"" of type '" "std::vector< Quackle::LetterString > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::LetterString > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LetterStringVector___getitem__" "', argument " "2"" of type '" "std::vector< Quackle::FixedLengthString >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Quackle::FixedLengthString >::difference_type >(val2);
  try {
    result = (std::vector< Quackle::FixedLengthString >::value_type *) &std_vector_Sl_Quackle_LetterString_Sg____getitem____SWIG_1((std::vector< Quackle::FixedLengthString > const *)arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__FixedLengthString, 0 |  0 );
  (void)swig::container_owner<swig::traits<std::vector< Quackle::FixedLengthString >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LetterStringVector___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "LetterStringVector___getitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Quackle::FixedLengthString,std::allocator< Quackle::FixedLengthString > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_LetterStringVector___getitem____SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Quackle::FixedLengthString,std::allocator< Quackle::FixedLengthString > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_LetterStringVector___getitem____SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'LetterStringVector___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Quackle::LetterString >::__getitem__(PySliceObject *)\n"
    "    std::vector< Quackle::LetterString >::__getitem__(std::vector< Quackle::FixedLengthString >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LetterStringVector___setitem____SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Quackle::LetterString > *arg1 = (std::vector< Quackle::LetterString > *) 0 ;
  std::vector< Quackle::FixedLengthString >::difference_type arg2 ;
  std::vector< Quackle::FixedLengthString >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__LetterString_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LetterStringVector___setitem__" "', argument " "1"" of type '" "std::vector< Quackle::LetterString > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::LetterString > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LetterStringVector___setitem__" "', argument " "2"" of type '" "std::vector< Quackle::FixedLengthString >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Quackle::FixedLengthString >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_Quackle__FixedLengthString,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LetterStringVector___setitem__" "', argument " "3"" of type '" "std::vector< Quackle::FixedLengthString >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LetterStringVector___setitem__" "', argument " "3"" of type '" "std::vector< Quackle::FixedLengthString >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Quackle::FixedLengthString >::value_type * >(argp3);
  try {
    std_vector_Sl_Quackle_LetterString_Sg____setitem____SWIG_2(arg1,SWIG_STD_MOVE(arg2),(Quackle::FixedLengthString const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LetterStringVector___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "LetterStringVector___setitem__", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Quackle::FixedLengthString,std::allocator< Quackle::FixedLengthString > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_LetterStringVector___setitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Quackle::FixedLengthString,std::allocator< Quackle::FixedLengthString > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< Quackle::FixedLengthString,std::allocator< Quackle::FixedLengthString > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_LetterStringVector___setitem____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Quackle::FixedLengthString,std::allocator< Quackle::FixedLengthString > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_Quackle__FixedLengthString, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_LetterStringVector___setitem____SWIG_2(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'LetterStringVector___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Quackle::LetterString >::__setitem__(PySliceObject *,std::vector< Quackle::FixedLengthString,std::allocator< Quackle::FixedLengthString > > const &)\n"
    "    std::vector< Quackle::LetterString >::__setitem__(PySliceObject *)\n"
    "    std::vector< Quackle::LetterString >::__setitem__(std::vector< Quackle::FixedLengthString >::difference_type,std::vector< Quackle::FixedLengthString >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LetterStringVector_pop(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::LetterString > *arg1 = (std::vector< Quackle::LetterString > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Quackle::FixedLengthString >::value_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__LetterString_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LetterStringVector_pop" "', argument " "1"" of type '" "std::vector< Quackle::LetterString > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::LetterString > * >(argp1);
  try {
    result = std_vector_Sl_Quackle_LetterString_Sg__pop(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj((new std::vector< Quackle::FixedLengthString >::value_type(result)), SWIGTYPE_p_Quackle__FixedLengthString, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LetterStringVector_append(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::LetterString > *arg1 = (std::vector< Quackle::LetterString > *) 0 ;
  std::vector< Quackle::FixedLengthString >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LetterStringVector_append", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__LetterString_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LetterStringVector_append" "', argument " "1"" of type '" "std::vector< Quackle::LetterString > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::LetterString > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__FixedLengthString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LetterStringVector_append" "', argument " "2"" of type '" "std::vector< Quackle::FixedLengthString >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LetterStringVector_append" "', argument " "2"" of type '" "std::vector< Quackle::FixedLengthString >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Quackle::FixedLengthString >::value_type * >(argp2);
  std_vector_Sl_Quackle_LetterString_Sg__append(arg1,(Quackle::FixedLengthString const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LetterStringVector__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::vector< Quackle::LetterString > *result = 0 ;
  
  (void)self;
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (std::vector< Quackle::LetterString > *)new std::vector< Quackle::LetterString >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Quackle__LetterString_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LetterStringVector__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Quackle::LetterString > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::vector< Quackle::LetterString > *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector< Quackle::FixedLengthString,std::allocator< Quackle::FixedLengthString > > *ptr = (std::vector< Quackle::FixedLengthString,std::allocator< Quackle::FixedLengthString > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LetterStringVector" "', argument " "1"" of type '" "std::vector< Quackle::LetterString > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LetterStringVector" "', argument " "1"" of type '" "std::vector< Quackle::LetterString > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< Quackle::LetterString > *)new std::vector< Quackle::LetterString >((std::vector< Quackle::LetterString > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Quackle__LetterString_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LetterStringVector_empty(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::LetterString > *arg1 = (std::vector< Quackle::LetterString > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__LetterString_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LetterStringVector_empty" "', argument " "1"" of type '" "std::vector< Quackle::LetterString > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::LetterString > * >(argp1);
  result = (bool)((std::vector< Quackle::LetterString > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LetterStringVector_size(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::LetterString > *arg1 = (std::vector< Quackle::LetterString > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Quackle::FixedLengthString >::size_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__LetterString_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LetterStringVector_size" "', argument " "1"" of type '" "std::vector< Quackle::LetterString > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::LetterString > * >(argp1);
  result = ((std::vector< Quackle::LetterString > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LetterStringVector_swap(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::LetterString > *arg1 = (std::vector< Quackle::LetterString > *) 0 ;
  std::vector< Quackle::LetterString > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LetterStringVector_swap", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__LetterString_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LetterStringVector_swap" "', argument " "1"" of type '" "std::vector< Quackle::LetterString > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::LetterString > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_Quackle__LetterString_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LetterStringVector_swap" "', argument " "2"" of type '" "std::vector< Quackle::LetterString > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LetterStringVector_swap" "', argument " "2"" of type '" "std::vector< Quackle::LetterString > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Quackle::LetterString > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LetterStringVector_begin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::LetterString > *arg1 = (std::vector< Quackle::LetterString > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::vector< Quackle::FixedLengthString >::iterator > result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__LetterString_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LetterStringVector_begin" "', argument " "1"" of type '" "std::vector< Quackle::LetterString > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::LetterString > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Quackle::FixedLengthString >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LetterStringVector_end(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::LetterString > *arg1 = (std::vector< Quackle::LetterString > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::vector< Quackle::FixedLengthString >::iterator > result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__LetterString_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LetterStringVector_end" "', argument " "1"" of type '" "std::vector< Quackle::LetterString > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::LetterString > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Quackle::FixedLengthString >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LetterStringVector_rbegin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::LetterString > *arg1 = (std::vector< Quackle::LetterString > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::vector< Quackle::FixedLengthString >::reverse_iterator > result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__LetterString_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LetterStringVector_rbegin" "', argument " "1"" of type '" "std::vector< Quackle::LetterString > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::LetterString > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Quackle::FixedLengthString >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LetterStringVector_rend(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::LetterString > *arg1 = (std::vector< Quackle::LetterString > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::vector< Quackle::FixedLengthString >::reverse_iterator > result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__LetterString_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LetterStringVector_rend" "', argument " "1"" of type '" "std::vector< Quackle::LetterString > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::LetterString > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Quackle::FixedLengthString >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LetterStringVector_clear(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::LetterString > *arg1 = (std::vector< Quackle::LetterString > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__LetterString_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LetterStringVector_clear" "', argument " "1"" of type '" "std::vector< Quackle::LetterString > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::LetterString > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LetterStringVector_get_allocator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::LetterString > *arg1 = (std::vector< Quackle::LetterString > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::allocator< Quackle::FixedLengthString > > result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__LetterString_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LetterStringVector_get_allocator" "', argument " "1"" of type '" "std::vector< Quackle::LetterString > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::LetterString > * >(argp1);
  result = ((std::vector< Quackle::LetterString > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< Quackle::FixedLengthString >::allocator_type(result)), SWIGTYPE_p_std__allocatorT_Quackle__FixedLengthString_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LetterStringVector__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Quackle::FixedLengthString >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< Quackle::LetterString > *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_LetterStringVector" "', argument " "1"" of type '" "std::vector< Quackle::FixedLengthString >::size_type""'");
  } 
  arg1 = static_cast< std::vector< Quackle::FixedLengthString >::size_type >(val1);
  result = (std::vector< Quackle::LetterString > *)new std::vector< Quackle::LetterString >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Quackle__LetterString_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LetterStringVector_pop_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::LetterString > *arg1 = (std::vector< Quackle::LetterString > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__LetterString_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LetterStringVector_pop_back" "', argument " "1"" of type '" "std::vector< Quackle::LetterString > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::LetterString > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LetterStringVector_resize__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Quackle::LetterString > *arg1 = (std::vector< Quackle::LetterString > *) 0 ;
  std::vector< Quackle::FixedLengthString >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__LetterString_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LetterStringVector_resize" "', argument " "1"" of type '" "std::vector< Quackle::LetterString > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::LetterString > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LetterStringVector_resize" "', argument " "2"" of type '" "std::vector< Quackle::FixedLengthString >::size_type""'");
  } 
  arg2 = static_cast< std::vector< Quackle::FixedLengthString >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LetterStringVector_erase__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Quackle::LetterString > *arg1 = (std::vector< Quackle::LetterString > *) 0 ;
  SwigValueWrapper< std::vector< Quackle::FixedLengthString >::iterator > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  SwigValueWrapper< std::vector< Quackle::FixedLengthString >::iterator > result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__LetterString_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LetterStringVector_erase" "', argument " "1"" of type '" "std::vector< Quackle::LetterString > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::LetterString > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "LetterStringVector_erase" "', argument " "2"" of type '" "std::vector< Quackle::FixedLengthString >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< Quackle::FixedLengthString >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< Quackle::FixedLengthString >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "LetterStringVector_erase" "', argument " "2"" of type '" "std::vector< Quackle::FixedLengthString >::iterator""'");
    }
  }
  result = std_vector_Sl_Quackle_LetterString_Sg__erase__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Quackle::FixedLengthString >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LetterStringVector_erase__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Quackle::LetterString > *arg1 = (std::vector< Quackle::LetterString > *) 0 ;
  SwigValueWrapper< std::vector< Quackle::FixedLengthString >::iterator > arg2 ;
  SwigValueWrapper< std::vector< Quackle::FixedLengthString >::iterator > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  SwigValueWrapper< std::vector< Quackle::FixedLengthString >::iterator > result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__LetterString_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LetterStringVector_erase" "', argument " "1"" of type '" "std::vector< Quackle::LetterString > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::LetterString > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "LetterStringVector_erase" "', argument " "2"" of type '" "std::vector< Quackle::FixedLengthString >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< Quackle::FixedLengthString >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< Quackle::FixedLengthString >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "LetterStringVector_erase" "', argument " "2"" of type '" "std::vector< Quackle::FixedLengthString >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "LetterStringVector_erase" "', argument " "3"" of type '" "std::vector< Quackle::FixedLengthString >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< Quackle::FixedLengthString >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< Quackle::FixedLengthString >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "LetterStringVector_erase" "', argument " "3"" of type '" "std::vector< Quackle::FixedLengthString >::iterator""'");
    }
  }
  result = std_vector_Sl_Quackle_LetterString_Sg__erase__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Quackle::FixedLengthString >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LetterStringVector_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "LetterStringVector_erase", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Quackle::FixedLengthString,std::allocator< Quackle::FixedLengthString > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< Quackle::FixedLengthString >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_LetterStringVector_erase__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Quackle::FixedLengthString,std::allocator< Quackle::FixedLengthString > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< Quackle::FixedLengthString >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< Quackle::FixedLengthString >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_LetterStringVector_erase__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'LetterStringVector_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Quackle::LetterString >::erase(std::vector< Quackle::FixedLengthString >::iterator)\n"
    "    std::vector< Quackle::LetterString >::erase(std::vector< Quackle::FixedLengthString >::iterator,std::vector< Quackle::FixedLengthString >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_LetterStringVector__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Quackle::FixedLengthString >::size_type arg1 ;
  std::vector< Quackle::FixedLengthString >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::vector< Quackle::LetterString > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_LetterStringVector" "', argument " "1"" of type '" "std::vector< Quackle::FixedLengthString >::size_type""'");
  } 
  arg1 = static_cast< std::vector< Quackle::FixedLengthString >::size_type >(val1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__FixedLengthString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_LetterStringVector" "', argument " "2"" of type '" "std::vector< Quackle::FixedLengthString >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LetterStringVector" "', argument " "2"" of type '" "std::vector< Quackle::FixedLengthString >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Quackle::FixedLengthString >::value_type * >(argp2);
  result = (std::vector< Quackle::LetterString > *)new std::vector< Quackle::LetterString >(arg1,(std::vector< Quackle::FixedLengthString >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Quackle__LetterString_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LetterStringVector(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_LetterStringVector", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_LetterStringVector__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_LetterStringVector__SWIG_2(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Quackle::FixedLengthString,std::allocator< Quackle::FixedLengthString > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_LetterStringVector__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Quackle__FixedLengthString, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_LetterStringVector__SWIG_3(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_LetterStringVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Quackle::LetterString >::vector()\n"
    "    std::vector< Quackle::LetterString >::vector(std::vector< Quackle::LetterString > const &)\n"
    "    std::vector< Quackle::LetterString >::vector(std::vector< Quackle::FixedLengthString >::size_type)\n"
    "    std::vector< Quackle::LetterString >::vector(std::vector< Quackle::FixedLengthString >::size_type,std::vector< Quackle::FixedLengthString >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LetterStringVector_push_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::LetterString > *arg1 = (std::vector< Quackle::LetterString > *) 0 ;
  std::vector< Quackle::FixedLengthString >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LetterStringVector_push_back", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__LetterString_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LetterStringVector_push_back" "', argument " "1"" of type '" "std::vector< Quackle::LetterString > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::LetterString > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__FixedLengthString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LetterStringVector_push_back" "', argument " "2"" of type '" "std::vector< Quackle::FixedLengthString >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LetterStringVector_push_back" "', argument " "2"" of type '" "std::vector< Quackle::FixedLengthString >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Quackle::FixedLengthString >::value_type * >(argp2);
  (arg1)->push_back((std::vector< Quackle::FixedLengthString >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LetterStringVector_front(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::LetterString > *arg1 = (std::vector< Quackle::LetterString > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Quackle::FixedLengthString >::value_type *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__LetterString_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LetterStringVector_front" "', argument " "1"" of type '" "std::vector< Quackle::LetterString > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::LetterString > * >(argp1);
  result = (std::vector< Quackle::FixedLengthString >::value_type *) &((std::vector< Quackle::LetterString > const *)arg1)->front();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__FixedLengthString, 0 |  0 );
  (void)swig::container_owner<swig::traits<std::vector< Quackle::FixedLengthString >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LetterStringVector_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::LetterString > *arg1 = (std::vector< Quackle::LetterString > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Quackle::FixedLengthString >::value_type *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__LetterString_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LetterStringVector_back" "', argument " "1"" of type '" "std::vector< Quackle::LetterString > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::LetterString > * >(argp1);
  result = (std::vector< Quackle::FixedLengthString >::value_type *) &((std::vector< Quackle::LetterString > const *)arg1)->back();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__FixedLengthString, 0 |  0 );
  (void)swig::container_owner<swig::traits<std::vector< Quackle::FixedLengthString >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LetterStringVector_assign(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::LetterString > *arg1 = (std::vector< Quackle::LetterString > *) 0 ;
  std::vector< Quackle::FixedLengthString >::size_type arg2 ;
  std::vector< Quackle::FixedLengthString >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LetterStringVector_assign", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__LetterString_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LetterStringVector_assign" "', argument " "1"" of type '" "std::vector< Quackle::LetterString > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::LetterString > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LetterStringVector_assign" "', argument " "2"" of type '" "std::vector< Quackle::FixedLengthString >::size_type""'");
  } 
  arg2 = static_cast< std::vector< Quackle::FixedLengthString >::size_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_Quackle__FixedLengthString,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LetterStringVector_assign" "', argument " "3"" of type '" "std::vector< Quackle::FixedLengthString >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LetterStringVector_assign" "', argument " "3"" of type '" "std::vector< Quackle::FixedLengthString >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Quackle::FixedLengthString >::value_type * >(argp3);
  (arg1)->assign(arg2,(std::vector< Quackle::FixedLengthString >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LetterStringVector_resize__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Quackle::LetterString > *arg1 = (std::vector< Quackle::LetterString > *) 0 ;
  std::vector< Quackle::FixedLengthString >::size_type arg2 ;
  std::vector< Quackle::FixedLengthString >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__LetterString_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LetterStringVector_resize" "', argument " "1"" of type '" "std::vector< Quackle::LetterString > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::LetterString > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LetterStringVector_resize" "', argument " "2"" of type '" "std::vector< Quackle::FixedLengthString >::size_type""'");
  } 
  arg2 = static_cast< std::vector< Quackle::FixedLengthString >::size_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_Quackle__FixedLengthString,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LetterStringVector_resize" "', argument " "3"" of type '" "std::vector< Quackle::FixedLengthString >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LetterStringVector_resize" "', argument " "3"" of type '" "std::vector< Quackle::FixedLengthString >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Quackle::FixedLengthString >::value_type * >(argp3);
  (arg1)->resize(arg2,(std::vector< Quackle::FixedLengthString >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LetterStringVector_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "LetterStringVector_resize", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Quackle::FixedLengthString,std::allocator< Quackle::FixedLengthString > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_LetterStringVector_resize__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Quackle::FixedLengthString,std::allocator< Quackle::FixedLengthString > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_Quackle__FixedLengthString, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_LetterStringVector_resize__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'LetterStringVector_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Quackle::LetterString >::resize(std::vector< Quackle::FixedLengthString >::size_type)\n"
    "    std::vector< Quackle::LetterString >::resize(std::vector< Quackle::FixedLengthString >::size_type,std::vector< Quackle::FixedLengthString >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LetterStringVector_insert__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Quackle::LetterString > *arg1 = (std::vector< Quackle::LetterString > *) 0 ;
  SwigValueWrapper< std::vector< Quackle::FixedLengthString >::iterator > arg2 ;
  std::vector< Quackle::FixedLengthString >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  SwigValueWrapper< std::vector< Quackle::FixedLengthString >::iterator > result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__LetterString_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LetterStringVector_insert" "', argument " "1"" of type '" "std::vector< Quackle::LetterString > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::LetterString > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "LetterStringVector_insert" "', argument " "2"" of type '" "std::vector< Quackle::FixedLengthString >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< Quackle::FixedLengthString >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< Quackle::FixedLengthString >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "LetterStringVector_insert" "', argument " "2"" of type '" "std::vector< Quackle::FixedLengthString >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_Quackle__FixedLengthString,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LetterStringVector_insert" "', argument " "3"" of type '" "std::vector< Quackle::FixedLengthString >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LetterStringVector_insert" "', argument " "3"" of type '" "std::vector< Quackle::FixedLengthString >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Quackle::FixedLengthString >::value_type * >(argp3);
  result = std_vector_Sl_Quackle_LetterString_Sg__insert__SWIG_0(arg1,SWIG_STD_MOVE(arg2),(Quackle::FixedLengthString const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Quackle::FixedLengthString >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LetterStringVector_insert__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Quackle::LetterString > *arg1 = (std::vector< Quackle::LetterString > *) 0 ;
  SwigValueWrapper< std::vector< Quackle::FixedLengthString >::iterator > arg2 ;
  std::vector< Quackle::FixedLengthString >::size_type arg3 ;
  std::vector< Quackle::FixedLengthString >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__LetterString_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LetterStringVector_insert" "', argument " "1"" of type '" "std::vector< Quackle::LetterString > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::LetterString > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "LetterStringVector_insert" "', argument " "2"" of type '" "std::vector< Quackle::FixedLengthString >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< Quackle::FixedLengthString >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< Quackle::FixedLengthString >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "LetterStringVector_insert" "', argument " "2"" of type '" "std::vector< Quackle::FixedLengthString >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "LetterStringVector_insert" "', argument " "3"" of type '" "std::vector< Quackle::FixedLengthString >::size_type""'");
  } 
  arg3 = static_cast< std::vector< Quackle::FixedLengthString >::size_type >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_Quackle__FixedLengthString,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "LetterStringVector_insert" "', argument " "4"" of type '" "std::vector< Quackle::FixedLengthString >::value_type const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LetterStringVector_insert" "', argument " "4"" of type '" "std::vector< Quackle::FixedLengthString >::value_type const &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< Quackle::FixedLengthString >::value_type * >(argp4);
  std_vector_Sl_Quackle_LetterString_Sg__insert__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(Quackle::FixedLengthString const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LetterStringVector_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "LetterStringVector_insert", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Quackle::FixedLengthString,std::allocator< Quackle::FixedLengthString > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< Quackle::FixedLengthString >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_Quackle__FixedLengthString, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_LetterStringVector_insert__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Quackle::FixedLengthString,std::allocator< Quackle::FixedLengthString > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< Quackle::FixedLengthString >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_Quackle__FixedLengthString, SWIG_POINTER_NO_NULL | 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_LetterStringVector_insert__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'LetterStringVector_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Quackle::LetterString >::insert(std::vector< Quackle::FixedLengthString >::iterator,std::vector< Quackle::FixedLengthString >::value_type const &)\n"
    "    std::vector< Quackle::LetterString >::insert(std::vector< Quackle::FixedLengthString >::iterator,std::vector< Quackle::FixedLengthString >::size_type,std::vector< Quackle::FixedLengthString >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LetterStringVector_reserve(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::LetterString > *arg1 = (std::vector< Quackle::LetterString > *) 0 ;
  std::vector< Quackle::FixedLengthString >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LetterStringVector_reserve", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__LetterString_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LetterStringVector_reserve" "', argument " "1"" of type '" "std::vector< Quackle::LetterString > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::LetterString > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LetterStringVector_reserve" "', argument " "2"" of type '" "std::vector< Quackle::FixedLengthString >::size_type""'");
  } 
  arg2 = static_cast< std::vector< Quackle::FixedLengthString >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LetterStringVector_capacity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::LetterString > *arg1 = (std::vector< Quackle::LetterString > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Quackle::FixedLengthString >::size_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__LetterString_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LetterStringVector_capacity" "', argument " "1"" of type '" "std::vector< Quackle::LetterString > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::LetterString > * >(argp1);
  result = ((std::vector< Quackle::LetterString > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_LetterStringVector(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Quackle::LetterString > *arg1 = (std::vector< Quackle::LetterString > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__LetterString_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LetterStringVector" "', argument " "1"" of type '" "std::vector< Quackle::LetterString > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Quackle::LetterString > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *LetterStringVector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_Quackle__LetterString_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *LetterStringVector_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_Move_score_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Move *arg1 = (Quackle::Move *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Move_score_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Move, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Move_score_set" "', argument " "1"" of type '" "Quackle::Move *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Move * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Move_score_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->score = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Move_score_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Move *arg1 = (Quackle::Move *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Move, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Move_score_get" "', argument " "1"" of type '" "Quackle::Move *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Move * >(argp1);
  result = (int) ((arg1)->score);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Move_isBingo_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Move *arg1 = (Quackle::Move *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Move_isBingo_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Move, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Move_isBingo_set" "', argument " "1"" of type '" "Quackle::Move *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Move * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Move_isBingo_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->isBingo = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Move_isBingo_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Move *arg1 = (Quackle::Move *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Move, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Move_isBingo_get" "', argument " "1"" of type '" "Quackle::Move *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Move * >(argp1);
  result = (bool) ((arg1)->isBingo);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Move_effectiveScore(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Move *arg1 = (Quackle::Move *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Move, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Move_effectiveScore" "', argument " "1"" of type '" "Quackle::Move const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Move * >(argp1);
  result = (int)((Quackle::Move const *)arg1)->effectiveScore();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Move_equity_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Move *arg1 = (Quackle::Move *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Move_equity_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Move, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Move_equity_set" "', argument " "1"" of type '" "Quackle::Move *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Move * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Move_equity_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->equity = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Move_equity_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Move *arg1 = (Quackle::Move *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Move, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Move_equity_get" "', argument " "1"" of type '" "Quackle::Move *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Move * >(argp1);
  result = (double) ((arg1)->equity);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Move_win_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Move *arg1 = (Quackle::Move *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Move_win_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Move, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Move_win_set" "', argument " "1"" of type '" "Quackle::Move *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Move * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Move_win_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->win = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Move_win_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Move *arg1 = (Quackle::Move *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Move, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Move_win_get" "', argument " "1"" of type '" "Quackle::Move *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Move * >(argp1);
  result = (double) ((arg1)->win);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Move_possibleWin_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Move *arg1 = (Quackle::Move *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Move_possibleWin_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Move, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Move_possibleWin_set" "', argument " "1"" of type '" "Quackle::Move *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Move * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Move_possibleWin_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->possibleWin = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Move_possibleWin_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Move *arg1 = (Quackle::Move *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Move, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Move_possibleWin_get" "', argument " "1"" of type '" "Quackle::Move *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Move * >(argp1);
  result = (double) ((arg1)->possibleWin);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Move_action_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Move *arg1 = (Quackle::Move *) 0 ;
  Quackle::Move::Action arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Move_action_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Move, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Move_action_set" "', argument " "1"" of type '" "Quackle::Move *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Move * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Move_action_set" "', argument " "2"" of type '" "Quackle::Move::Action""'");
  } 
  arg2 = static_cast< Quackle::Move::Action >(val2);
  if (arg1) (arg1)->action = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Move_action_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Move *arg1 = (Quackle::Move *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Quackle::Move::Action result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Move, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Move_action_get" "', argument " "1"" of type '" "Quackle::Move *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Move * >(argp1);
  result = (Quackle::Move::Action) ((arg1)->action);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Move_horizontal_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Move *arg1 = (Quackle::Move *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Move_horizontal_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Move, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Move_horizontal_set" "', argument " "1"" of type '" "Quackle::Move *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Move * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Move_horizontal_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->horizontal = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Move_horizontal_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Move *arg1 = (Quackle::Move *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Move, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Move_horizontal_get" "', argument " "1"" of type '" "Quackle::Move *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Move * >(argp1);
  result = (bool) ((arg1)->horizontal);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Move_startrow_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Move *arg1 = (Quackle::Move *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Move_startrow_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Move, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Move_startrow_set" "', argument " "1"" of type '" "Quackle::Move *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Move * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Move_startrow_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->startrow = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Move_startrow_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Move *arg1 = (Quackle::Move *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Move, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Move_startrow_get" "', argument " "1"" of type '" "Quackle::Move *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Move * >(argp1);
  result = (int) ((arg1)->startrow);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Move_startcol_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Move *arg1 = (Quackle::Move *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Move_startcol_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Move, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Move_startcol_set" "', argument " "1"" of type '" "Quackle::Move *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Move * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Move_startcol_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->startcol = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Move_startcol_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Move *arg1 = (Quackle::Move *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Move, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Move_startcol_get" "', argument " "1"" of type '" "Quackle::Move *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Move * >(argp1);
  result = (int) ((arg1)->startcol);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Move_isAMove(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Move *arg1 = (Quackle::Move *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Move, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Move_isAMove" "', argument " "1"" of type '" "Quackle::Move const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Move * >(argp1);
  result = (bool)((Quackle::Move const *)arg1)->isAMove();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Move_setTiles(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Move *arg1 = (Quackle::Move *) 0 ;
  Quackle::LetterString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Move_setTiles", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Move, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Move_setTiles" "', argument " "1"" of type '" "Quackle::Move *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Move * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__FixedLengthString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Move_setTiles" "', argument " "2"" of type '" "Quackle::LetterString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Move_setTiles" "', argument " "2"" of type '" "Quackle::LetterString const &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::LetterString * >(argp2);
  (arg1)->setTiles((Quackle::LetterString const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Move_setPrettyTiles(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Move *arg1 = (Quackle::Move *) 0 ;
  Quackle::LetterString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Move_setPrettyTiles", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Move, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Move_setPrettyTiles" "', argument " "1"" of type '" "Quackle::Move *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Move * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__FixedLengthString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Move_setPrettyTiles" "', argument " "2"" of type '" "Quackle::LetterString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Move_setPrettyTiles" "', argument " "2"" of type '" "Quackle::LetterString const &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::LetterString * >(argp2);
  (arg1)->setPrettyTiles((Quackle::LetterString const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Move_prettyTiles(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Move *arg1 = (Quackle::Move *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Quackle::LetterString *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Move, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Move_prettyTiles" "', argument " "1"" of type '" "Quackle::Move const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Move * >(argp1);
  result = (Quackle::LetterString *) &((Quackle::Move const *)arg1)->prettyTiles();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__FixedLengthString, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Move_usedTiles(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Move *arg1 = (Quackle::Move *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Quackle::LetterString result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Move, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Move_usedTiles" "', argument " "1"" of type '" "Quackle::Move const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Move * >(argp1);
  result = ((Quackle::Move const *)arg1)->usedTiles();
  resultobj = SWIG_NewPointerObj((new Quackle::LetterString(result)), SWIGTYPE_p_Quackle__FixedLengthString, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Move_wordTiles(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Move *arg1 = (Quackle::Move *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Quackle::LetterString result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Move, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Move_wordTiles" "', argument " "1"" of type '" "Quackle::Move const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Move * >(argp1);
  result = ((Quackle::Move const *)arg1)->wordTiles();
  resultobj = SWIG_NewPointerObj((new Quackle::LetterString(result)), SWIGTYPE_p_Quackle__FixedLengthString, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Move_wordTilesWithNoPlayThru(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Move *arg1 = (Quackle::Move *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Quackle::LetterString result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Move, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Move_wordTilesWithNoPlayThru" "', argument " "1"" of type '" "Quackle::Move const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Move * >(argp1);
  result = ((Quackle::Move const *)arg1)->wordTilesWithNoPlayThru();
  resultobj = SWIG_NewPointerObj((new Quackle::LetterString(result)), SWIGTYPE_p_Quackle__FixedLengthString, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Move_tiles(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Move *arg1 = (Quackle::Move *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Quackle::LetterString *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Move, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Move_tiles" "', argument " "1"" of type '" "Quackle::Move const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Move * >(argp1);
  result = (Quackle::LetterString *) &((Quackle::Move const *)arg1)->tiles();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__FixedLengthString, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Move_isChallengedPhoney(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Move *arg1 = (Quackle::Move *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Move, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Move_isChallengedPhoney" "', argument " "1"" of type '" "Quackle::Move const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Move * >(argp1);
  result = (bool)((Quackle::Move const *)arg1)->isChallengedPhoney();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Move_setIsChallengedPhoney(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Move *arg1 = (Quackle::Move *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Move_setIsChallengedPhoney", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Move, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Move_setIsChallengedPhoney" "', argument " "1"" of type '" "Quackle::Move *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Move * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Move_setIsChallengedPhoney" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->setIsChallengedPhoney(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Move_scoreAddition(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Move *arg1 = (Quackle::Move *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Move, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Move_scoreAddition" "', argument " "1"" of type '" "Quackle::Move const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Move * >(argp1);
  result = (int)((Quackle::Move const *)arg1)->scoreAddition();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Move_setScoreAddition(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Move *arg1 = (Quackle::Move *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Move_setScoreAddition", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Move, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Move_setScoreAddition" "', argument " "1"" of type '" "Quackle::Move *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Move * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Move_setScoreAddition" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->setScoreAddition(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Move_isAlreadyOnBoard(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Letter arg1 ;
  unsigned char val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_unsigned_SS_char(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Move_isAlreadyOnBoard" "', argument " "1"" of type '" "Quackle::Letter""'");
  } 
  arg1 = static_cast< Quackle::Letter >(val1);
  result = (bool)Quackle::Move::isAlreadyOnBoard(arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Move_xml(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Move *arg1 = (Quackle::Move *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  UVString result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Move, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Move_xml" "', argument " "1"" of type '" "Quackle::Move const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Move * >(argp1);
  result = ((Quackle::Move const *)arg1)->xml();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Move_toString(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Move *arg1 = (Quackle::Move *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  UVString result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Move, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Move_toString" "', argument " "1"" of type '" "Quackle::Move const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Move * >(argp1);
  result = ((Quackle::Move const *)arg1)->toString();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Move_debugString(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Move *arg1 = (Quackle::Move *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  UVString result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Move, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Move_debugString" "', argument " "1"" of type '" "Quackle::Move const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Move * >(argp1);
  result = ((Quackle::Move const *)arg1)->debugString();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Move_positionString(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Move *arg1 = (Quackle::Move *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  UVString result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Move, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Move_positionString" "', argument " "1"" of type '" "Quackle::Move const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Move * >(argp1);
  result = ((Quackle::Move const *)arg1)->positionString();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Move_createPlaceMove__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  UVString arg1 ;
  Quackle::LetterString arg2 ;
  void *argp2 ;
  int res2 = 0 ;
  Quackle::Move result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Move_createPlaceMove" "', argument " "1"" of type '" "UVString""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__FixedLengthString,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Move_createPlaceMove" "', argument " "2"" of type '" "Quackle::LetterString""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Move_createPlaceMove" "', argument " "2"" of type '" "Quackle::LetterString""'");
    } else {
      Quackle::LetterString * temp = reinterpret_cast< Quackle::LetterString * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = Quackle::Move::createPlaceMove(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2));
  resultobj = SWIG_NewPointerObj((new Quackle::Move(result)), SWIGTYPE_p_Quackle__Move, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Move_createPlaceMove__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  bool arg3 ;
  Quackle::LetterString arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  Quackle::Move result;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Move_createPlaceMove" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Move_createPlaceMove" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Move_createPlaceMove" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_Quackle__FixedLengthString,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Move_createPlaceMove" "', argument " "4"" of type '" "Quackle::LetterString""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Move_createPlaceMove" "', argument " "4"" of type '" "Quackle::LetterString""'");
    } else {
      Quackle::LetterString * temp = reinterpret_cast< Quackle::LetterString * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  result = Quackle::Move::createPlaceMove(arg1,arg2,arg3,SWIG_STD_MOVE(arg4));
  resultobj = SWIG_NewPointerObj((new Quackle::Move(result)), SWIGTYPE_p_Quackle__Move, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Move_createPlaceMove(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Move_createPlaceMove", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Quackle__FixedLengthString, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Move_createPlaceMove__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_Quackle__FixedLengthString, SWIG_POINTER_NO_NULL | 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_Move_createPlaceMove__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Move_createPlaceMove'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Quackle::Move::createPlaceMove(UVString,Quackle::LetterString)\n"
    "    Quackle::Move::createPlaceMove(int,int,bool,Quackle::LetterString)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Move_createChallengedPhoney__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  UVString arg1 ;
  Quackle::LetterString arg2 ;
  void *argp2 ;
  int res2 = 0 ;
  Quackle::Move result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Move_createChallengedPhoney" "', argument " "1"" of type '" "UVString""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__FixedLengthString,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Move_createChallengedPhoney" "', argument " "2"" of type '" "Quackle::LetterString""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Move_createChallengedPhoney" "', argument " "2"" of type '" "Quackle::LetterString""'");
    } else {
      Quackle::LetterString * temp = reinterpret_cast< Quackle::LetterString * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = Quackle::Move::createChallengedPhoney(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2));
  resultobj = SWIG_NewPointerObj((new Quackle::Move(result)), SWIGTYPE_p_Quackle__Move, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Move_createChallengedPhoney__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  bool arg3 ;
  Quackle::LetterString arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  Quackle::Move result;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Move_createChallengedPhoney" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Move_createChallengedPhoney" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Move_createChallengedPhoney" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_Quackle__FixedLengthString,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Move_createChallengedPhoney" "', argument " "4"" of type '" "Quackle::LetterString""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Move_createChallengedPhoney" "', argument " "4"" of type '" "Quackle::LetterString""'");
    } else {
      Quackle::LetterString * temp = reinterpret_cast< Quackle::LetterString * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  result = Quackle::Move::createChallengedPhoney(arg1,arg2,arg3,SWIG_STD_MOVE(arg4));
  resultobj = SWIG_NewPointerObj((new Quackle::Move(result)), SWIGTYPE_p_Quackle__Move, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Move_createChallengedPhoney(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Move_createChallengedPhoney", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Quackle__FixedLengthString, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Move_createChallengedPhoney__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_Quackle__FixedLengthString, SWIG_POINTER_NO_NULL | 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_Move_createChallengedPhoney__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Move_createChallengedPhoney'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Quackle::Move::createChallengedPhoney(UVString,Quackle::LetterString)\n"
    "    Quackle::Move::createChallengedPhoney(int,int,bool,Quackle::LetterString)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Move_createExchangeMove(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::LetterString arg1 ;
  bool arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  Quackle::Move result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Move_createExchangeMove", 2, 2, swig_obj)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_Quackle__FixedLengthString,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Move_createExchangeMove" "', argument " "1"" of type '" "Quackle::LetterString""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Move_createExchangeMove" "', argument " "1"" of type '" "Quackle::LetterString""'");
    } else {
      Quackle::LetterString * temp = reinterpret_cast< Quackle::LetterString * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Move_createExchangeMove" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = Quackle::Move::createExchangeMove(SWIG_STD_MOVE(arg1),arg2);
  resultobj = SWIG_NewPointerObj((new Quackle::Move(result)), SWIGTYPE_p_Quackle__Move, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Move_createUnusedTilesBonus(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::LetterString arg1 ;
  int arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  Quackle::Move result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Move_createUnusedTilesBonus", 2, 2, swig_obj)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_Quackle__FixedLengthString,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Move_createUnusedTilesBonus" "', argument " "1"" of type '" "Quackle::LetterString""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Move_createUnusedTilesBonus" "', argument " "1"" of type '" "Quackle::LetterString""'");
    } else {
      Quackle::LetterString * temp = reinterpret_cast< Quackle::LetterString * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Move_createUnusedTilesBonus" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = Quackle::Move::createUnusedTilesBonus(SWIG_STD_MOVE(arg1),arg2);
  resultobj = SWIG_NewPointerObj((new Quackle::Move(result)), SWIGTYPE_p_Quackle__Move, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Move_createTimePenalty(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  Quackle::Move result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Move_createTimePenalty" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  result = Quackle::Move::createTimePenalty(arg1);
  resultobj = SWIG_NewPointerObj((new Quackle::Move(result)), SWIGTYPE_p_Quackle__Move, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Move_createPassMove(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Move result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Move_createPassMove", 0, 0, 0)) SWIG_fail;
  result = Quackle::Move::createPassMove();
  resultobj = SWIG_NewPointerObj((new Quackle::Move(result)), SWIGTYPE_p_Quackle__Move, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Move_createNonmove(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Move result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Move_createNonmove", 0, 0, 0)) SWIG_fail;
  result = Quackle::Move::createNonmove();
  resultobj = SWIG_NewPointerObj((new Quackle::Move(result)), SWIGTYPE_p_Quackle__Move, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Move(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Move *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "new_Move", 0, 0, 0)) SWIG_fail;
  result = (Quackle::Move *)new Quackle::Move();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__Move, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Move(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Move *arg1 = (Quackle::Move *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Move, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Move" "', argument " "1"" of type '" "Quackle::Move *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Move * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Move_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Quackle__Move, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Move_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap___lt____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Quackle::Move *arg1 = 0 ;
  Quackle::Move *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_Quackle__Move,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__lt__" "', argument " "1"" of type '" "Quackle::Move const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lt__" "', argument " "1"" of type '" "Quackle::Move const &""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Move * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__Move,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__lt__" "', argument " "2"" of type '" "Quackle::Move const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lt__" "', argument " "2"" of type '" "Quackle::Move const &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::Move * >(argp2);
  result = (bool)Quackle::operator <((Quackle::Move const &)*arg1,(Quackle::Move const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  if (PyErr_Occurred() && !PyErr_ExceptionMatches(PyExc_TypeError)) {
    return NULL;
  }
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_MoveList_sort__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Quackle::MoveList *arg1 = 0 ;
  Quackle::MoveList::SortType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_Quackle__MoveList,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MoveList_sort" "', argument " "1"" of type '" "Quackle::MoveList &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MoveList_sort" "', argument " "1"" of type '" "Quackle::MoveList &""'"); 
  }
  arg1 = reinterpret_cast< Quackle::MoveList * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MoveList_sort" "', argument " "2"" of type '" "Quackle::MoveList::SortType""'");
  } 
  arg2 = static_cast< Quackle::MoveList::SortType >(val2);
  Quackle::MoveList::sort(*arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MoveList_sort__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Quackle::MoveList *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_Quackle__MoveList,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MoveList_sort" "', argument " "1"" of type '" "Quackle::MoveList &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MoveList_sort" "', argument " "1"" of type '" "Quackle::MoveList &""'"); 
  }
  arg1 = reinterpret_cast< Quackle::MoveList * >(argp1);
  Quackle::MoveList::sort(*arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MoveList_sort(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "MoveList_sort", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Quackle__MoveList, SWIG_POINTER_NO_NULL);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_MoveList_sort__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Quackle__MoveList, SWIG_POINTER_NO_NULL);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MoveList_sort__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'MoveList_sort'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Quackle::MoveList::sort(Quackle::MoveList &,Quackle::MoveList::SortType)\n"
    "    Quackle::MoveList::sort(Quackle::MoveList &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MoveList_sortNonReverse__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Quackle::MoveList *arg1 = 0 ;
  Quackle::MoveList::SortType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_Quackle__MoveList,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MoveList_sortNonReverse" "', argument " "1"" of type '" "Quackle::MoveList &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MoveList_sortNonReverse" "', argument " "1"" of type '" "Quackle::MoveList &""'"); 
  }
  arg1 = reinterpret_cast< Quackle::MoveList * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MoveList_sortNonReverse" "', argument " "2"" of type '" "Quackle::MoveList::SortType""'");
  } 
  arg2 = static_cast< Quackle::MoveList::SortType >(val2);
  Quackle::MoveList::sortNonReverse(*arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MoveList_sortNonReverse__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Quackle::MoveList *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_Quackle__MoveList,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MoveList_sortNonReverse" "', argument " "1"" of type '" "Quackle::MoveList &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MoveList_sortNonReverse" "', argument " "1"" of type '" "Quackle::MoveList &""'"); 
  }
  arg1 = reinterpret_cast< Quackle::MoveList * >(argp1);
  Quackle::MoveList::sortNonReverse(*arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MoveList_sortNonReverse(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "MoveList_sortNonReverse", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Quackle__MoveList, SWIG_POINTER_NO_NULL);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_MoveList_sortNonReverse__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Quackle__MoveList, SWIG_POINTER_NO_NULL);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MoveList_sortNonReverse__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'MoveList_sortNonReverse'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Quackle::MoveList::sortNonReverse(Quackle::MoveList &,Quackle::MoveList::SortType)\n"
    "    Quackle::MoveList::sortNonReverse(Quackle::MoveList &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MoveList_winComparator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Move *arg1 = 0 ;
  Quackle::Move *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "MoveList_winComparator", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_Quackle__Move,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MoveList_winComparator" "', argument " "1"" of type '" "Quackle::Move const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MoveList_winComparator" "', argument " "1"" of type '" "Quackle::Move const &""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Move * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__Move,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MoveList_winComparator" "', argument " "2"" of type '" "Quackle::Move const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MoveList_winComparator" "', argument " "2"" of type '" "Quackle::Move const &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::Move * >(argp2);
  result = (bool)Quackle::MoveList::winComparator((Quackle::Move const &)*arg1,(Quackle::Move const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MoveList_equityComparator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Move *arg1 = 0 ;
  Quackle::Move *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "MoveList_equityComparator", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_Quackle__Move,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MoveList_equityComparator" "', argument " "1"" of type '" "Quackle::Move const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MoveList_equityComparator" "', argument " "1"" of type '" "Quackle::Move const &""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Move * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__Move,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MoveList_equityComparator" "', argument " "2"" of type '" "Quackle::Move const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MoveList_equityComparator" "', argument " "2"" of type '" "Quackle::Move const &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::Move * >(argp2);
  result = (bool)Quackle::MoveList::equityComparator((Quackle::Move const &)*arg1,(Quackle::Move const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MoveList_scoreComparator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Move *arg1 = 0 ;
  Quackle::Move *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "MoveList_scoreComparator", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_Quackle__Move,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MoveList_scoreComparator" "', argument " "1"" of type '" "Quackle::Move const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MoveList_scoreComparator" "', argument " "1"" of type '" "Quackle::Move const &""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Move * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__Move,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MoveList_scoreComparator" "', argument " "2"" of type '" "Quackle::Move const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MoveList_scoreComparator" "', argument " "2"" of type '" "Quackle::Move const &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::Move * >(argp2);
  result = (bool)Quackle::MoveList::scoreComparator((Quackle::Move const &)*arg1,(Quackle::Move const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MoveList_alphabeticalComparator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Move *arg1 = 0 ;
  Quackle::Move *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "MoveList_alphabeticalComparator", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_Quackle__Move,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MoveList_alphabeticalComparator" "', argument " "1"" of type '" "Quackle::Move const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MoveList_alphabeticalComparator" "', argument " "1"" of type '" "Quackle::Move const &""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Move * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__Move,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MoveList_alphabeticalComparator" "', argument " "2"" of type '" "Quackle::Move const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MoveList_alphabeticalComparator" "', argument " "2"" of type '" "Quackle::Move const &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::Move * >(argp2);
  result = (bool)Quackle::MoveList::alphabeticalComparator((Quackle::Move const &)*arg1,(Quackle::Move const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MoveList_wordPosComparator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Move *arg1 = 0 ;
  Quackle::Move *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "MoveList_wordPosComparator", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_Quackle__Move,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MoveList_wordPosComparator" "', argument " "1"" of type '" "Quackle::Move const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MoveList_wordPosComparator" "', argument " "1"" of type '" "Quackle::Move const &""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Move * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__Move,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MoveList_wordPosComparator" "', argument " "2"" of type '" "Quackle::Move const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MoveList_wordPosComparator" "', argument " "2"" of type '" "Quackle::Move const &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::Move * >(argp2);
  result = (bool)Quackle::MoveList::wordPosComparator((Quackle::Move const &)*arg1,(Quackle::Move const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MoveList_contains(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::MoveList *arg1 = (Quackle::MoveList *) 0 ;
  Quackle::Move *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "MoveList_contains", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__MoveList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MoveList_contains" "', argument " "1"" of type '" "Quackle::MoveList const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::MoveList * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__Move,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MoveList_contains" "', argument " "2"" of type '" "Quackle::Move const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MoveList_contains" "', argument " "2"" of type '" "Quackle::Move const &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::Move * >(argp2);
  result = (bool)((Quackle::MoveList const *)arg1)->contains((Quackle::Move const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MoveList(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::MoveList *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "new_MoveList", 0, 0, 0)) SWIG_fail;
  result = (Quackle::MoveList *)new Quackle::MoveList();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__MoveList, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_MoveList(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::MoveList *arg1 = (Quackle::MoveList *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__MoveList, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MoveList" "', argument " "1"" of type '" "Quackle::MoveList *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::MoveList * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *MoveList_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Quackle__MoveList, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *MoveList_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_Rack__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  Quackle::Rack *result = 0 ;
  
  (void)self;
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (Quackle::Rack *)new Quackle::Rack();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__Rack, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Rack__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Quackle::LetterString *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Quackle::Rack *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_Quackle__FixedLengthString,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Rack" "', argument " "1"" of type '" "Quackle::LetterString const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Rack" "', argument " "1"" of type '" "Quackle::LetterString const &""'"); 
  }
  arg1 = reinterpret_cast< Quackle::LetterString * >(argp1);
  result = (Quackle::Rack *)new Quackle::Rack((Quackle::LetterString const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__Rack, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Rack(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_Rack", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_Rack__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Quackle__FixedLengthString, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Rack__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_Rack'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Quackle::Rack::Rack()\n"
    "    Quackle::Rack::Rack(Quackle::LetterString const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Rack_setTiles(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Rack *arg1 = (Quackle::Rack *) 0 ;
  Quackle::LetterString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Rack_setTiles", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Rack, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rack_setTiles" "', argument " "1"" of type '" "Quackle::Rack *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Rack * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__FixedLengthString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rack_setTiles" "', argument " "2"" of type '" "Quackle::LetterString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rack_setTiles" "', argument " "2"" of type '" "Quackle::LetterString const &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::LetterString * >(argp2);
  (arg1)->setTiles((Quackle::LetterString const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Rack_tiles(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Rack *arg1 = (Quackle::Rack *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Quackle::LetterString *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Rack, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rack_tiles" "', argument " "1"" of type '" "Quackle::Rack const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Rack * >(argp1);
  result = (Quackle::LetterString *) &((Quackle::Rack const *)arg1)->tiles();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__FixedLengthString, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Rack_alphaTiles(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Rack *arg1 = (Quackle::Rack *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Quackle::LetterString result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Rack, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rack_alphaTiles" "', argument " "1"" of type '" "Quackle::Rack const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Rack * >(argp1);
  result = ((Quackle::Rack const *)arg1)->alphaTiles();
  resultobj = SWIG_NewPointerObj((new Quackle::LetterString(result)), SWIGTYPE_p_Quackle__FixedLengthString, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Rack_empty(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Rack *arg1 = (Quackle::Rack *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Rack, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rack_empty" "', argument " "1"" of type '" "Quackle::Rack const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Rack * >(argp1);
  result = (bool)((Quackle::Rack const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Rack_equals(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Rack *arg1 = (Quackle::Rack *) 0 ;
  Quackle::Rack *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Rack_equals", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Rack, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rack_equals" "', argument " "1"" of type '" "Quackle::Rack const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Rack * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__Rack,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rack_equals" "', argument " "2"" of type '" "Quackle::Rack const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rack_equals" "', argument " "2"" of type '" "Quackle::Rack const &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::Rack * >(argp2);
  result = (bool)((Quackle::Rack const *)arg1)->equals((Quackle::Rack const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Rack_size(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Rack *arg1 = (Quackle::Rack *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  unsigned int result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Rack, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rack_size" "', argument " "1"" of type '" "Quackle::Rack const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Rack * >(argp1);
  result = (unsigned int)((Quackle::Rack const *)arg1)->size();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Rack_unload(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Rack *arg1 = (Quackle::Rack *) 0 ;
  Quackle::LetterString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Rack_unload", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Rack, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rack_unload" "', argument " "1"" of type '" "Quackle::Rack *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Rack * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__FixedLengthString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rack_unload" "', argument " "2"" of type '" "Quackle::LetterString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rack_unload" "', argument " "2"" of type '" "Quackle::LetterString const &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::LetterString * >(argp2);
  result = (bool)(arg1)->unload((Quackle::LetterString const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Rack_load(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Rack *arg1 = (Quackle::Rack *) 0 ;
  Quackle::LetterString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Rack_load", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Rack, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rack_load" "', argument " "1"" of type '" "Quackle::Rack *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Rack * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__FixedLengthString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rack_load" "', argument " "2"" of type '" "Quackle::LetterString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rack_load" "', argument " "2"" of type '" "Quackle::LetterString const &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::LetterString * >(argp2);
  (arg1)->load((Quackle::LetterString const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Rack_contains(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Rack *arg1 = (Quackle::Rack *) 0 ;
  Quackle::LetterString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Rack_contains", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Rack, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rack_contains" "', argument " "1"" of type '" "Quackle::Rack const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Rack * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__FixedLengthString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rack_contains" "', argument " "2"" of type '" "Quackle::LetterString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rack_contains" "', argument " "2"" of type '" "Quackle::LetterString const &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::LetterString * >(argp2);
  result = (bool)((Quackle::Rack const *)arg1)->contains((Quackle::LetterString const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Rack_shuffle(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Rack *arg1 = (Quackle::Rack *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Rack, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rack_shuffle" "', argument " "1"" of type '" "Quackle::Rack *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Rack * >(argp1);
  (arg1)->shuffle();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Rack_score(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Rack *arg1 = (Quackle::Rack *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Rack, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rack_score" "', argument " "1"" of type '" "Quackle::Rack const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Rack * >(argp1);
  result = (int)((Quackle::Rack const *)arg1)->score();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Rack_xml(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Rack *arg1 = (Quackle::Rack *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  UVString result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Rack, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rack_xml" "', argument " "1"" of type '" "Quackle::Rack const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Rack * >(argp1);
  result = ((Quackle::Rack const *)arg1)->xml();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Rack_toString(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Rack *arg1 = (Quackle::Rack *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  UVString result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Rack, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rack_toString" "', argument " "1"" of type '" "Quackle::Rack const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Rack * >(argp1);
  result = ((Quackle::Rack const *)arg1)->toString();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Rack(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Rack *arg1 = (Quackle::Rack *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Rack, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Rack" "', argument " "1"" of type '" "Quackle::Rack *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Rack * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Rack_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Quackle__Rack, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Rack_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_Bag__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  Quackle::Bag *result = 0 ;
  
  (void)self;
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (Quackle::Bag *)new Quackle::Bag();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__Bag, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Bag__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Quackle::LetterString *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Quackle::Bag *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_Quackle__FixedLengthString,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Bag" "', argument " "1"" of type '" "Quackle::LetterString const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Bag" "', argument " "1"" of type '" "Quackle::LetterString const &""'"); 
  }
  arg1 = reinterpret_cast< Quackle::LetterString * >(argp1);
  result = (Quackle::Bag *)new Quackle::Bag((Quackle::LetterString const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__Bag, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Bag(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_Bag", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_Bag__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Quackle__FixedLengthString, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Bag__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_Bag'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Quackle::Bag::Bag()\n"
    "    Quackle::Bag::Bag(Quackle::LetterString const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Bag_clear(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Bag *arg1 = (Quackle::Bag *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Bag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Bag_clear" "', argument " "1"" of type '" "Quackle::Bag *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Bag * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Bag_exch(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Bag *arg1 = (Quackle::Bag *) 0 ;
  Quackle::Move *arg2 = 0 ;
  Quackle::Rack *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Bag_exch", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Bag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Bag_exch" "', argument " "1"" of type '" "Quackle::Bag *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Bag * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__Move,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Bag_exch" "', argument " "2"" of type '" "Quackle::Move const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Bag_exch" "', argument " "2"" of type '" "Quackle::Move const &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::Move * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_Quackle__Rack,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Bag_exch" "', argument " "3"" of type '" "Quackle::Rack &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Bag_exch" "', argument " "3"" of type '" "Quackle::Rack &""'"); 
  }
  arg3 = reinterpret_cast< Quackle::Rack * >(argp3);
  (arg1)->exch((Quackle::Move const &)*arg2,*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Bag_pluck(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Bag *arg1 = (Quackle::Bag *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Quackle::Letter result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Bag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Bag_pluck" "', argument " "1"" of type '" "Quackle::Bag *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Bag * >(argp1);
  result = (Quackle::Letter)(arg1)->pluck();
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Bag_removeLetters__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Quackle::Bag *arg1 = (Quackle::Bag *) 0 ;
  Quackle::LetterString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Bag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Bag_removeLetters" "', argument " "1"" of type '" "Quackle::Bag *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Bag * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__FixedLengthString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Bag_removeLetters" "', argument " "2"" of type '" "Quackle::LetterString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Bag_removeLetters" "', argument " "2"" of type '" "Quackle::LetterString const &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::LetterString * >(argp2);
  result = (bool)(arg1)->removeLetters((Quackle::LetterString const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Bag_removeLetters__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Quackle::Bag *arg1 = (Quackle::Bag *) 0 ;
  Quackle::LongLetterString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  bool result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Bag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Bag_removeLetters" "', argument " "1"" of type '" "Quackle::Bag *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Bag * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Bag_removeLetters" "', argument " "2"" of type '" "Quackle::LongLetterString const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Bag_removeLetters" "', argument " "2"" of type '" "Quackle::LongLetterString const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)(arg1)->removeLetters((Quackle::LongLetterString const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Bag_removeLetters(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Bag_removeLetters", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Quackle__Bag, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Quackle__FixedLengthString, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Bag_removeLetters__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Quackle__Bag, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Bag_removeLetters__SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Bag_removeLetters'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Quackle::Bag::removeLetters(Quackle::LetterString const &)\n"
    "    Quackle::Bag::removeLetters(Quackle::LongLetterString const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Bag_removeLetter(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Bag *arg1 = (Quackle::Bag *) 0 ;
  Quackle::Letter arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Bag_removeLetter", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Bag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Bag_removeLetter" "', argument " "1"" of type '" "Quackle::Bag *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Bag * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Bag_removeLetter" "', argument " "2"" of type '" "Quackle::Letter""'");
  } 
  arg2 = static_cast< Quackle::Letter >(val2);
  result = (bool)(arg1)->removeLetter(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Bag_letterCounts(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Bag *arg1 = (Quackle::Bag *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Bag_letterCounts", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Bag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Bag_letterCounts" "', argument " "1"" of type '" "Quackle::Bag const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Bag * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Bag_letterCounts" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ((Quackle::Bag const *)arg1)->letterCounts(arg2);
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Bag_toss__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Quackle::Bag *arg1 = (Quackle::Bag *) 0 ;
  Quackle::LetterString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Bag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Bag_toss" "', argument " "1"" of type '" "Quackle::Bag *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Bag * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__FixedLengthString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Bag_toss" "', argument " "2"" of type '" "Quackle::LetterString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Bag_toss" "', argument " "2"" of type '" "Quackle::LetterString const &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::LetterString * >(argp2);
  (arg1)->toss((Quackle::LetterString const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Bag_toss__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Quackle::Bag *arg1 = (Quackle::Bag *) 0 ;
  Quackle::LongLetterString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Bag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Bag_toss" "', argument " "1"" of type '" "Quackle::Bag *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Bag * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Bag_toss" "', argument " "2"" of type '" "Quackle::LongLetterString const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Bag_toss" "', argument " "2"" of type '" "Quackle::LongLetterString const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->toss((Quackle::LongLetterString const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Bag_toss__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Quackle::Bag *arg1 = (Quackle::Bag *) 0 ;
  Quackle::Rack *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Bag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Bag_toss" "', argument " "1"" of type '" "Quackle::Bag *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Bag * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__Rack,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Bag_toss" "', argument " "2"" of type '" "Quackle::Rack const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Bag_toss" "', argument " "2"" of type '" "Quackle::Rack const &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::Rack * >(argp2);
  (arg1)->toss((Quackle::Rack const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Bag_toss(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Bag_toss", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Quackle__Bag, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Quackle__FixedLengthString, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Bag_toss__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Quackle__Bag, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Quackle__Rack, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Bag_toss__SWIG_2(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Quackle__Bag, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Bag_toss__SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Bag_toss'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Quackle::Bag::toss(Quackle::LetterString const &)\n"
    "    Quackle::Bag::toss(Quackle::LongLetterString const &)\n"
    "    Quackle::Bag::toss(Quackle::Rack const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Bag_refill__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Quackle::Bag *arg1 = (Quackle::Bag *) 0 ;
  Quackle::Rack *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Bag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Bag_refill" "', argument " "1"" of type '" "Quackle::Bag *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Bag * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__Rack,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Bag_refill" "', argument " "2"" of type '" "Quackle::Rack &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Bag_refill" "', argument " "2"" of type '" "Quackle::Rack &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::Rack * >(argp2);
  (arg1)->refill(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Bag_refill__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Quackle::Bag *arg1 = (Quackle::Bag *) 0 ;
  Quackle::Rack *arg2 = 0 ;
  Quackle::LetterString *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  Quackle::LetterString result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Bag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Bag_refill" "', argument " "1"" of type '" "Quackle::Bag *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Bag * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__Rack,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Bag_refill" "', argument " "2"" of type '" "Quackle::Rack &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Bag_refill" "', argument " "2"" of type '" "Quackle::Rack &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::Rack * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_Quackle__FixedLengthString,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Bag_refill" "', argument " "3"" of type '" "Quackle::LetterString const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Bag_refill" "', argument " "3"" of type '" "Quackle::LetterString const &""'"); 
  }
  arg3 = reinterpret_cast< Quackle::LetterString * >(argp3);
  result = (arg1)->refill(*arg2,(Quackle::LetterString const &)*arg3);
  resultobj = SWIG_NewPointerObj((new Quackle::LetterString(result)), SWIGTYPE_p_Quackle__FixedLengthString, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Bag_refill(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Bag_refill", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Quackle__Bag, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Quackle__Rack, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Bag_refill__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Quackle__Bag, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Quackle__Rack, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_Quackle__FixedLengthString, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Bag_refill__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Bag_refill'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Quackle::Bag::refill(Quackle::Rack &)\n"
    "    Quackle::Bag::refill(Quackle::Rack &,Quackle::LetterString const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Bag_prepareFullBag(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Bag *arg1 = (Quackle::Bag *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Bag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Bag_prepareFullBag" "', argument " "1"" of type '" "Quackle::Bag *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Bag * >(argp1);
  (arg1)->prepareFullBag();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Bag_fullBagTileCount(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Bag *arg1 = (Quackle::Bag *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Bag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Bag_fullBagTileCount" "', argument " "1"" of type '" "Quackle::Bag *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Bag * >(argp1);
  result = (int)(arg1)->fullBagTileCount();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Bag_empty(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Bag *arg1 = (Quackle::Bag *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Bag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Bag_empty" "', argument " "1"" of type '" "Quackle::Bag const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Bag * >(argp1);
  result = (bool)((Quackle::Bag const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Bag_size(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Bag *arg1 = (Quackle::Bag *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Bag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Bag_size" "', argument " "1"" of type '" "Quackle::Bag const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Bag * >(argp1);
  result = (int)((Quackle::Bag const *)arg1)->size();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Bag_tiles(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Bag *arg1 = (Quackle::Bag *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Quackle::LongLetterString *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Bag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Bag_tiles" "', argument " "1"" of type '" "Quackle::Bag const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Bag * >(argp1);
  result = (Quackle::LongLetterString *) &((Quackle::Bag const *)arg1)->tiles();
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Bag_shuffledTiles(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Bag *arg1 = (Quackle::Bag *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Quackle::LongLetterString result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Bag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Bag_shuffledTiles" "', argument " "1"" of type '" "Quackle::Bag const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Bag * >(argp1);
  result = ((Quackle::Bag const *)arg1)->shuffledTiles();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Bag_someShuffledTiles(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Bag *arg1 = (Quackle::Bag *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Quackle::LetterString result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Bag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Bag_someShuffledTiles" "', argument " "1"" of type '" "Quackle::Bag const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Bag * >(argp1);
  result = ((Quackle::Bag const *)arg1)->someShuffledTiles();
  resultobj = SWIG_NewPointerObj((new Quackle::LetterString(result)), SWIGTYPE_p_Quackle__FixedLengthString, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Bag_probabilityOfDrawingFromFullBag(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::LetterString *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_Quackle__FixedLengthString,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Bag_probabilityOfDrawingFromFullBag" "', argument " "1"" of type '" "Quackle::LetterString const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Bag_probabilityOfDrawingFromFullBag" "', argument " "1"" of type '" "Quackle::LetterString const &""'"); 
  }
  arg1 = reinterpret_cast< Quackle::LetterString * >(argp1);
  result = (double)Quackle::Bag::probabilityOfDrawingFromFullBag((Quackle::FixedLengthString const &)*arg1);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Bag_probabilityOfDrawingFromBag(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::LetterString *arg1 = 0 ;
  Quackle::Bag *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Bag_probabilityOfDrawingFromBag", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_Quackle__FixedLengthString,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Bag_probabilityOfDrawingFromBag" "', argument " "1"" of type '" "Quackle::LetterString const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Bag_probabilityOfDrawingFromBag" "', argument " "1"" of type '" "Quackle::LetterString const &""'"); 
  }
  arg1 = reinterpret_cast< Quackle::LetterString * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__Bag,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Bag_probabilityOfDrawingFromBag" "', argument " "2"" of type '" "Quackle::Bag const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Bag_probabilityOfDrawingFromBag" "', argument " "2"" of type '" "Quackle::Bag const &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::Bag * >(argp2);
  result = (double)Quackle::Bag::probabilityOfDrawingFromBag((Quackle::FixedLengthString const &)*arg1,(Quackle::Bag const &)*arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Bag_probabilityOfDrawing(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Bag *arg1 = (Quackle::Bag *) 0 ;
  Quackle::LetterString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Bag_probabilityOfDrawing", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Bag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Bag_probabilityOfDrawing" "', argument " "1"" of type '" "Quackle::Bag *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Bag * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__FixedLengthString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Bag_probabilityOfDrawing" "', argument " "2"" of type '" "Quackle::LetterString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Bag_probabilityOfDrawing" "', argument " "2"" of type '" "Quackle::LetterString const &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::LetterString * >(argp2);
  result = (double)(arg1)->probabilityOfDrawing((Quackle::LetterString const &)*arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Bag_toString(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Bag *arg1 = (Quackle::Bag *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  UVString result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Bag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Bag_toString" "', argument " "1"" of type '" "Quackle::Bag const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Bag * >(argp1);
  result = ((Quackle::Bag const *)arg1)->toString();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Bag(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Bag *arg1 = (Quackle::Bag *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Bag, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Bag" "', argument " "1"" of type '" "Quackle::Bag *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Bag * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Bag_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Quackle__Bag, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Bag_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_Board__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  Quackle::Board *result = 0 ;
  
  (void)self;
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (Quackle::Board *)new Quackle::Board();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__Board, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Board__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  Quackle::Board *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Board" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Board" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (Quackle::Board *)new Quackle::Board(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__Board, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Board(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_Board", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_Board__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    int _v = 0;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Board__SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_Board'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Quackle::Board::Board()\n"
    "    Quackle::Board::Board(int,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Board_prepareEmptyBoard(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Board *arg1 = (Quackle::Board *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Board, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Board_prepareEmptyBoard" "', argument " "1"" of type '" "Quackle::Board *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Board * >(argp1);
  (arg1)->prepareEmptyBoard();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Board_width(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Board *arg1 = (Quackle::Board *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Board, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Board_width" "', argument " "1"" of type '" "Quackle::Board const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Board * >(argp1);
  result = (int)((Quackle::Board const *)arg1)->width();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Board_height(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Board *arg1 = (Quackle::Board *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Board, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Board_height" "', argument " "1"" of type '" "Quackle::Board const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Board * >(argp1);
  result = (int)((Quackle::Board const *)arg1)->height();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Board_tilesNotOnBoard(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Board *arg1 = (Quackle::Board *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Quackle::Bag result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Board, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Board_tilesNotOnBoard" "', argument " "1"" of type '" "Quackle::Board const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Board * >(argp1);
  result = ((Quackle::Board const *)arg1)->tilesNotOnBoard();
  resultobj = SWIG_NewPointerObj((new Quackle::Bag(result)), SWIGTYPE_p_Quackle__Bag, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Board_tilesOnBoard(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Board *arg1 = (Quackle::Board *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Quackle::Bag result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Board, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Board_tilesOnBoard" "', argument " "1"" of type '" "Quackle::Board const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Board * >(argp1);
  result = ((Quackle::Board const *)arg1)->tilesOnBoard();
  resultobj = SWIG_NewPointerObj((new Quackle::Bag(result)), SWIGTYPE_p_Quackle__Bag, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Board_isEmpty(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Board *arg1 = (Quackle::Board *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Board, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Board_isEmpty" "', argument " "1"" of type '" "Quackle::Board const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Board * >(argp1);
  result = (bool)((Quackle::Board const *)arg1)->isEmpty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Board_makeMove(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Board *arg1 = (Quackle::Board *) 0 ;
  Quackle::Move *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Board_makeMove", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Board, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Board_makeMove" "', argument " "1"" of type '" "Quackle::Board *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Board * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__Move,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Board_makeMove" "', argument " "2"" of type '" "Quackle::Move const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Board_makeMove" "', argument " "2"" of type '" "Quackle::Move const &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::Move * >(argp2);
  (arg1)->makeMove((Quackle::Move const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Board_allWordsFormedBy(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Board *arg1 = (Quackle::Board *) 0 ;
  Quackle::Move *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  Quackle::MoveList result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Board_allWordsFormedBy", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Board, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Board_allWordsFormedBy" "', argument " "1"" of type '" "Quackle::Board const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Board * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__Move,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Board_allWordsFormedBy" "', argument " "2"" of type '" "Quackle::Move const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Board_allWordsFormedBy" "', argument " "2"" of type '" "Quackle::Move const &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::Move * >(argp2);
  result = ((Quackle::Board const *)arg1)->allWordsFormedBy((Quackle::Move const &)*arg2);
  resultobj = SWIG_NewPointerObj((new Quackle::MoveList(result)), SWIGTYPE_p_Quackle__MoveList, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Board_isConnected(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Board *arg1 = (Quackle::Board *) 0 ;
  Quackle::Move *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Board_isConnected", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Board, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Board_isConnected" "', argument " "1"" of type '" "Quackle::Board const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Board * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__Move,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Board_isConnected" "', argument " "2"" of type '" "Quackle::Move const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Board_isConnected" "', argument " "2"" of type '" "Quackle::Move const &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::Move * >(argp2);
  result = (bool)((Quackle::Board const *)arg1)->isConnected((Quackle::Move const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Board_isUnacceptableOpeningMove(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Board *arg1 = (Quackle::Board *) 0 ;
  Quackle::Move *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Board_isUnacceptableOpeningMove", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Board, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Board_isUnacceptableOpeningMove" "', argument " "1"" of type '" "Quackle::Board const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Board * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__Move,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Board_isUnacceptableOpeningMove" "', argument " "2"" of type '" "Quackle::Move const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Board_isUnacceptableOpeningMove" "', argument " "2"" of type '" "Quackle::Move const &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::Move * >(argp2);
  result = (bool)((Quackle::Board const *)arg1)->isUnacceptableOpeningMove((Quackle::Move const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Board_updateBritishness(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Board *arg1 = (Quackle::Board *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Board, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Board_updateBritishness" "', argument " "1"" of type '" "Quackle::Board *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Board * >(argp1);
  (arg1)->updateBritishness();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Board_score__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Quackle::Board *arg1 = (Quackle::Board *) 0 ;
  Quackle::Move *arg2 = 0 ;
  bool *arg3 = (bool *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Board, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Board_score" "', argument " "1"" of type '" "Quackle::Board const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Board * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__Move,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Board_score" "', argument " "2"" of type '" "Quackle::Move const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Board_score" "', argument " "2"" of type '" "Quackle::Move const &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::Move * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_bool, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Board_score" "', argument " "3"" of type '" "bool *""'"); 
  }
  arg3 = reinterpret_cast< bool * >(argp3);
  result = (int)((Quackle::Board const *)arg1)->score((Quackle::Move const &)*arg2,arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Board_score__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Quackle::Board *arg1 = (Quackle::Board *) 0 ;
  Quackle::Move *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Board, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Board_score" "', argument " "1"" of type '" "Quackle::Board const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Board * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__Move,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Board_score" "', argument " "2"" of type '" "Quackle::Move const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Board_score" "', argument " "2"" of type '" "Quackle::Move const &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::Move * >(argp2);
  result = (int)((Quackle::Board const *)arg1)->score((Quackle::Move const &)*arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Board_score(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Board_score", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Quackle__Board, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Quackle__Move, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Board_score__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Quackle__Board, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Quackle__Move, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_bool, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Board_score__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Board_score'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Quackle::Board::score(Quackle::Move const &,bool *) const\n"
    "    Quackle::Board::score(Quackle::Move const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Board_prettyTilesOfMove__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Quackle::Board *arg1 = (Quackle::Board *) 0 ;
  Quackle::Move *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  Quackle::LetterString result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Board, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Board_prettyTilesOfMove" "', argument " "1"" of type '" "Quackle::Board const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Board * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__Move,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Board_prettyTilesOfMove" "', argument " "2"" of type '" "Quackle::Move const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Board_prettyTilesOfMove" "', argument " "2"" of type '" "Quackle::Move const &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::Move * >(argp2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Board_prettyTilesOfMove" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = ((Quackle::Board const *)arg1)->prettyTilesOfMove((Quackle::Move const &)*arg2,arg3);
  resultobj = SWIG_NewPointerObj((new Quackle::LetterString(result)), SWIGTYPE_p_Quackle__FixedLengthString, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Board_prettyTilesOfMove__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Quackle::Board *arg1 = (Quackle::Board *) 0 ;
  Quackle::Move *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  Quackle::LetterString result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Board, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Board_prettyTilesOfMove" "', argument " "1"" of type '" "Quackle::Board const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Board * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__Move,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Board_prettyTilesOfMove" "', argument " "2"" of type '" "Quackle::Move const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Board_prettyTilesOfMove" "', argument " "2"" of type '" "Quackle::Move const &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::Move * >(argp2);
  result = ((Quackle::Board const *)arg1)->prettyTilesOfMove((Quackle::Move const &)*arg2);
  resultobj = SWIG_NewPointerObj((new Quackle::LetterString(result)), SWIGTYPE_p_Quackle__FixedLengthString, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Board_prettyTilesOfMove(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Board_prettyTilesOfMove", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Quackle__Board, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Quackle__Move, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Board_prettyTilesOfMove__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Quackle__Board, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Quackle__Move, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Board_prettyTilesOfMove__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Board_prettyTilesOfMove'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Quackle::Board::prettyTilesOfMove(Quackle::Move const &,bool) const\n"
    "    Quackle::Board::prettyTilesOfMove(Quackle::Move const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Board_sanitizedTilesOfMove(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Board *arg1 = (Quackle::Board *) 0 ;
  Quackle::Move *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  Quackle::LetterString result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Board_sanitizedTilesOfMove", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Board, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Board_sanitizedTilesOfMove" "', argument " "1"" of type '" "Quackle::Board const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Board * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__Move,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Board_sanitizedTilesOfMove" "', argument " "2"" of type '" "Quackle::Move const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Board_sanitizedTilesOfMove" "', argument " "2"" of type '" "Quackle::Move const &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::Move * >(argp2);
  result = ((Quackle::Board const *)arg1)->sanitizedTilesOfMove((Quackle::Move const &)*arg2);
  resultobj = SWIG_NewPointerObj((new Quackle::LetterString(result)), SWIGTYPE_p_Quackle__FixedLengthString, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Board_toString(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Board *arg1 = (Quackle::Board *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  UVString result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Board, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Board_toString" "', argument " "1"" of type '" "Quackle::Board const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Board * >(argp1);
  result = ((Quackle::Board const *)arg1)->toString();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Board_htmlBoard(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Board *arg1 = (Quackle::Board *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  UVString result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Board_htmlBoard", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Board, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Board_htmlBoard" "', argument " "1"" of type '" "Quackle::Board const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Board * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Board_htmlBoard" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = ((Quackle::Board const *)arg1)->htmlBoard(arg2);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Board_htmlKey(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Board *arg1 = (Quackle::Board *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  UVString result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Board, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Board_htmlKey" "', argument " "1"" of type '" "Quackle::Board const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Board * >(argp1);
  result = ((Quackle::Board const *)arg1)->htmlKey();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Board_tileInformation(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Board *arg1 = (Quackle::Board *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  Quackle::Board::TileInformation result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Board_tileInformation", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Board, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Board_tileInformation" "', argument " "1"" of type '" "Quackle::Board const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Board * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Board_tileInformation" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Board_tileInformation" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = ((Quackle::Board const *)arg1)->tileInformation(arg2,arg3);
  resultobj = SWIG_NewPointerObj((new Quackle::Board::TileInformation(result)), SWIGTYPE_p_Quackle__Board__TileInformation, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Board_letter(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Board *arg1 = (Quackle::Board *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  Quackle::Letter result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Board_letter", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Board, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Board_letter" "', argument " "1"" of type '" "Quackle::Board const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Board * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Board_letter" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Board_letter" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (Quackle::Letter)((Quackle::Board const *)arg1)->letter(arg2,arg3);
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Board_isBlank(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Board *arg1 = (Quackle::Board *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  bool result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Board_isBlank", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Board, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Board_isBlank" "', argument " "1"" of type '" "Quackle::Board const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Board * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Board_isBlank" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Board_isBlank" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (bool)((Quackle::Board const *)arg1)->isBlank(arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Board_isBritish(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Board *arg1 = (Quackle::Board *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  bool result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Board_isBritish", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Board, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Board_isBritish" "', argument " "1"" of type '" "Quackle::Board const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Board * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Board_isBritish" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Board_isBritish" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (bool)((Quackle::Board const *)arg1)->isBritish(arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Board_vcross(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Board *arg1 = (Quackle::Board *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  LetterBitset *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Board_vcross", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Board, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Board_vcross" "', argument " "1"" of type '" "Quackle::Board const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Board * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Board_vcross" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Board_vcross" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (LetterBitset *) &((Quackle::Board const *)arg1)->vcross(arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__bitsetT_55_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Board_setVCross(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Board *arg1 = (Quackle::Board *) 0 ;
  int arg2 ;
  int arg3 ;
  LetterBitset *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject *swig_obj[4] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Board_setVCross", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Board, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Board_setVCross" "', argument " "1"" of type '" "Quackle::Board *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Board * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Board_setVCross" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Board_setVCross" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_std__bitsetT_55_t,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Board_setVCross" "', argument " "4"" of type '" "LetterBitset const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Board_setVCross" "', argument " "4"" of type '" "LetterBitset const &""'"); 
  }
  arg4 = reinterpret_cast< LetterBitset * >(argp4);
  (arg1)->setVCross(arg2,arg3,(LetterBitset const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Board_hcross(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Board *arg1 = (Quackle::Board *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  LetterBitset *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Board_hcross", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Board, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Board_hcross" "', argument " "1"" of type '" "Quackle::Board const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Board * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Board_hcross" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Board_hcross" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (LetterBitset *) &((Quackle::Board const *)arg1)->hcross(arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__bitsetT_55_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Board_setHCross(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Board *arg1 = (Quackle::Board *) 0 ;
  int arg2 ;
  int arg3 ;
  LetterBitset *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject *swig_obj[4] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Board_setHCross", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Board, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Board_setHCross" "', argument " "1"" of type '" "Quackle::Board *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Board * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Board_setHCross" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Board_setHCross" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_std__bitsetT_55_t,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Board_setHCross" "', argument " "4"" of type '" "LetterBitset const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Board_setHCross" "', argument " "4"" of type '" "LetterBitset const &""'"); 
  }
  arg4 = reinterpret_cast< LetterBitset * >(argp4);
  (arg1)->setHCross(arg2,arg3,(LetterBitset const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Board(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Board *arg1 = (Quackle::Board *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Board, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Board" "', argument " "1"" of type '" "Quackle::Board *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Board * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Board_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Quackle__Board, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Board_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_BoardParameters(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::BoardParameters *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "new_BoardParameters", 0, 0, 0)) SWIG_fail;
  result = (Quackle::BoardParameters *)new Quackle::BoardParameters();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__BoardParameters, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BoardParameters_Serialize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::BoardParameters *arg1 = (Quackle::BoardParameters *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "BoardParameters_Serialize", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__BoardParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BoardParameters_Serialize" "', argument " "1"" of type '" "Quackle::BoardParameters *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::BoardParameters * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BoardParameters_Serialize" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BoardParameters_Serialize" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  (arg1)->Serialize(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BoardParameters_Deserialize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::istream *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Quackle::BoardParameters *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__istream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BoardParameters_Deserialize" "', argument " "1"" of type '" "std::istream &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BoardParameters_Deserialize" "', argument " "1"" of type '" "std::istream &""'"); 
  }
  arg1 = reinterpret_cast< std::istream * >(argp1);
  result = (Quackle::BoardParameters *)Quackle::BoardParameters::Deserialize(*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__BoardParameters, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BoardParameters_width(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::BoardParameters *arg1 = (Quackle::BoardParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__BoardParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BoardParameters_width" "', argument " "1"" of type '" "Quackle::BoardParameters const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::BoardParameters * >(argp1);
  result = (int)((Quackle::BoardParameters const *)arg1)->width();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BoardParameters_setWidth(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::BoardParameters *arg1 = (Quackle::BoardParameters *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "BoardParameters_setWidth", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__BoardParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BoardParameters_setWidth" "', argument " "1"" of type '" "Quackle::BoardParameters *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::BoardParameters * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BoardParameters_setWidth" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->setWidth(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BoardParameters_height(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::BoardParameters *arg1 = (Quackle::BoardParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__BoardParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BoardParameters_height" "', argument " "1"" of type '" "Quackle::BoardParameters const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::BoardParameters * >(argp1);
  result = (int)((Quackle::BoardParameters const *)arg1)->height();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BoardParameters_setHeight(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::BoardParameters *arg1 = (Quackle::BoardParameters *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "BoardParameters_setHeight", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__BoardParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BoardParameters_setHeight" "', argument " "1"" of type '" "Quackle::BoardParameters *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::BoardParameters * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BoardParameters_setHeight" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->setHeight(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BoardParameters_startRow(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::BoardParameters *arg1 = (Quackle::BoardParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__BoardParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BoardParameters_startRow" "', argument " "1"" of type '" "Quackle::BoardParameters const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::BoardParameters * >(argp1);
  result = (int)((Quackle::BoardParameters const *)arg1)->startRow();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BoardParameters_setStartRow(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::BoardParameters *arg1 = (Quackle::BoardParameters *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "BoardParameters_setStartRow", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__BoardParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BoardParameters_setStartRow" "', argument " "1"" of type '" "Quackle::BoardParameters *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::BoardParameters * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BoardParameters_setStartRow" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->setStartRow(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BoardParameters_startColumn(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::BoardParameters *arg1 = (Quackle::BoardParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__BoardParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BoardParameters_startColumn" "', argument " "1"" of type '" "Quackle::BoardParameters const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::BoardParameters * >(argp1);
  result = (int)((Quackle::BoardParameters const *)arg1)->startColumn();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BoardParameters_setStartColumn(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::BoardParameters *arg1 = (Quackle::BoardParameters *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "BoardParameters_setStartColumn", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__BoardParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BoardParameters_setStartColumn" "', argument " "1"" of type '" "Quackle::BoardParameters *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::BoardParameters * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BoardParameters_setStartColumn" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->setStartColumn(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BoardParameters_letterMultiplier(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::BoardParameters *arg1 = (Quackle::BoardParameters *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "BoardParameters_letterMultiplier", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__BoardParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BoardParameters_letterMultiplier" "', argument " "1"" of type '" "Quackle::BoardParameters const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::BoardParameters * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BoardParameters_letterMultiplier" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BoardParameters_letterMultiplier" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (int)((Quackle::BoardParameters const *)arg1)->letterMultiplier(arg2,arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BoardParameters_setLetterMultiplier(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::BoardParameters *arg1 = (Quackle::BoardParameters *) 0 ;
  int arg2 ;
  int arg3 ;
  Quackle::BoardParameters::LetterMultiplier arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "BoardParameters_setLetterMultiplier", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__BoardParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BoardParameters_setLetterMultiplier" "', argument " "1"" of type '" "Quackle::BoardParameters *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::BoardParameters * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BoardParameters_setLetterMultiplier" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BoardParameters_setLetterMultiplier" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "BoardParameters_setLetterMultiplier" "', argument " "4"" of type '" "Quackle::BoardParameters::LetterMultiplier""'");
  } 
  arg4 = static_cast< Quackle::BoardParameters::LetterMultiplier >(val4);
  (arg1)->setLetterMultiplier(arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BoardParameters_wordMultiplier(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::BoardParameters *arg1 = (Quackle::BoardParameters *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "BoardParameters_wordMultiplier", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__BoardParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BoardParameters_wordMultiplier" "', argument " "1"" of type '" "Quackle::BoardParameters const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::BoardParameters * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BoardParameters_wordMultiplier" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BoardParameters_wordMultiplier" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (int)((Quackle::BoardParameters const *)arg1)->wordMultiplier(arg2,arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BoardParameters_setWordMultiplier(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::BoardParameters *arg1 = (Quackle::BoardParameters *) 0 ;
  int arg2 ;
  int arg3 ;
  Quackle::BoardParameters::WordMultiplier arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "BoardParameters_setWordMultiplier", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__BoardParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BoardParameters_setWordMultiplier" "', argument " "1"" of type '" "Quackle::BoardParameters *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::BoardParameters * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BoardParameters_setWordMultiplier" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BoardParameters_setWordMultiplier" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "BoardParameters_setWordMultiplier" "', argument " "4"" of type '" "Quackle::BoardParameters::WordMultiplier""'");
  } 
  arg4 = static_cast< Quackle::BoardParameters::WordMultiplier >(val4);
  (arg1)->setWordMultiplier(arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BoardParameters_name(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::BoardParameters *arg1 = (Quackle::BoardParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  UVString result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__BoardParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BoardParameters_name" "', argument " "1"" of type '" "Quackle::BoardParameters const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::BoardParameters * >(argp1);
  result = ((Quackle::BoardParameters const *)arg1)->name();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BoardParameters_setName(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::BoardParameters *arg1 = (Quackle::BoardParameters *) 0 ;
  UVString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "BoardParameters_setName", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__BoardParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BoardParameters_setName" "', argument " "1"" of type '" "Quackle::BoardParameters *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::BoardParameters * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BoardParameters_setName" "', argument " "2"" of type '" "UVString const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BoardParameters_setName" "', argument " "2"" of type '" "UVString const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->setName((UVString const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_BoardParameters(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::BoardParameters *arg1 = (Quackle::BoardParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__BoardParameters, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_BoardParameters" "', argument " "1"" of type '" "Quackle::BoardParameters *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::BoardParameters * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *BoardParameters_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Quackle__BoardParameters, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *BoardParameters_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_EnglishBoard(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::EnglishBoard *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "new_EnglishBoard", 0, 0, 0)) SWIG_fail;
  result = (Quackle::EnglishBoard *)new Quackle::EnglishBoard();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__EnglishBoard, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_EnglishBoard(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::EnglishBoard *arg1 = (Quackle::EnglishBoard *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__EnglishBoard, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_EnglishBoard" "', argument " "1"" of type '" "Quackle::EnglishBoard *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::EnglishBoard * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *EnglishBoard_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Quackle__EnglishBoard, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *EnglishBoard_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_delete_Evaluator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Evaluator *arg1 = (Quackle::Evaluator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Evaluator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Evaluator" "', argument " "1"" of type '" "Quackle::Evaluator *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Evaluator * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Evaluator_equity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Evaluator *arg1 = (Quackle::Evaluator *) 0 ;
  Quackle::GamePosition *arg2 = 0 ;
  Quackle::Move *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  double result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Evaluator_equity", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Evaluator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Evaluator_equity" "', argument " "1"" of type '" "Quackle::Evaluator const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Evaluator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__GamePosition,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Evaluator_equity" "', argument " "2"" of type '" "Quackle::GamePosition const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Evaluator_equity" "', argument " "2"" of type '" "Quackle::GamePosition const &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::GamePosition * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_Quackle__Move,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Evaluator_equity" "', argument " "3"" of type '" "Quackle::Move const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Evaluator_equity" "', argument " "3"" of type '" "Quackle::Move const &""'"); 
  }
  arg3 = reinterpret_cast< Quackle::Move * >(argp3);
  result = (double)((Quackle::Evaluator const *)arg1)->equity((Quackle::GamePosition const &)*arg2,(Quackle::Move const &)*arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Evaluator_playerConsideration(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Evaluator *arg1 = (Quackle::Evaluator *) 0 ;
  Quackle::GamePosition *arg2 = 0 ;
  Quackle::Move *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  double result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Evaluator_playerConsideration", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Evaluator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Evaluator_playerConsideration" "', argument " "1"" of type '" "Quackle::Evaluator const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Evaluator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__GamePosition,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Evaluator_playerConsideration" "', argument " "2"" of type '" "Quackle::GamePosition const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Evaluator_playerConsideration" "', argument " "2"" of type '" "Quackle::GamePosition const &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::GamePosition * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_Quackle__Move,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Evaluator_playerConsideration" "', argument " "3"" of type '" "Quackle::Move const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Evaluator_playerConsideration" "', argument " "3"" of type '" "Quackle::Move const &""'"); 
  }
  arg3 = reinterpret_cast< Quackle::Move * >(argp3);
  result = (double)((Quackle::Evaluator const *)arg1)->playerConsideration((Quackle::GamePosition const &)*arg2,(Quackle::Move const &)*arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Evaluator_sharedConsideration(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Evaluator *arg1 = (Quackle::Evaluator *) 0 ;
  Quackle::GamePosition *arg2 = 0 ;
  Quackle::Move *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  double result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Evaluator_sharedConsideration", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Evaluator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Evaluator_sharedConsideration" "', argument " "1"" of type '" "Quackle::Evaluator const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Evaluator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__GamePosition,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Evaluator_sharedConsideration" "', argument " "2"" of type '" "Quackle::GamePosition const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Evaluator_sharedConsideration" "', argument " "2"" of type '" "Quackle::GamePosition const &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::GamePosition * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_Quackle__Move,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Evaluator_sharedConsideration" "', argument " "3"" of type '" "Quackle::Move const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Evaluator_sharedConsideration" "', argument " "3"" of type '" "Quackle::Move const &""'"); 
  }
  arg3 = reinterpret_cast< Quackle::Move * >(argp3);
  result = (double)((Quackle::Evaluator const *)arg1)->sharedConsideration((Quackle::GamePosition const &)*arg2,(Quackle::Move const &)*arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Evaluator_leaveValue(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Evaluator *arg1 = (Quackle::Evaluator *) 0 ;
  Quackle::LetterString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Evaluator_leaveValue", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Evaluator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Evaluator_leaveValue" "', argument " "1"" of type '" "Quackle::Evaluator const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Evaluator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__FixedLengthString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Evaluator_leaveValue" "', argument " "2"" of type '" "Quackle::LetterString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Evaluator_leaveValue" "', argument " "2"" of type '" "Quackle::LetterString const &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::LetterString * >(argp2);
  result = (double)((Quackle::Evaluator const *)arg1)->leaveValue((Quackle::LetterString const &)*arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Evaluator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Evaluator *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "new_Evaluator", 0, 0, 0)) SWIG_fail;
  result = (Quackle::Evaluator *)new Quackle::Evaluator();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__Evaluator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Evaluator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Quackle__Evaluator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Evaluator_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_delete_ScorePlusLeaveEvaluator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::ScorePlusLeaveEvaluator *arg1 = (Quackle::ScorePlusLeaveEvaluator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__ScorePlusLeaveEvaluator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ScorePlusLeaveEvaluator" "', argument " "1"" of type '" "Quackle::ScorePlusLeaveEvaluator *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::ScorePlusLeaveEvaluator * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScorePlusLeaveEvaluator_equity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::ScorePlusLeaveEvaluator *arg1 = (Quackle::ScorePlusLeaveEvaluator *) 0 ;
  Quackle::GamePosition *arg2 = 0 ;
  Quackle::Move *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  double result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ScorePlusLeaveEvaluator_equity", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__ScorePlusLeaveEvaluator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScorePlusLeaveEvaluator_equity" "', argument " "1"" of type '" "Quackle::ScorePlusLeaveEvaluator const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::ScorePlusLeaveEvaluator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__GamePosition,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScorePlusLeaveEvaluator_equity" "', argument " "2"" of type '" "Quackle::GamePosition const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScorePlusLeaveEvaluator_equity" "', argument " "2"" of type '" "Quackle::GamePosition const &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::GamePosition * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_Quackle__Move,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ScorePlusLeaveEvaluator_equity" "', argument " "3"" of type '" "Quackle::Move const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScorePlusLeaveEvaluator_equity" "', argument " "3"" of type '" "Quackle::Move const &""'"); 
  }
  arg3 = reinterpret_cast< Quackle::Move * >(argp3);
  result = (double)((Quackle::ScorePlusLeaveEvaluator const *)arg1)->equity((Quackle::GamePosition const &)*arg2,(Quackle::Move const &)*arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScorePlusLeaveEvaluator_playerConsideration(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::ScorePlusLeaveEvaluator *arg1 = (Quackle::ScorePlusLeaveEvaluator *) 0 ;
  Quackle::GamePosition *arg2 = 0 ;
  Quackle::Move *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  double result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ScorePlusLeaveEvaluator_playerConsideration", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__ScorePlusLeaveEvaluator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScorePlusLeaveEvaluator_playerConsideration" "', argument " "1"" of type '" "Quackle::ScorePlusLeaveEvaluator const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::ScorePlusLeaveEvaluator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__GamePosition,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScorePlusLeaveEvaluator_playerConsideration" "', argument " "2"" of type '" "Quackle::GamePosition const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScorePlusLeaveEvaluator_playerConsideration" "', argument " "2"" of type '" "Quackle::GamePosition const &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::GamePosition * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_Quackle__Move,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ScorePlusLeaveEvaluator_playerConsideration" "', argument " "3"" of type '" "Quackle::Move const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScorePlusLeaveEvaluator_playerConsideration" "', argument " "3"" of type '" "Quackle::Move const &""'"); 
  }
  arg3 = reinterpret_cast< Quackle::Move * >(argp3);
  result = (double)((Quackle::ScorePlusLeaveEvaluator const *)arg1)->playerConsideration((Quackle::GamePosition const &)*arg2,(Quackle::Move const &)*arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScorePlusLeaveEvaluator_sharedConsideration(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::ScorePlusLeaveEvaluator *arg1 = (Quackle::ScorePlusLeaveEvaluator *) 0 ;
  Quackle::GamePosition *arg2 = 0 ;
  Quackle::Move *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  double result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ScorePlusLeaveEvaluator_sharedConsideration", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__ScorePlusLeaveEvaluator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScorePlusLeaveEvaluator_sharedConsideration" "', argument " "1"" of type '" "Quackle::ScorePlusLeaveEvaluator const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::ScorePlusLeaveEvaluator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__GamePosition,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScorePlusLeaveEvaluator_sharedConsideration" "', argument " "2"" of type '" "Quackle::GamePosition const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScorePlusLeaveEvaluator_sharedConsideration" "', argument " "2"" of type '" "Quackle::GamePosition const &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::GamePosition * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_Quackle__Move,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ScorePlusLeaveEvaluator_sharedConsideration" "', argument " "3"" of type '" "Quackle::Move const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScorePlusLeaveEvaluator_sharedConsideration" "', argument " "3"" of type '" "Quackle::Move const &""'"); 
  }
  arg3 = reinterpret_cast< Quackle::Move * >(argp3);
  result = (double)((Quackle::ScorePlusLeaveEvaluator const *)arg1)->sharedConsideration((Quackle::GamePosition const &)*arg2,(Quackle::Move const &)*arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScorePlusLeaveEvaluator_leaveValue(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::ScorePlusLeaveEvaluator *arg1 = (Quackle::ScorePlusLeaveEvaluator *) 0 ;
  Quackle::LetterString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ScorePlusLeaveEvaluator_leaveValue", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__ScorePlusLeaveEvaluator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScorePlusLeaveEvaluator_leaveValue" "', argument " "1"" of type '" "Quackle::ScorePlusLeaveEvaluator const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::ScorePlusLeaveEvaluator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__FixedLengthString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScorePlusLeaveEvaluator_leaveValue" "', argument " "2"" of type '" "Quackle::LetterString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScorePlusLeaveEvaluator_leaveValue" "', argument " "2"" of type '" "Quackle::LetterString const &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::LetterString * >(argp2);
  result = (double)((Quackle::ScorePlusLeaveEvaluator const *)arg1)->leaveValue((Quackle::LetterString const &)*arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScorePlusLeaveEvaluator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::ScorePlusLeaveEvaluator *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "new_ScorePlusLeaveEvaluator", 0, 0, 0)) SWIG_fail;
  result = (Quackle::ScorePlusLeaveEvaluator *)new Quackle::ScorePlusLeaveEvaluator();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__ScorePlusLeaveEvaluator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ScorePlusLeaveEvaluator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Quackle__ScorePlusLeaveEvaluator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *ScorePlusLeaveEvaluator_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_CatchallEvaluator_equity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::CatchallEvaluator *arg1 = (Quackle::CatchallEvaluator *) 0 ;
  Quackle::GamePosition *arg2 = 0 ;
  Quackle::Move *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  double result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "CatchallEvaluator_equity", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__CatchallEvaluator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CatchallEvaluator_equity" "', argument " "1"" of type '" "Quackle::CatchallEvaluator const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::CatchallEvaluator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__GamePosition,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CatchallEvaluator_equity" "', argument " "2"" of type '" "Quackle::GamePosition const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CatchallEvaluator_equity" "', argument " "2"" of type '" "Quackle::GamePosition const &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::GamePosition * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_Quackle__Move,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CatchallEvaluator_equity" "', argument " "3"" of type '" "Quackle::Move const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CatchallEvaluator_equity" "', argument " "3"" of type '" "Quackle::Move const &""'"); 
  }
  arg3 = reinterpret_cast< Quackle::Move * >(argp3);
  result = (double)((Quackle::CatchallEvaluator const *)arg1)->equity((Quackle::GamePosition const &)*arg2,(Quackle::Move const &)*arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CatchallEvaluator_endgameResult(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::CatchallEvaluator *arg1 = (Quackle::CatchallEvaluator *) 0 ;
  Quackle::GamePosition *arg2 = 0 ;
  Quackle::Move *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  double result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "CatchallEvaluator_endgameResult", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__CatchallEvaluator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CatchallEvaluator_endgameResult" "', argument " "1"" of type '" "Quackle::CatchallEvaluator const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::CatchallEvaluator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__GamePosition,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CatchallEvaluator_endgameResult" "', argument " "2"" of type '" "Quackle::GamePosition const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CatchallEvaluator_endgameResult" "', argument " "2"" of type '" "Quackle::GamePosition const &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::GamePosition * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_Quackle__Move,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CatchallEvaluator_endgameResult" "', argument " "3"" of type '" "Quackle::Move const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CatchallEvaluator_endgameResult" "', argument " "3"" of type '" "Quackle::Move const &""'"); 
  }
  arg3 = reinterpret_cast< Quackle::Move * >(argp3);
  result = (double)((Quackle::CatchallEvaluator const *)arg1)->endgameResult((Quackle::GamePosition const &)*arg2,(Quackle::Move const &)*arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CatchallEvaluator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::CatchallEvaluator *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "new_CatchallEvaluator", 0, 0, 0)) SWIG_fail;
  result = (Quackle::CatchallEvaluator *)new Quackle::CatchallEvaluator();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__CatchallEvaluator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_CatchallEvaluator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::CatchallEvaluator *arg1 = (Quackle::CatchallEvaluator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__CatchallEvaluator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CatchallEvaluator" "', argument " "1"" of type '" "Quackle::CatchallEvaluator *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::CatchallEvaluator * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *CatchallEvaluator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Quackle__CatchallEvaluator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *CatchallEvaluator_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_Player__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  Quackle::Player *result = 0 ;
  
  (void)self;
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (Quackle::Player *)new Quackle::Player();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__Player, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Player__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  UVString *arg1 = 0 ;
  int arg2 ;
  int arg3 ;
  int res1 = SWIG_OLDOBJ ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  Quackle::Player *result = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Player" "', argument " "1"" of type '" "UVString const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Player" "', argument " "1"" of type '" "UVString const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Player" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Player" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (Quackle::Player *)new Quackle::Player((UVString const &)*arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__Player, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Player__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  UVString *arg1 = 0 ;
  int arg2 ;
  int res1 = SWIG_OLDOBJ ;
  int val2 ;
  int ecode2 = 0 ;
  Quackle::Player *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Player" "', argument " "1"" of type '" "UVString const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Player" "', argument " "1"" of type '" "UVString const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Player" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (Quackle::Player *)new Quackle::Player((UVString const &)*arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__Player, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Player__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  UVString *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  Quackle::Player *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Player" "', argument " "1"" of type '" "UVString const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Player" "', argument " "1"" of type '" "UVString const &""'"); 
    }
    arg1 = ptr;
  }
  result = (Quackle::Player *)new Quackle::Player((UVString const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__Player, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Player(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_Player", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_Player__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Player__SWIG_3(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Player__SWIG_2(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_Player__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_Player'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Quackle::Player::Player()\n"
    "    Quackle::Player::Player(UVString const &,int,int)\n"
    "    Quackle::Player::Player(UVString const &,int)\n"
    "    Quackle::Player::Player(UVString const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Player_setName(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Player *arg1 = (Quackle::Player *) 0 ;
  UVString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Player_setName", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Player, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Player_setName" "', argument " "1"" of type '" "Quackle::Player *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Player * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Player_setName" "', argument " "2"" of type '" "UVString const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Player_setName" "', argument " "2"" of type '" "UVString const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->setName((UVString const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Player_name(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Player *arg1 = (Quackle::Player *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  UVString *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Player, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Player_name" "', argument " "1"" of type '" "Quackle::Player const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Player * >(argp1);
  result = (UVString *) &((Quackle::Player const *)arg1)->name();
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Player_setAbbreviatedName(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Player *arg1 = (Quackle::Player *) 0 ;
  UVString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Player_setAbbreviatedName", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Player, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Player_setAbbreviatedName" "', argument " "1"" of type '" "Quackle::Player *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Player * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Player_setAbbreviatedName" "', argument " "2"" of type '" "UVString const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Player_setAbbreviatedName" "', argument " "2"" of type '" "UVString const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->setAbbreviatedName((UVString const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Player_abbreviatedName(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Player *arg1 = (Quackle::Player *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  UVString *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Player, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Player_abbreviatedName" "', argument " "1"" of type '" "Quackle::Player const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Player * >(argp1);
  result = (UVString *) &((Quackle::Player const *)arg1)->abbreviatedName();
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Player_setType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Player *arg1 = (Quackle::Player *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Player_setType", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Player, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Player_setType" "', argument " "1"" of type '" "Quackle::Player *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Player * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Player_setType" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->setType(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Player_type(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Player *arg1 = (Quackle::Player *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Player, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Player_type" "', argument " "1"" of type '" "Quackle::Player const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Player * >(argp1);
  result = (int)((Quackle::Player const *)arg1)->type();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Player_setComputerPlayer(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Player *arg1 = (Quackle::Player *) 0 ;
  Quackle::ComputerPlayer *arg2 = (Quackle::ComputerPlayer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Player_setComputerPlayer", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Player, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Player_setComputerPlayer" "', argument " "1"" of type '" "Quackle::Player *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Player * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_Quackle__ComputerPlayer, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Player_setComputerPlayer" "', argument " "2"" of type '" "Quackle::ComputerPlayer *""'"); 
  }
  arg2 = reinterpret_cast< Quackle::ComputerPlayer * >(argp2);
  (arg1)->setComputerPlayer(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Player_computerPlayer(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Player *arg1 = (Quackle::Player *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Quackle::ComputerPlayer *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Player, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Player_computerPlayer" "', argument " "1"" of type '" "Quackle::Player const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Player * >(argp1);
  result = (Quackle::ComputerPlayer *)((Quackle::Player const *)arg1)->computerPlayer();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__ComputerPlayer, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Player_id(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Player *arg1 = (Quackle::Player *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Player, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Player_id" "', argument " "1"" of type '" "Quackle::Player const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Player * >(argp1);
  result = (int)((Quackle::Player const *)arg1)->id();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Player_setId(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Player *arg1 = (Quackle::Player *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Player_setId", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Player, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Player_setId" "', argument " "1"" of type '" "Quackle::Player *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Player * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Player_setId" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->setId(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Player_setRack__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Quackle::Player *arg1 = (Quackle::Player *) 0 ;
  Quackle::Rack *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Player, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Player_setRack" "', argument " "1"" of type '" "Quackle::Player *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Player * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__Rack,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Player_setRack" "', argument " "2"" of type '" "Quackle::Rack const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Player_setRack" "', argument " "2"" of type '" "Quackle::Rack const &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::Rack * >(argp2);
  (arg1)->setRack((Quackle::Rack const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Player_setRack__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Quackle::Player *arg1 = (Quackle::Player *) 0 ;
  Quackle::LetterString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Player, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Player_setRack" "', argument " "1"" of type '" "Quackle::Player *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Player * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__FixedLengthString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Player_setRack" "', argument " "2"" of type '" "Quackle::LetterString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Player_setRack" "', argument " "2"" of type '" "Quackle::LetterString const &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::LetterString * >(argp2);
  (arg1)->setRack((Quackle::LetterString const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Player_setRack(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Player_setRack", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Quackle__Player, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Quackle__Rack, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Player_setRack__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Quackle__Player, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Quackle__FixedLengthString, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Player_setRack__SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Player_setRack'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Quackle::Player::setRack(Quackle::Rack const &)\n"
    "    Quackle::Player::setRack(Quackle::LetterString const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Player_rack(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Player *arg1 = (Quackle::Player *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Quackle::Rack *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Player, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Player_rack" "', argument " "1"" of type '" "Quackle::Player const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Player * >(argp1);
  result = (Quackle::Rack *) &((Quackle::Player const *)arg1)->rack();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__Rack, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Player_setScore(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Player *arg1 = (Quackle::Player *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Player_setScore", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Player, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Player_setScore" "', argument " "1"" of type '" "Quackle::Player *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Player * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Player_setScore" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->setScore(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Player_score(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Player *arg1 = (Quackle::Player *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Player, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Player_score" "', argument " "1"" of type '" "Quackle::Player const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Player * >(argp1);
  result = (int)((Quackle::Player const *)arg1)->score();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Player_addToScore(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Player *arg1 = (Quackle::Player *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Player_addToScore", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Player, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Player_addToScore" "', argument " "1"" of type '" "Quackle::Player *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Player * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Player_addToScore" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->addToScore(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Player_drawnLetters(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Player *arg1 = (Quackle::Player *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Quackle::Rack *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Player, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Player_drawnLetters" "', argument " "1"" of type '" "Quackle::Player const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Player * >(argp1);
  result = (Quackle::Rack *) &((Quackle::Player const *)arg1)->drawnLetters();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__Rack, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Player_setDrawnLetters(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Player *arg1 = (Quackle::Player *) 0 ;
  Quackle::Rack *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Player_setDrawnLetters", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Player, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Player_setDrawnLetters" "', argument " "1"" of type '" "Quackle::Player *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Player * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__Rack,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Player_setDrawnLetters" "', argument " "2"" of type '" "Quackle::Rack const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Player_setDrawnLetters" "', argument " "2"" of type '" "Quackle::Rack const &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::Rack * >(argp2);
  (arg1)->setDrawnLetters((Quackle::Rack const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Player_racksAreKnown(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Player *arg1 = (Quackle::Player *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Player, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Player_racksAreKnown" "', argument " "1"" of type '" "Quackle::Player const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Player * >(argp1);
  result = (bool)((Quackle::Player const *)arg1)->racksAreKnown();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Player_setRacksAreKnown(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Player *arg1 = (Quackle::Player *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Player_setRacksAreKnown", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Player, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Player_setRacksAreKnown" "', argument " "1"" of type '" "Quackle::Player *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Player * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Player_setRacksAreKnown" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->setRacksAreKnown(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Player_positionallyEqual(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Player *arg1 = (Quackle::Player *) 0 ;
  Quackle::Player *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Player_positionallyEqual", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Player, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Player_positionallyEqual" "', argument " "1"" of type '" "Quackle::Player const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Player * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__Player,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Player_positionallyEqual" "', argument " "2"" of type '" "Quackle::Player const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Player_positionallyEqual" "', argument " "2"" of type '" "Quackle::Player const &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::Player * >(argp2);
  result = (bool)((Quackle::Player const *)arg1)->positionallyEqual((Quackle::Player const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Player_storeInformationToString(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Player *arg1 = (Quackle::Player *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  UVString result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Player, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Player_storeInformationToString" "', argument " "1"" of type '" "Quackle::Player const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Player * >(argp1);
  result = ((Quackle::Player const *)arg1)->storeInformationToString();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Player_loadInformationFromString(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Player *arg1 = (Quackle::Player *) 0 ;
  UVString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Player_loadInformationFromString", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Player, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Player_loadInformationFromString" "', argument " "1"" of type '" "Quackle::Player *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Player * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Player_loadInformationFromString" "', argument " "2"" of type '" "UVString const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Player_loadInformationFromString" "', argument " "2"" of type '" "UVString const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->loadInformationFromString((UVString const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Player_makePlayerFromString(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  UVString *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject *swig_obj[1] ;
  Quackle::Player result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Player_makePlayerFromString" "', argument " "1"" of type '" "UVString const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Player_makePlayerFromString" "', argument " "1"" of type '" "UVString const &""'"); 
    }
    arg1 = ptr;
  }
  result = Quackle::Player::makePlayerFromString((std::string const &)*arg1);
  resultobj = SWIG_NewPointerObj((new Quackle::Player(result)), SWIGTYPE_p_Quackle__Player, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Player(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Player *arg1 = (Quackle::Player *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Player, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Player" "', argument " "1"" of type '" "Quackle::Player *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Player * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Player_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Quackle__Player, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Player_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap___lt____SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Quackle::Player *arg1 = 0 ;
  Quackle::Player *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_Quackle__Player,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__lt__" "', argument " "1"" of type '" "Quackle::Player const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lt__" "', argument " "1"" of type '" "Quackle::Player const &""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Player * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__Player,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__lt__" "', argument " "2"" of type '" "Quackle::Player const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lt__" "', argument " "2"" of type '" "Quackle::Player const &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::Player * >(argp2);
  result = (bool)Quackle::operator <((Quackle::Player const &)*arg1,(Quackle::Player const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  if (PyErr_Occurred() && !PyErr_ExceptionMatches(PyExc_TypeError)) {
    return NULL;
  }
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_new_PlayerList(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::PlayerList *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "new_PlayerList", 0, 0, 0)) SWIG_fail;
  result = (Quackle::PlayerList *)new Quackle::PlayerList();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__PlayerList, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PlayerList_playerForId(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::PlayerList *arg1 = (Quackle::PlayerList *) 0 ;
  int arg2 ;
  bool *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool temp3 ;
  int res3 = SWIG_TMPOBJ ;
  PyObject *swig_obj[2] ;
  Quackle::Player *result = 0 ;
  
  arg3 = &temp3;
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "PlayerList_playerForId", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__PlayerList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PlayerList_playerForId" "', argument " "1"" of type '" "Quackle::PlayerList const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::PlayerList * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PlayerList_playerForId" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (Quackle::Player *) &((Quackle::PlayerList const *)arg1)->playerForId(arg2,*arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__Player, 0 |  0 );
  if (SWIG_IsTmpObj(res3)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_bool((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_bool, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PlayerList_playerForName(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::PlayerList *arg1 = (Quackle::PlayerList *) 0 ;
  UVString *arg2 = 0 ;
  bool *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  bool temp3 ;
  int res3 = SWIG_TMPOBJ ;
  PyObject *swig_obj[2] ;
  Quackle::Player *result = 0 ;
  
  arg3 = &temp3;
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "PlayerList_playerForName", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__PlayerList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PlayerList_playerForName" "', argument " "1"" of type '" "Quackle::PlayerList const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::PlayerList * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PlayerList_playerForName" "', argument " "2"" of type '" "UVString const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PlayerList_playerForName" "', argument " "2"" of type '" "UVString const &""'"); 
    }
    arg2 = ptr;
  }
  result = (Quackle::Player *) &((Quackle::PlayerList const *)arg1)->playerForName((UVString const &)*arg2,*arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__Player, 0 |  0 );
  if (SWIG_IsTmpObj(res3)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_bool((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_bool, new_flags));
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_PlayerList(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::PlayerList *arg1 = (Quackle::PlayerList *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__PlayerList, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PlayerList" "', argument " "1"" of type '" "Quackle::PlayerList *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::PlayerList * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *PlayerList_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Quackle__PlayerList, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *PlayerList_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_HistoryLocation(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  Quackle::HistoryLocation *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "new_HistoryLocation", 2, 2, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_HistoryLocation" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_HistoryLocation" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (Quackle::HistoryLocation *)new Quackle::HistoryLocation(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__HistoryLocation, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HistoryLocation_playerId(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::HistoryLocation *arg1 = (Quackle::HistoryLocation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__HistoryLocation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HistoryLocation_playerId" "', argument " "1"" of type '" "Quackle::HistoryLocation const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::HistoryLocation * >(argp1);
  result = (int)((Quackle::HistoryLocation const *)arg1)->playerId();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HistoryLocation_turnNumber(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::HistoryLocation *arg1 = (Quackle::HistoryLocation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__HistoryLocation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HistoryLocation_turnNumber" "', argument " "1"" of type '" "Quackle::HistoryLocation const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::HistoryLocation * >(argp1);
  result = (int)((Quackle::HistoryLocation const *)arg1)->turnNumber();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_HistoryLocation(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::HistoryLocation *arg1 = (Quackle::HistoryLocation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__HistoryLocation, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_HistoryLocation" "', argument " "1"" of type '" "Quackle::HistoryLocation *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::HistoryLocation * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *HistoryLocation_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Quackle__HistoryLocation, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *HistoryLocation_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap___lt____SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Quackle::HistoryLocation *arg1 = 0 ;
  Quackle::HistoryLocation *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_Quackle__HistoryLocation,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__lt__" "', argument " "1"" of type '" "Quackle::HistoryLocation const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lt__" "', argument " "1"" of type '" "Quackle::HistoryLocation const &""'"); 
  }
  arg1 = reinterpret_cast< Quackle::HistoryLocation * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__HistoryLocation,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__lt__" "', argument " "2"" of type '" "Quackle::HistoryLocation const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lt__" "', argument " "2"" of type '" "Quackle::HistoryLocation const &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::HistoryLocation * >(argp2);
  result = (bool)Quackle::operator <((Quackle::HistoryLocation const &)*arg1,(Quackle::HistoryLocation const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  if (PyErr_Occurred() && !PyErr_ExceptionMatches(PyExc_TypeError)) {
    return NULL;
  }
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap___lt__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "__lt__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Quackle__FixedLengthString, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Quackle__FixedLengthString, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lt____SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Quackle__Move, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Quackle__Move, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lt____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Quackle__Player, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Quackle__Player, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lt____SWIG_2(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Quackle__HistoryLocation, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Quackle__HistoryLocation, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lt____SWIG_3(self, argc, argv);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_new_GamePosition__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Quackle::PlayerList *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Quackle::GamePosition *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_Quackle__PlayerList,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_GamePosition" "', argument " "1"" of type '" "Quackle::PlayerList const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_GamePosition" "', argument " "1"" of type '" "Quackle::PlayerList const &""'"); 
  }
  arg1 = reinterpret_cast< Quackle::PlayerList * >(argp1);
  result = (Quackle::GamePosition *)new Quackle::GamePosition((Quackle::PlayerList const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__GamePosition, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GamePosition__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Quackle::GamePosition *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Quackle::GamePosition *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_Quackle__GamePosition,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_GamePosition" "', argument " "1"" of type '" "Quackle::GamePosition const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_GamePosition" "', argument " "1"" of type '" "Quackle::GamePosition const &""'"); 
  }
  arg1 = reinterpret_cast< Quackle::GamePosition * >(argp1);
  result = (Quackle::GamePosition *)new Quackle::GamePosition((Quackle::GamePosition const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__GamePosition, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GamePosition__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  Quackle::GamePosition *result = 0 ;
  
  (void)self;
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (Quackle::GamePosition *)new Quackle::GamePosition();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__GamePosition, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GamePosition(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_GamePosition", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_GamePosition__SWIG_2(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Quackle__GamePosition, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_GamePosition__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Quackle__PlayerList, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_GamePosition__SWIG_0(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_GamePosition'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Quackle::GamePosition::GamePosition(Quackle::PlayerList const &)\n"
    "    Quackle::GamePosition::GamePosition(Quackle::GamePosition const &)\n"
    "    Quackle::GamePosition::GamePosition()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_GamePosition_kibitz__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__GamePosition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePosition_kibitz" "', argument " "1"" of type '" "Quackle::GamePosition *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::GamePosition * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GamePosition_kibitz" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->kibitz(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePosition_kibitz__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__GamePosition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePosition_kibitz" "', argument " "1"" of type '" "Quackle::GamePosition *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::GamePosition * >(argp1);
  (arg1)->kibitz();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePosition_kibitz(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "GamePosition_kibitz", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Quackle__GamePosition, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_GamePosition_kibitz__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Quackle__GamePosition, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_GamePosition_kibitz__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'GamePosition_kibitz'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Quackle::GamePosition::kibitz(int)\n"
    "    Quackle::GamePosition::kibitz()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_GamePosition_moves(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Quackle::MoveList *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__GamePosition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePosition_moves" "', argument " "1"" of type '" "Quackle::GamePosition const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::GamePosition * >(argp1);
  result = (Quackle::MoveList *) &((Quackle::GamePosition const *)arg1)->moves();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__MoveList, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePosition_setMoves(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  Quackle::MoveList *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "GamePosition_setMoves", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__GamePosition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePosition_setMoves" "', argument " "1"" of type '" "Quackle::GamePosition *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::GamePosition * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__MoveList,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GamePosition_setMoves" "', argument " "2"" of type '" "Quackle::MoveList const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GamePosition_setMoves" "', argument " "2"" of type '" "Quackle::MoveList const &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::MoveList * >(argp2);
  (arg1)->setMoves((Quackle::MoveList const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePosition_staticBestMove(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Quackle::Move *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__GamePosition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePosition_staticBestMove" "', argument " "1"" of type '" "Quackle::GamePosition *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::GamePosition * >(argp1);
  result = (Quackle::Move *) &(arg1)->staticBestMove();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__Move, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePosition_removeMove(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  Quackle::Move *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "GamePosition_removeMove", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__GamePosition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePosition_removeMove" "', argument " "1"" of type '" "Quackle::GamePosition *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::GamePosition * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__Move,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GamePosition_removeMove" "', argument " "2"" of type '" "Quackle::Move const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GamePosition_removeMove" "', argument " "2"" of type '" "Quackle::Move const &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::Move * >(argp2);
  (arg1)->removeMove((Quackle::Move const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePosition_removeAllMoves(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__GamePosition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePosition_removeAllMoves" "', argument " "1"" of type '" "Quackle::GamePosition *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::GamePosition * >(argp1);
  (arg1)->removeAllMoves();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePosition_addMove(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  Quackle::Move *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "GamePosition_addMove", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__GamePosition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePosition_addMove" "', argument " "1"" of type '" "Quackle::GamePosition *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::GamePosition * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__Move,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GamePosition_addMove" "', argument " "2"" of type '" "Quackle::Move const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GamePosition_addMove" "', argument " "2"" of type '" "Quackle::Move const &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::Move * >(argp2);
  (arg1)->addMove((Quackle::Move const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePosition_makeSureMoveListContainsMoves(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  Quackle::MoveList *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "GamePosition_makeSureMoveListContainsMoves", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__GamePosition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePosition_makeSureMoveListContainsMoves" "', argument " "1"" of type '" "Quackle::GamePosition *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::GamePosition * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__MoveList,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GamePosition_makeSureMoveListContainsMoves" "', argument " "2"" of type '" "Quackle::MoveList const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GamePosition_makeSureMoveListContainsMoves" "', argument " "2"" of type '" "Quackle::MoveList const &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::MoveList * >(argp2);
  (arg1)->makeSureMoveListContainsMoves((Quackle::MoveList const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePosition_kibitzAs(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  Quackle::ComputerPlayer *arg2 = (Quackle::ComputerPlayer *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "GamePosition_kibitzAs", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__GamePosition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePosition_kibitzAs" "', argument " "1"" of type '" "Quackle::GamePosition *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::GamePosition * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_Quackle__ComputerPlayer, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GamePosition_kibitzAs" "', argument " "2"" of type '" "Quackle::ComputerPlayer *""'"); 
  }
  arg2 = reinterpret_cast< Quackle::ComputerPlayer * >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GamePosition_kibitzAs" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  (arg1)->kibitzAs(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePosition_ensureMovePrettiness(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  Quackle::Move *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "GamePosition_ensureMovePrettiness", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__GamePosition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePosition_ensureMovePrettiness" "', argument " "1"" of type '" "Quackle::GamePosition *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::GamePosition * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__Move,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GamePosition_ensureMovePrettiness" "', argument " "2"" of type '" "Quackle::Move &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GamePosition_ensureMovePrettiness" "', argument " "2"" of type '" "Quackle::Move &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::Move * >(argp2);
  (arg1)->ensureMovePrettiness(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePosition_ensureMoveTilesDoNotIncludePlayThru(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  Quackle::Move *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "GamePosition_ensureMoveTilesDoNotIncludePlayThru", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__GamePosition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePosition_ensureMoveTilesDoNotIncludePlayThru" "', argument " "1"" of type '" "Quackle::GamePosition *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::GamePosition * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__Move,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GamePosition_ensureMoveTilesDoNotIncludePlayThru" "', argument " "2"" of type '" "Quackle::Move &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GamePosition_ensureMoveTilesDoNotIncludePlayThru" "', argument " "2"" of type '" "Quackle::Move &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::Move * >(argp2);
  (arg1)->ensureMoveTilesDoNotIncludePlayThru(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePosition_addAndSetMoveMade(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  Quackle::Move *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "GamePosition_addAndSetMoveMade", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__GamePosition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePosition_addAndSetMoveMade" "', argument " "1"" of type '" "Quackle::GamePosition *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::GamePosition * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__Move,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GamePosition_addAndSetMoveMade" "', argument " "2"" of type '" "Quackle::Move const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GamePosition_addAndSetMoveMade" "', argument " "2"" of type '" "Quackle::Move const &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::Move * >(argp2);
  (arg1)->addAndSetMoveMade((Quackle::Move const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePosition_validateMove(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  Quackle::Move *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "GamePosition_validateMove", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__GamePosition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePosition_validateMove" "', argument " "1"" of type '" "Quackle::GamePosition const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::GamePosition * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__Move,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GamePosition_validateMove" "', argument " "2"" of type '" "Quackle::Move const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GamePosition_validateMove" "', argument " "2"" of type '" "Quackle::Move const &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::Move * >(argp2);
  result = (int)((Quackle::GamePosition const *)arg1)->validateMove((Quackle::Move const &)*arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePosition_formsAcceptableWords(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  Quackle::Move *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "GamePosition_formsAcceptableWords", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__GamePosition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePosition_formsAcceptableWords" "', argument " "1"" of type '" "Quackle::GamePosition const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::GamePosition * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__Move,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GamePosition_formsAcceptableWords" "', argument " "2"" of type '" "Quackle::Move const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GamePosition_formsAcceptableWords" "', argument " "2"" of type '" "Quackle::Move const &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::Move * >(argp2);
  result = (bool)((Quackle::GamePosition const *)arg1)->formsAcceptableWords((Quackle::Move const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePosition_allWordsFormedBy(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  Quackle::Move *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  Quackle::MoveList result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "GamePosition_allWordsFormedBy", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__GamePosition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePosition_allWordsFormedBy" "', argument " "1"" of type '" "Quackle::GamePosition const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::GamePosition * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__Move,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GamePosition_allWordsFormedBy" "', argument " "2"" of type '" "Quackle::Move const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GamePosition_allWordsFormedBy" "', argument " "2"" of type '" "Quackle::Move const &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::Move * >(argp2);
  result = ((Quackle::GamePosition const *)arg1)->allWordsFormedBy((Quackle::Move const &)*arg2);
  resultobj = SWIG_NewPointerObj((new Quackle::MoveList(result)), SWIGTYPE_p_Quackle__MoveList, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePosition_isConnected(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  Quackle::Move *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "GamePosition_isConnected", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__GamePosition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePosition_isConnected" "', argument " "1"" of type '" "Quackle::GamePosition const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::GamePosition * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__Move,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GamePosition_isConnected" "', argument " "2"" of type '" "Quackle::Move const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GamePosition_isConnected" "', argument " "2"" of type '" "Quackle::Move const &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::Move * >(argp2);
  result = (bool)((Quackle::GamePosition const *)arg1)->isConnected((Quackle::Move const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePosition_isAcceptableWord(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  Quackle::LetterString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "GamePosition_isAcceptableWord", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__GamePosition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePosition_isAcceptableWord" "', argument " "1"" of type '" "Quackle::GamePosition const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::GamePosition * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__FixedLengthString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GamePosition_isAcceptableWord" "', argument " "2"" of type '" "Quackle::LetterString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GamePosition_isAcceptableWord" "', argument " "2"" of type '" "Quackle::LetterString const &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::LetterString * >(argp2);
  result = (bool)((Quackle::GamePosition const *)arg1)->isAcceptableWord((Quackle::LetterString const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePosition_exchangeAllowed(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__GamePosition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePosition_exchangeAllowed" "', argument " "1"" of type '" "Quackle::GamePosition const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::GamePosition * >(argp1);
  result = (bool)((Quackle::GamePosition const *)arg1)->exchangeAllowed();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePosition_handleOverdraw(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  Quackle::LetterString *arg2 = 0 ;
  Quackle::LetterString *arg3 = (Quackle::LetterString *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "GamePosition_handleOverdraw", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__GamePosition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePosition_handleOverdraw" "', argument " "1"" of type '" "Quackle::GamePosition const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::GamePosition * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__FixedLengthString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GamePosition_handleOverdraw" "', argument " "2"" of type '" "Quackle::LetterString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GamePosition_handleOverdraw" "', argument " "2"" of type '" "Quackle::LetterString const &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::LetterString * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_Quackle__FixedLengthString, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GamePosition_handleOverdraw" "', argument " "3"" of type '" "Quackle::LetterString *""'"); 
  }
  arg3 = reinterpret_cast< Quackle::LetterString * >(argp3);
  result = (int)((Quackle::GamePosition const *)arg1)->handleOverdraw((Quackle::LetterString const &)*arg2,arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePosition_makeMove__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  Quackle::Move *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__GamePosition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePosition_makeMove" "', argument " "1"" of type '" "Quackle::GamePosition *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::GamePosition * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__Move,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GamePosition_makeMove" "', argument " "2"" of type '" "Quackle::Move const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GamePosition_makeMove" "', argument " "2"" of type '" "Quackle::Move const &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::Move * >(argp2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GamePosition_makeMove" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  (arg1)->makeMove((Quackle::Move const &)*arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePosition_makeMove__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  Quackle::Move *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__GamePosition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePosition_makeMove" "', argument " "1"" of type '" "Quackle::GamePosition *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::GamePosition * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__Move,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GamePosition_makeMove" "', argument " "2"" of type '" "Quackle::Move const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GamePosition_makeMove" "', argument " "2"" of type '" "Quackle::Move const &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::Move * >(argp2);
  (arg1)->makeMove((Quackle::Move const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePosition_makeMove(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "GamePosition_makeMove", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Quackle__GamePosition, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Quackle__Move, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GamePosition_makeMove__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Quackle__GamePosition, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Quackle__Move, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_GamePosition_makeMove__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'GamePosition_makeMove'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Quackle::GamePosition::makeMove(Quackle::Move const &,bool)\n"
    "    Quackle::GamePosition::makeMove(Quackle::Move const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_GamePosition_ensureBoardIsPreparedForAnalysis(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__GamePosition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePosition_ensureBoardIsPreparedForAnalysis" "', argument " "1"" of type '" "Quackle::GamePosition *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::GamePosition * >(argp1);
  (arg1)->ensureBoardIsPreparedForAnalysis();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePosition_scoreMove(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  Quackle::Move *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "GamePosition_scoreMove", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__GamePosition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePosition_scoreMove" "', argument " "1"" of type '" "Quackle::GamePosition *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::GamePosition * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__Move,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GamePosition_scoreMove" "', argument " "2"" of type '" "Quackle::Move &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GamePosition_scoreMove" "', argument " "2"" of type '" "Quackle::Move &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::Move * >(argp2);
  (arg1)->scoreMove(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePosition_calculateEquity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  Quackle::Move *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "GamePosition_calculateEquity", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__GamePosition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePosition_calculateEquity" "', argument " "1"" of type '" "Quackle::GamePosition *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::GamePosition * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__Move,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GamePosition_calculateEquity" "', argument " "2"" of type '" "Quackle::Move const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GamePosition_calculateEquity" "', argument " "2"" of type '" "Quackle::Move const &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::Move * >(argp2);
  result = (double)(arg1)->calculateEquity((Quackle::Move const &)*arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePosition_calculateScore(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  Quackle::Move *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "GamePosition_calculateScore", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__GamePosition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePosition_calculateScore" "', argument " "1"" of type '" "Quackle::GamePosition *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::GamePosition * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__Move,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GamePosition_calculateScore" "', argument " "2"" of type '" "Quackle::Move const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GamePosition_calculateScore" "', argument " "2"" of type '" "Quackle::Move const &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::Move * >(argp2);
  result = (int)(arg1)->calculateScore((Quackle::Move const &)*arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePosition_calculatePlayerConsideration(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  Quackle::Move *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "GamePosition_calculatePlayerConsideration", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__GamePosition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePosition_calculatePlayerConsideration" "', argument " "1"" of type '" "Quackle::GamePosition *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::GamePosition * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__Move,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GamePosition_calculatePlayerConsideration" "', argument " "2"" of type '" "Quackle::Move const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GamePosition_calculatePlayerConsideration" "', argument " "2"" of type '" "Quackle::Move const &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::Move * >(argp2);
  result = (double)(arg1)->calculatePlayerConsideration((Quackle::Move const &)*arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePosition_leaveValue(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  Quackle::LetterString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "GamePosition_leaveValue", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__GamePosition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePosition_leaveValue" "', argument " "1"" of type '" "Quackle::GamePosition const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::GamePosition * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__FixedLengthString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GamePosition_leaveValue" "', argument " "2"" of type '" "Quackle::LetterString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GamePosition_leaveValue" "', argument " "2"" of type '" "Quackle::LetterString const &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::LetterString * >(argp2);
  result = (double)((Quackle::GamePosition const *)arg1)->leaveValue((Quackle::LetterString const &)*arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePosition_calculateSharedConsideration(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  Quackle::Move *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "GamePosition_calculateSharedConsideration", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__GamePosition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePosition_calculateSharedConsideration" "', argument " "1"" of type '" "Quackle::GamePosition *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::GamePosition * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__Move,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GamePosition_calculateSharedConsideration" "', argument " "2"" of type '" "Quackle::Move const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GamePosition_calculateSharedConsideration" "', argument " "2"" of type '" "Quackle::Move const &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::Move * >(argp2);
  result = (double)(arg1)->calculateSharedConsideration((Quackle::Move const &)*arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePosition_setBoard(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  Quackle::Board *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "GamePosition_setBoard", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__GamePosition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePosition_setBoard" "', argument " "1"" of type '" "Quackle::GamePosition *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::GamePosition * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__Board,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GamePosition_setBoard" "', argument " "2"" of type '" "Quackle::Board const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GamePosition_setBoard" "', argument " "2"" of type '" "Quackle::Board const &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::Board * >(argp2);
  (arg1)->setBoard((Quackle::Board const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePosition_board(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Quackle::Board *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__GamePosition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePosition_board" "', argument " "1"" of type '" "Quackle::GamePosition const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::GamePosition * >(argp1);
  result = (Quackle::Board *) &((Quackle::GamePosition const *)arg1)->board();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__Board, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePosition_bag(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Quackle::Bag *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__GamePosition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePosition_bag" "', argument " "1"" of type '" "Quackle::GamePosition const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::GamePosition * >(argp1);
  result = (Quackle::Bag *) &((Quackle::GamePosition const *)arg1)->bag();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__Bag, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePosition_setDrawingOrder(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  Quackle::LetterString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "GamePosition_setDrawingOrder", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__GamePosition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePosition_setDrawingOrder" "', argument " "1"" of type '" "Quackle::GamePosition *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::GamePosition * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__FixedLengthString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GamePosition_setDrawingOrder" "', argument " "2"" of type '" "Quackle::LetterString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GamePosition_setDrawingOrder" "', argument " "2"" of type '" "Quackle::LetterString const &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::LetterString * >(argp2);
  (arg1)->setDrawingOrder((Quackle::LetterString const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePosition_drawingOrder(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Quackle::LetterString *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__GamePosition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePosition_drawingOrder" "', argument " "1"" of type '" "Quackle::GamePosition const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::GamePosition * >(argp1);
  result = (Quackle::LetterString *) &((Quackle::GamePosition const *)arg1)->drawingOrder();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__FixedLengthString, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePosition_unseenBag(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Quackle::Bag result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__GamePosition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePosition_unseenBag" "', argument " "1"" of type '" "Quackle::GamePosition const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::GamePosition * >(argp1);
  result = ((Quackle::GamePosition const *)arg1)->unseenBag();
  resultobj = SWIG_NewPointerObj((new Quackle::Bag(result)), SWIGTYPE_p_Quackle__Bag, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePosition_unseenBagFromPlayerPerspective(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  Quackle::Player *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  Quackle::Bag result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "GamePosition_unseenBagFromPlayerPerspective", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__GamePosition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePosition_unseenBagFromPlayerPerspective" "', argument " "1"" of type '" "Quackle::GamePosition const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::GamePosition * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__Player,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GamePosition_unseenBagFromPlayerPerspective" "', argument " "2"" of type '" "Quackle::Player const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GamePosition_unseenBagFromPlayerPerspective" "', argument " "2"" of type '" "Quackle::Player const &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::Player * >(argp2);
  result = ((Quackle::GamePosition const *)arg1)->unseenBagFromPlayerPerspective((Quackle::Player const &)*arg2);
  resultobj = SWIG_NewPointerObj((new Quackle::Bag(result)), SWIGTYPE_p_Quackle__Bag, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePosition_ensureProperBag(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__GamePosition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePosition_ensureProperBag" "', argument " "1"" of type '" "Quackle::GamePosition const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::GamePosition * >(argp1);
  ((Quackle::GamePosition const *)arg1)->ensureProperBag();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePosition_setEmptyBoard(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__GamePosition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePosition_setEmptyBoard" "', argument " "1"" of type '" "Quackle::GamePosition *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::GamePosition * >(argp1);
  (arg1)->setEmptyBoard();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePosition_currentPlayer__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Quackle::Player *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__GamePosition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePosition_currentPlayer" "', argument " "1"" of type '" "Quackle::GamePosition const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::GamePosition * >(argp1);
  result = (Quackle::Player *) &((Quackle::GamePosition const *)arg1)->currentPlayer();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__Player, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePosition_currentPlayer__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Quackle::Player *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__GamePosition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePosition_currentPlayer" "', argument " "1"" of type '" "Quackle::GamePosition *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::GamePosition * >(argp1);
  result = (Quackle::Player *) &(arg1)->currentPlayer();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__Player, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePosition_currentPlayer(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "GamePosition_currentPlayer", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Quackle__GamePosition, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_GamePosition_currentPlayer__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Quackle__GamePosition, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_GamePosition_currentPlayer__SWIG_0(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'GamePosition_currentPlayer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Quackle::GamePosition::currentPlayer() const\n"
    "    Quackle::GamePosition::currentPlayer()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_GamePosition_setCurrentPlayer(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "GamePosition_setCurrentPlayer", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__GamePosition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePosition_setCurrentPlayer" "', argument " "1"" of type '" "Quackle::GamePosition *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::GamePosition * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GamePosition_setCurrentPlayer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (bool)(arg1)->setCurrentPlayer(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePosition_playerOnTurn__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Quackle::Player *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__GamePosition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePosition_playerOnTurn" "', argument " "1"" of type '" "Quackle::GamePosition const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::GamePosition * >(argp1);
  result = (Quackle::Player *) &((Quackle::GamePosition const *)arg1)->playerOnTurn();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__Player, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePosition_playerOnTurn__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Quackle::Player *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__GamePosition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePosition_playerOnTurn" "', argument " "1"" of type '" "Quackle::GamePosition *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::GamePosition * >(argp1);
  result = (Quackle::Player *) &(arg1)->playerOnTurn();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__Player, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePosition_playerOnTurn(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "GamePosition_playerOnTurn", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Quackle__GamePosition, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_GamePosition_playerOnTurn__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Quackle__GamePosition, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_GamePosition_playerOnTurn__SWIG_0(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'GamePosition_playerOnTurn'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Quackle::GamePosition::playerOnTurn() const\n"
    "    Quackle::GamePosition::playerOnTurn()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_GamePosition_setPlayerOnTurn(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "GamePosition_setPlayerOnTurn", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__GamePosition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePosition_setPlayerOnTurn" "', argument " "1"" of type '" "Quackle::GamePosition *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::GamePosition * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GamePosition_setPlayerOnTurn" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (bool)(arg1)->setPlayerOnTurn(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePosition_humanPlayer(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Quackle::Player *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__GamePosition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePosition_humanPlayer" "', argument " "1"" of type '" "Quackle::GamePosition const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::GamePosition * >(argp1);
  result = (Quackle::Player *) &((Quackle::GamePosition const *)arg1)->humanPlayer();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__Player, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePosition_nextPlayer(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Quackle::PlayerList::const_iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__GamePosition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePosition_nextPlayer" "', argument " "1"" of type '" "Quackle::GamePosition const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::GamePosition * >(argp1);
  result = ((Quackle::GamePosition const *)arg1)->nextPlayer();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const Quackle::PlayerList::const_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePosition_nextPlayerOfType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  Quackle::Player::PlayerType arg2 ;
  bool *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  Quackle::PlayerList::const_iterator result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "GamePosition_nextPlayerOfType", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__GamePosition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePosition_nextPlayerOfType" "', argument " "1"" of type '" "Quackle::GamePosition const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::GamePosition * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GamePosition_nextPlayerOfType" "', argument " "2"" of type '" "Quackle::Player::PlayerType""'");
  } 
  arg2 = static_cast< Quackle::Player::PlayerType >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_bool,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GamePosition_nextPlayerOfType" "', argument " "3"" of type '" "bool &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GamePosition_nextPlayerOfType" "', argument " "3"" of type '" "bool &""'"); 
  }
  arg3 = reinterpret_cast< bool * >(argp3);
  result = ((Quackle::GamePosition const *)arg1)->nextPlayerOfType(arg2,*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const Quackle::PlayerList::const_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePosition_playerWithAbbreviatedName(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  UVString *arg2 = 0 ;
  bool *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  Quackle::PlayerList::const_iterator result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "GamePosition_playerWithAbbreviatedName", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__GamePosition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePosition_playerWithAbbreviatedName" "', argument " "1"" of type '" "Quackle::GamePosition const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::GamePosition * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GamePosition_playerWithAbbreviatedName" "', argument " "2"" of type '" "UVString const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GamePosition_playerWithAbbreviatedName" "', argument " "2"" of type '" "UVString const &""'"); 
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_bool,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GamePosition_playerWithAbbreviatedName" "', argument " "3"" of type '" "bool &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GamePosition_playerWithAbbreviatedName" "', argument " "3"" of type '" "bool &""'"); 
  }
  arg3 = reinterpret_cast< bool * >(argp3);
  result = ((Quackle::GamePosition const *)arg1)->playerWithAbbreviatedName((UVString const &)*arg2,*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const Quackle::PlayerList::const_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePosition_players(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Quackle::PlayerList *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__GamePosition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePosition_players" "', argument " "1"" of type '" "Quackle::GamePosition const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::GamePosition * >(argp1);
  result = (Quackle::PlayerList *) &((Quackle::GamePosition const *)arg1)->players();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__PlayerList, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePosition_endgameAdjustedScores(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Quackle::PlayerList result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__GamePosition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePosition_endgameAdjustedScores" "', argument " "1"" of type '" "Quackle::GamePosition const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::GamePosition * >(argp1);
  result = ((Quackle::GamePosition const *)arg1)->endgameAdjustedScores();
  resultobj = SWIG_NewPointerObj((new Quackle::PlayerList(result)), SWIGTYPE_p_Quackle__PlayerList, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePosition_leadingPlayers(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Quackle::PlayerList result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__GamePosition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePosition_leadingPlayers" "', argument " "1"" of type '" "Quackle::GamePosition const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::GamePosition * >(argp1);
  result = ((Quackle::GamePosition const *)arg1)->leadingPlayers();
  resultobj = SWIG_NewPointerObj((new Quackle::PlayerList(result)), SWIGTYPE_p_Quackle__PlayerList, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePosition_spread__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__GamePosition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePosition_spread" "', argument " "1"" of type '" "Quackle::GamePosition const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::GamePosition * >(argp1);
  result = (int)((Quackle::GamePosition const *)arg1)->spread();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePosition_spread__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__GamePosition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePosition_spread" "', argument " "1"" of type '" "Quackle::GamePosition const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::GamePosition * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GamePosition_spread" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (int)((Quackle::GamePosition const *)arg1)->spread(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePosition_spread(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "GamePosition_spread", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Quackle__GamePosition, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_GamePosition_spread__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Quackle__GamePosition, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_GamePosition_spread__SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'GamePosition_spread'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Quackle::GamePosition::spread() const\n"
    "    Quackle::GamePosition::spread(int) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_GamePosition_gameOver(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__GamePosition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePosition_gameOver" "', argument " "1"" of type '" "Quackle::GamePosition const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::GamePosition * >(argp1);
  result = (bool)((Quackle::GamePosition const *)arg1)->gameOver();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePosition_adjustScoresToFinishGame(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__GamePosition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePosition_adjustScoresToFinishGame" "', argument " "1"" of type '" "Quackle::GamePosition *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::GamePosition * >(argp1);
  (arg1)->adjustScoresToFinishGame();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePosition_adjustScoresToFinishPassedOutGame(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__GamePosition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePosition_adjustScoresToFinishPassedOutGame" "', argument " "1"" of type '" "Quackle::GamePosition *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::GamePosition * >(argp1);
  (arg1)->adjustScoresToFinishPassedOutGame();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePosition_doesMoveEndGame(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  Quackle::Move *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "GamePosition_doesMoveEndGame", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__GamePosition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePosition_doesMoveEndGame" "', argument " "1"" of type '" "Quackle::GamePosition const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::GamePosition * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__Move,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GamePosition_doesMoveEndGame" "', argument " "2"" of type '" "Quackle::Move const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GamePosition_doesMoveEndGame" "', argument " "2"" of type '" "Quackle::Move const &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::Move * >(argp2);
  result = (bool)((Quackle::GamePosition const *)arg1)->doesMoveEndGame((Quackle::Move const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePosition_deadwood(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  Quackle::LetterString *arg2 = (Quackle::LetterString *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "GamePosition_deadwood", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__GamePosition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePosition_deadwood" "', argument " "1"" of type '" "Quackle::GamePosition const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::GamePosition * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_Quackle__FixedLengthString, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GamePosition_deadwood" "', argument " "2"" of type '" "Quackle::LetterString *""'"); 
  }
  arg2 = reinterpret_cast< Quackle::LetterString * >(argp2);
  result = (int)((Quackle::GamePosition const *)arg1)->deadwood(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePosition_replenishAndSetRack__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  Quackle::Rack *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__GamePosition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePosition_replenishAndSetRack" "', argument " "1"" of type '" "Quackle::GamePosition *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::GamePosition * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__Rack,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GamePosition_replenishAndSetRack" "', argument " "2"" of type '" "Quackle::Rack const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GamePosition_replenishAndSetRack" "', argument " "2"" of type '" "Quackle::Rack const &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::Rack * >(argp2);
  (arg1)->replenishAndSetRack((Quackle::Rack const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePosition_replenishAndSetRack__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  Quackle::Rack *arg2 = 0 ;
  Quackle::Player *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__GamePosition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePosition_replenishAndSetRack" "', argument " "1"" of type '" "Quackle::GamePosition *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::GamePosition * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__Rack,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GamePosition_replenishAndSetRack" "', argument " "2"" of type '" "Quackle::Rack const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GamePosition_replenishAndSetRack" "', argument " "2"" of type '" "Quackle::Rack const &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::Rack * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_Quackle__Player,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GamePosition_replenishAndSetRack" "', argument " "3"" of type '" "Quackle::Player &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GamePosition_replenishAndSetRack" "', argument " "3"" of type '" "Quackle::Player &""'"); 
  }
  arg3 = reinterpret_cast< Quackle::Player * >(argp3);
  (arg1)->replenishAndSetRack((Quackle::Rack const &)*arg2,*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePosition_replenishAndSetRack(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "GamePosition_replenishAndSetRack", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Quackle__GamePosition, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Quackle__Rack, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GamePosition_replenishAndSetRack__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Quackle__GamePosition, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Quackle__Rack, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Quackle__Player, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_GamePosition_replenishAndSetRack__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'GamePosition_replenishAndSetRack'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Quackle::GamePosition::replenishAndSetRack(Quackle::Rack const &)\n"
    "    Quackle::GamePosition::replenishAndSetRack(Quackle::Rack const &,Quackle::Player &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_GamePosition_setCurrentPlayerRack__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  Quackle::Rack *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__GamePosition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePosition_setCurrentPlayerRack" "', argument " "1"" of type '" "Quackle::GamePosition *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::GamePosition * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__Rack,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GamePosition_setCurrentPlayerRack" "', argument " "2"" of type '" "Quackle::Rack const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GamePosition_setCurrentPlayerRack" "', argument " "2"" of type '" "Quackle::Rack const &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::Rack * >(argp2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GamePosition_setCurrentPlayerRack" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  (arg1)->setCurrentPlayerRack((Quackle::Rack const &)*arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePosition_setCurrentPlayerRack__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  Quackle::Rack *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__GamePosition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePosition_setCurrentPlayerRack" "', argument " "1"" of type '" "Quackle::GamePosition *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::GamePosition * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__Rack,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GamePosition_setCurrentPlayerRack" "', argument " "2"" of type '" "Quackle::Rack const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GamePosition_setCurrentPlayerRack" "', argument " "2"" of type '" "Quackle::Rack const &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::Rack * >(argp2);
  (arg1)->setCurrentPlayerRack((Quackle::Rack const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePosition_setCurrentPlayerRack(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "GamePosition_setCurrentPlayerRack", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Quackle__GamePosition, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Quackle__Rack, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GamePosition_setCurrentPlayerRack__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Quackle__GamePosition, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Quackle__Rack, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_GamePosition_setCurrentPlayerRack__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'GamePosition_setCurrentPlayerRack'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Quackle::GamePosition::setCurrentPlayerRack(Quackle::Rack const &,bool)\n"
    "    Quackle::GamePosition::setCurrentPlayerRack(Quackle::Rack const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_GamePosition_setPlayerRack__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  int arg2 ;
  Quackle::Rack *arg3 = 0 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__GamePosition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePosition_setPlayerRack" "', argument " "1"" of type '" "Quackle::GamePosition *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::GamePosition * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GamePosition_setPlayerRack" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_Quackle__Rack,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GamePosition_setPlayerRack" "', argument " "3"" of type '" "Quackle::Rack const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GamePosition_setPlayerRack" "', argument " "3"" of type '" "Quackle::Rack const &""'"); 
  }
  arg3 = reinterpret_cast< Quackle::Rack * >(argp3);
  ecode4 = SWIG_AsVal_bool(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "GamePosition_setPlayerRack" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  (arg1)->setPlayerRack(arg2,(Quackle::Rack const &)*arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePosition_setPlayerRack__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  int arg2 ;
  Quackle::Rack *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__GamePosition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePosition_setPlayerRack" "', argument " "1"" of type '" "Quackle::GamePosition *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::GamePosition * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GamePosition_setPlayerRack" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_Quackle__Rack,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GamePosition_setPlayerRack" "', argument " "3"" of type '" "Quackle::Rack const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GamePosition_setPlayerRack" "', argument " "3"" of type '" "Quackle::Rack const &""'"); 
  }
  arg3 = reinterpret_cast< Quackle::Rack * >(argp3);
  (arg1)->setPlayerRack(arg2,(Quackle::Rack const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePosition_setPlayerRack(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "GamePosition_setPlayerRack", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Quackle__GamePosition, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_Quackle__Rack, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_GamePosition_setPlayerRack__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Quackle__GamePosition, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_Quackle__Rack, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_GamePosition_setPlayerRack__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'GamePosition_setPlayerRack'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Quackle::GamePosition::setPlayerRack(int,Quackle::Rack const &,bool)\n"
    "    Quackle::GamePosition::setPlayerRack(int,Quackle::Rack const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_GamePosition_setOppRack__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  Quackle::Rack *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__GamePosition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePosition_setOppRack" "', argument " "1"" of type '" "Quackle::GamePosition *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::GamePosition * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__Rack,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GamePosition_setOppRack" "', argument " "2"" of type '" "Quackle::Rack const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GamePosition_setOppRack" "', argument " "2"" of type '" "Quackle::Rack const &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::Rack * >(argp2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GamePosition_setOppRack" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  (arg1)->setOppRack((Quackle::Rack const &)*arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePosition_setOppRack__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  Quackle::Rack *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__GamePosition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePosition_setOppRack" "', argument " "1"" of type '" "Quackle::GamePosition *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::GamePosition * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__Rack,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GamePosition_setOppRack" "', argument " "2"" of type '" "Quackle::Rack const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GamePosition_setOppRack" "', argument " "2"" of type '" "Quackle::Rack const &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::Rack * >(argp2);
  (arg1)->setOppRack((Quackle::Rack const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePosition_setOppRack(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "GamePosition_setOppRack", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Quackle__GamePosition, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Quackle__Rack, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GamePosition_setOppRack__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Quackle__GamePosition, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Quackle__Rack, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_GamePosition_setOppRack__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'GamePosition_setOppRack'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Quackle::GamePosition::setOppRack(Quackle::Rack const &,bool)\n"
    "    Quackle::GamePosition::setOppRack(Quackle::Rack const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_GamePosition_oppRack(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Quackle::Rack result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__GamePosition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePosition_oppRack" "', argument " "1"" of type '" "Quackle::GamePosition *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::GamePosition * >(argp1);
  result = (arg1)->oppRack();
  resultobj = SWIG_NewPointerObj((new Quackle::Rack(result)), SWIGTYPE_p_Quackle__Rack, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePosition_canSetCurrentPlayerRackWithoutBagExpansion(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  Quackle::Rack *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "GamePosition_canSetCurrentPlayerRackWithoutBagExpansion", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__GamePosition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePosition_canSetCurrentPlayerRackWithoutBagExpansion" "', argument " "1"" of type '" "Quackle::GamePosition const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::GamePosition * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__Rack,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GamePosition_canSetCurrentPlayerRackWithoutBagExpansion" "', argument " "2"" of type '" "Quackle::Rack const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GamePosition_canSetCurrentPlayerRackWithoutBagExpansion" "', argument " "2"" of type '" "Quackle::Rack const &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::Rack * >(argp2);
  result = (bool)((Quackle::GamePosition const *)arg1)->canSetCurrentPlayerRackWithoutBagExpansion((Quackle::Rack const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePosition_canSetPlayerRackWithoutBagExpansion(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  int arg2 ;
  Quackle::Rack *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  bool result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "GamePosition_canSetPlayerRackWithoutBagExpansion", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__GamePosition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePosition_canSetPlayerRackWithoutBagExpansion" "', argument " "1"" of type '" "Quackle::GamePosition const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::GamePosition * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GamePosition_canSetPlayerRackWithoutBagExpansion" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_Quackle__Rack,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GamePosition_canSetPlayerRackWithoutBagExpansion" "', argument " "3"" of type '" "Quackle::Rack const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GamePosition_canSetPlayerRackWithoutBagExpansion" "', argument " "3"" of type '" "Quackle::Rack const &""'"); 
  }
  arg3 = reinterpret_cast< Quackle::Rack * >(argp3);
  result = (bool)((Quackle::GamePosition const *)arg1)->canSetPlayerRackWithoutBagExpansion(arg2,(Quackle::Rack const &)*arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePosition_resetBag(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__GamePosition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePosition_resetBag" "', argument " "1"" of type '" "Quackle::GamePosition *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::GamePosition * >(argp1);
  (arg1)->resetBag();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePosition_setBag(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  Quackle::Bag *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "GamePosition_setBag", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__GamePosition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePosition_setBag" "', argument " "1"" of type '" "Quackle::GamePosition *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::GamePosition * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__Bag,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GamePosition_setBag" "', argument " "2"" of type '" "Quackle::Bag const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GamePosition_setBag" "', argument " "2"" of type '" "Quackle::Bag const &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::Bag * >(argp2);
  (arg1)->setBag((Quackle::Bag const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePosition_setMoveMade(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  Quackle::Move *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "GamePosition_setMoveMade", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__GamePosition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePosition_setMoveMade" "', argument " "1"" of type '" "Quackle::GamePosition *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::GamePosition * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__Move,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GamePosition_setMoveMade" "', argument " "2"" of type '" "Quackle::Move const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GamePosition_setMoveMade" "', argument " "2"" of type '" "Quackle::Move const &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::Move * >(argp2);
  (arg1)->setMoveMade((Quackle::Move const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePosition_moveMade(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Quackle::Move *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__GamePosition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePosition_moveMade" "', argument " "1"" of type '" "Quackle::GamePosition const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::GamePosition * >(argp1);
  result = (Quackle::Move *) &((Quackle::GamePosition const *)arg1)->moveMade();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__Move, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePosition_setCommittedMove(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  Quackle::Move *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "GamePosition_setCommittedMove", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__GamePosition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePosition_setCommittedMove" "', argument " "1"" of type '" "Quackle::GamePosition *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::GamePosition * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__Move,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GamePosition_setCommittedMove" "', argument " "2"" of type '" "Quackle::Move const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GamePosition_setCommittedMove" "', argument " "2"" of type '" "Quackle::Move const &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::Move * >(argp2);
  (arg1)->setCommittedMove((Quackle::Move const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePosition_committedMove(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Quackle::Move *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__GamePosition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePosition_committedMove" "', argument " "1"" of type '" "Quackle::GamePosition const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::GamePosition * >(argp1);
  result = (Quackle::Move *) &((Quackle::GamePosition const *)arg1)->committedMove();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__Move, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePosition_setTileBonus(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  UVString *arg2 = 0 ;
  Quackle::LetterString *arg3 = 0 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "GamePosition_setTileBonus", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__GamePosition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePosition_setTileBonus" "', argument " "1"" of type '" "Quackle::GamePosition *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::GamePosition * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GamePosition_setTileBonus" "', argument " "2"" of type '" "UVString const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GamePosition_setTileBonus" "', argument " "2"" of type '" "UVString const &""'"); 
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_Quackle__FixedLengthString,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GamePosition_setTileBonus" "', argument " "3"" of type '" "Quackle::LetterString const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GamePosition_setTileBonus" "', argument " "3"" of type '" "Quackle::LetterString const &""'"); 
  }
  arg3 = reinterpret_cast< Quackle::LetterString * >(argp3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "GamePosition_setTileBonus" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  (arg1)->setTileBonus((UVString const &)*arg2,(Quackle::LetterString const &)*arg3,arg4);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePosition_prepareForCommit(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__GamePosition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePosition_prepareForCommit" "', argument " "1"" of type '" "Quackle::GamePosition *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::GamePosition * >(argp1);
  (arg1)->prepareForCommit();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePosition_boardAfterMoveMade(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Quackle::Board result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__GamePosition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePosition_boardAfterMoveMade" "', argument " "1"" of type '" "Quackle::GamePosition const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::GamePosition * >(argp1);
  result = ((Quackle::GamePosition const *)arg1)->boardAfterMoveMade();
  resultobj = SWIG_NewPointerObj((new Quackle::Board(result)), SWIGTYPE_p_Quackle__Board, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePosition_resetMoveMade(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__GamePosition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePosition_resetMoveMade" "', argument " "1"" of type '" "Quackle::GamePosition *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::GamePosition * >(argp1);
  (arg1)->resetMoveMade();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePosition_incrementTurn__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  Quackle::History *arg2 = (Quackle::History *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__GamePosition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePosition_incrementTurn" "', argument " "1"" of type '" "Quackle::GamePosition *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::GamePosition * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_Quackle__History, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GamePosition_incrementTurn" "', argument " "2"" of type '" "Quackle::History const *""'"); 
  }
  arg2 = reinterpret_cast< Quackle::History * >(argp2);
  result = (bool)(arg1)->incrementTurn((Quackle::History const *)arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePosition_incrementTurn__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__GamePosition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePosition_incrementTurn" "', argument " "1"" of type '" "Quackle::GamePosition *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::GamePosition * >(argp1);
  result = (bool)(arg1)->incrementTurn();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePosition_incrementTurn(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "GamePosition_incrementTurn", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Quackle__GamePosition, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_GamePosition_incrementTurn__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Quackle__GamePosition, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Quackle__History, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GamePosition_incrementTurn__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'GamePosition_incrementTurn'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Quackle::GamePosition::incrementTurn(Quackle::History const *)\n"
    "    Quackle::GamePosition::incrementTurn()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_GamePosition_turnNumber(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__GamePosition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePosition_turnNumber" "', argument " "1"" of type '" "Quackle::GamePosition const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::GamePosition * >(argp1);
  result = (int)((Quackle::GamePosition const *)arg1)->turnNumber();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePosition_setNestedness(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "GamePosition_setNestedness", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__GamePosition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePosition_setNestedness" "', argument " "1"" of type '" "Quackle::GamePosition *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::GamePosition * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GamePosition_setNestedness" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  (arg1)->setNestedness(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePosition_incrementNestedness(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__GamePosition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePosition_incrementNestedness" "', argument " "1"" of type '" "Quackle::GamePosition *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::GamePosition * >(argp1);
  (arg1)->incrementNestedness();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePosition_nestedness(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  unsigned int result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__GamePosition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePosition_nestedness" "', argument " "1"" of type '" "Quackle::GamePosition const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::GamePosition * >(argp1);
  result = (unsigned int)((Quackle::GamePosition const *)arg1)->nestedness();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePosition_nestednessIndentation(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  UVString result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__GamePosition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePosition_nestednessIndentation" "', argument " "1"" of type '" "Quackle::GamePosition const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::GamePosition * >(argp1);
  result = ((Quackle::GamePosition const *)arg1)->nestednessIndentation();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePosition_scorelessTurnsInARow(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__GamePosition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePosition_scorelessTurnsInARow" "', argument " "1"" of type '" "Quackle::GamePosition const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::GamePosition * >(argp1);
  result = (int)((Quackle::GamePosition const *)arg1)->scorelessTurnsInARow();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePosition_location(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< Quackle::HistoryLocation > result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__GamePosition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePosition_location" "', argument " "1"" of type '" "Quackle::GamePosition const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::GamePosition * >(argp1);
  result = ((Quackle::GamePosition const *)arg1)->location();
  resultobj = SWIG_NewPointerObj((new Quackle::HistoryLocation(result)), SWIGTYPE_p_Quackle__HistoryLocation, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePosition_explanatoryNote(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  UVString *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__GamePosition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePosition_explanatoryNote" "', argument " "1"" of type '" "Quackle::GamePosition const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::GamePosition * >(argp1);
  result = (UVString *) &((Quackle::GamePosition const *)arg1)->explanatoryNote();
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePosition_setExplanatoryNote(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  UVString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "GamePosition_setExplanatoryNote", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__GamePosition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePosition_setExplanatoryNote" "', argument " "1"" of type '" "Quackle::GamePosition *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::GamePosition * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GamePosition_setExplanatoryNote" "', argument " "2"" of type '" "UVString const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GamePosition_setExplanatoryNote" "', argument " "2"" of type '" "UVString const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->setExplanatoryNote((UVString const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePosition_underlyingBoardReference(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Quackle::Board *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__GamePosition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePosition_underlyingBoardReference" "', argument " "1"" of type '" "Quackle::GamePosition *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::GamePosition * >(argp1);
  result = (Quackle::Board *) &(arg1)->underlyingBoardReference();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__Board, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_GamePosition(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__GamePosition, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GamePosition" "', argument " "1"" of type '" "Quackle::GamePosition *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::GamePosition * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *GamePosition_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Quackle__GamePosition, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *GamePosition_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_History(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::History *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "new_History", 0, 0, 0)) SWIG_fail;
  result = (Quackle::History *)new Quackle::History();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__History, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_History_players(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::History *arg1 = (Quackle::History *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Quackle::PlayerList *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__History, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "History_players" "', argument " "1"" of type '" "Quackle::History const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::History * >(argp1);
  result = (Quackle::PlayerList *) &((Quackle::History const *)arg1)->players();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__PlayerList, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_History_lastPlayer(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::History *arg1 = (Quackle::History *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Quackle::Player *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__History, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "History_lastPlayer" "', argument " "1"" of type '" "Quackle::History const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::History * >(argp1);
  result = (Quackle::Player *) &((Quackle::History const *)arg1)->lastPlayer();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__Player, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_History_lastPosition(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::History *arg1 = (Quackle::History *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Quackle::GamePosition *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__History, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "History_lastPosition" "', argument " "1"" of type '" "Quackle::History const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::History * >(argp1);
  result = (Quackle::GamePosition *) &((Quackle::History const *)arg1)->lastPosition();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__GamePosition, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_History_maximumTurnNumber(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::History *arg1 = (Quackle::History *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__History, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "History_maximumTurnNumber" "', argument " "1"" of type '" "Quackle::History const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::History * >(argp1);
  result = (int)((Quackle::History const *)arg1)->maximumTurnNumber();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_History_lastLocation(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::History *arg1 = (Quackle::History *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< Quackle::HistoryLocation > result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__History, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "History_lastLocation" "', argument " "1"" of type '" "Quackle::History const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::History * >(argp1);
  result = ((Quackle::History const *)arg1)->lastLocation();
  resultobj = SWIG_NewPointerObj((new Quackle::HistoryLocation(result)), SWIGTYPE_p_Quackle__HistoryLocation, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_History_currentLocation(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::History *arg1 = (Quackle::History *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< Quackle::HistoryLocation > result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__History, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "History_currentLocation" "', argument " "1"" of type '" "Quackle::History const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::History * >(argp1);
  result = ((Quackle::History const *)arg1)->currentLocation();
  resultobj = SWIG_NewPointerObj((new Quackle::HistoryLocation(result)), SWIGTYPE_p_Quackle__HistoryLocation, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_History_currentPosition__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Quackle::History *arg1 = (Quackle::History *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Quackle::GamePosition *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__History, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "History_currentPosition" "', argument " "1"" of type '" "Quackle::History const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::History * >(argp1);
  result = (Quackle::GamePosition *) &((Quackle::History const *)arg1)->currentPosition();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__GamePosition, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_History_currentPosition__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Quackle::History *arg1 = (Quackle::History *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Quackle::GamePosition *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__History, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "History_currentPosition" "', argument " "1"" of type '" "Quackle::History *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::History * >(argp1);
  result = (Quackle::GamePosition *) &(arg1)->currentPosition();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__GamePosition, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_History_currentPosition(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "History_currentPosition", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Quackle__History, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_History_currentPosition__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Quackle__History, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_History_currentPosition__SWIG_0(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'History_currentPosition'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Quackle::History::currentPosition() const\n"
    "    Quackle::History::currentPosition()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_History_positionsFacedBy(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::History *arg1 = (Quackle::History *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  Quackle::PositionList result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "History_positionsFacedBy", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__History, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "History_positionsFacedBy" "', argument " "1"" of type '" "Quackle::History const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::History * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "History_positionsFacedBy" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = ((Quackle::History const *)arg1)->positionsFacedBy(arg2);
  resultobj = swig::from(static_cast< std::vector< Quackle::GamePosition,std::allocator< Quackle::GamePosition > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_History_nextPosition__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Quackle::History *arg1 = (Quackle::History *) 0 ;
  bool *arg2 = (bool *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  Quackle::GamePosition *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__History, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "History_nextPosition" "', argument " "1"" of type '" "Quackle::History const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::History * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_bool, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "History_nextPosition" "', argument " "2"" of type '" "bool *""'"); 
  }
  arg2 = reinterpret_cast< bool * >(argp2);
  result = (Quackle::GamePosition *) &((Quackle::History const *)arg1)->nextPosition(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__GamePosition, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_History_nextPosition__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Quackle::History *arg1 = (Quackle::History *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Quackle::GamePosition *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__History, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "History_nextPosition" "', argument " "1"" of type '" "Quackle::History const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::History * >(argp1);
  result = (Quackle::GamePosition *) &((Quackle::History const *)arg1)->nextPosition();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__GamePosition, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_History_nextPosition(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "History_nextPosition", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Quackle__History, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_History_nextPosition__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Quackle__History, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_bool, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_History_nextPosition__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'History_nextPosition'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Quackle::History::nextPosition(bool *) const\n"
    "    Quackle::History::nextPosition() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_History_nextPositionFacedBy__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Quackle::History *arg1 = (Quackle::History *) 0 ;
  int arg2 ;
  bool *arg3 = (bool *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  Quackle::GamePosition *result = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__History, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "History_nextPositionFacedBy" "', argument " "1"" of type '" "Quackle::History const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::History * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "History_nextPositionFacedBy" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_bool, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "History_nextPositionFacedBy" "', argument " "3"" of type '" "bool *""'"); 
  }
  arg3 = reinterpret_cast< bool * >(argp3);
  result = (Quackle::GamePosition *) &((Quackle::History const *)arg1)->nextPositionFacedBy(arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__GamePosition, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_History_nextPositionFacedBy__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Quackle::History *arg1 = (Quackle::History *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  Quackle::GamePosition *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__History, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "History_nextPositionFacedBy" "', argument " "1"" of type '" "Quackle::History const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::History * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "History_nextPositionFacedBy" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (Quackle::GamePosition *) &((Quackle::History const *)arg1)->nextPositionFacedBy(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__GamePosition, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_History_nextPositionFacedBy(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "History_nextPositionFacedBy", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Quackle__History, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_History_nextPositionFacedBy__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Quackle__History, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_bool, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_History_nextPositionFacedBy__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'History_nextPositionFacedBy'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Quackle::History::nextPositionFacedBy(int,bool *) const\n"
    "    Quackle::History::nextPositionFacedBy(int) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_History_previousPosition__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Quackle::History *arg1 = (Quackle::History *) 0 ;
  bool *arg2 = (bool *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  Quackle::GamePosition *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__History, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "History_previousPosition" "', argument " "1"" of type '" "Quackle::History const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::History * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_bool, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "History_previousPosition" "', argument " "2"" of type '" "bool *""'"); 
  }
  arg2 = reinterpret_cast< bool * >(argp2);
  result = (Quackle::GamePosition *) &((Quackle::History const *)arg1)->previousPosition(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__GamePosition, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_History_previousPosition__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Quackle::History *arg1 = (Quackle::History *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Quackle::GamePosition *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__History, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "History_previousPosition" "', argument " "1"" of type '" "Quackle::History const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::History * >(argp1);
  result = (Quackle::GamePosition *) &((Quackle::History const *)arg1)->previousPosition();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__GamePosition, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_History_previousPosition(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "History_previousPosition", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Quackle__History, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_History_previousPosition__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Quackle__History, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_bool, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_History_previousPosition__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'History_previousPosition'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Quackle::History::previousPosition(bool *) const\n"
    "    Quackle::History::previousPosition() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_History_firstPosition__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Quackle::History *arg1 = (Quackle::History *) 0 ;
  bool *arg2 = (bool *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  Quackle::GamePosition *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__History, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "History_firstPosition" "', argument " "1"" of type '" "Quackle::History const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::History * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_bool, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "History_firstPosition" "', argument " "2"" of type '" "bool *""'"); 
  }
  arg2 = reinterpret_cast< bool * >(argp2);
  result = (Quackle::GamePosition *) &((Quackle::History const *)arg1)->firstPosition(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__GamePosition, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_History_firstPosition__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Quackle::History *arg1 = (Quackle::History *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Quackle::GamePosition *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__History, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "History_firstPosition" "', argument " "1"" of type '" "Quackle::History const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::History * >(argp1);
  result = (Quackle::GamePosition *) &((Quackle::History const *)arg1)->firstPosition();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__GamePosition, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_History_firstPosition(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "History_firstPosition", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Quackle__History, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_History_firstPosition__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Quackle__History, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_bool, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_History_firstPosition__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'History_firstPosition'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Quackle::History::firstPosition(bool *) const\n"
    "    Quackle::History::firstPosition() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_History_positionAt__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Quackle::History *arg1 = (Quackle::History *) 0 ;
  Quackle::HistoryLocation *arg2 = 0 ;
  bool *arg3 = (bool *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  Quackle::GamePosition *result = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__History, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "History_positionAt" "', argument " "1"" of type '" "Quackle::History const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::History * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__HistoryLocation,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "History_positionAt" "', argument " "2"" of type '" "Quackle::HistoryLocation const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "History_positionAt" "', argument " "2"" of type '" "Quackle::HistoryLocation const &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::HistoryLocation * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_bool, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "History_positionAt" "', argument " "3"" of type '" "bool *""'"); 
  }
  arg3 = reinterpret_cast< bool * >(argp3);
  result = (Quackle::GamePosition *) &((Quackle::History const *)arg1)->positionAt((Quackle::HistoryLocation const &)*arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__GamePosition, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_History_positionAt__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Quackle::History *arg1 = (Quackle::History *) 0 ;
  Quackle::HistoryLocation *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  Quackle::GamePosition *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__History, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "History_positionAt" "', argument " "1"" of type '" "Quackle::History const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::History * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__HistoryLocation,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "History_positionAt" "', argument " "2"" of type '" "Quackle::HistoryLocation const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "History_positionAt" "', argument " "2"" of type '" "Quackle::HistoryLocation const &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::HistoryLocation * >(argp2);
  result = (Quackle::GamePosition *) &((Quackle::History const *)arg1)->positionAt((Quackle::HistoryLocation const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__GamePosition, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_History_positionAt(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "History_positionAt", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Quackle__History, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Quackle__HistoryLocation, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_History_positionAt__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Quackle__History, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Quackle__HistoryLocation, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_bool, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_History_positionAt__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'History_positionAt'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Quackle::History::positionAt(Quackle::HistoryLocation const &,bool *) const\n"
    "    Quackle::History::positionAt(Quackle::HistoryLocation const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_History(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::History *arg1 = (Quackle::History *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__History, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_History" "', argument " "1"" of type '" "Quackle::History *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::History * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *History_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Quackle__History, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *History_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_Game(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Game *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "new_Game", 0, 0, 0)) SWIG_fail;
  result = (Quackle::Game *)new Quackle::Game();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__Game, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Game(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Game *arg1 = (Quackle::Game *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Game, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Game" "', argument " "1"" of type '" "Quackle::Game *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Game * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_reset(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Game *arg1 = (Quackle::Game *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_reset" "', argument " "1"" of type '" "Quackle::Game *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Game * >(argp1);
  (arg1)->reset();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_setPlayers(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Game *arg1 = (Quackle::Game *) 0 ;
  Quackle::PlayerList *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Game_setPlayers", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_setPlayers" "', argument " "1"" of type '" "Quackle::Game *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Game * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__PlayerList,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Game_setPlayers" "', argument " "2"" of type '" "Quackle::PlayerList const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Game_setPlayers" "', argument " "2"" of type '" "Quackle::PlayerList const &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::PlayerList * >(argp2);
  (arg1)->setPlayers((Quackle::PlayerList const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_players(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Game *arg1 = (Quackle::Game *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Quackle::PlayerList *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_players" "', argument " "1"" of type '" "Quackle::Game const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Game * >(argp1);
  result = (Quackle::PlayerList *) &((Quackle::Game const *)arg1)->players();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__PlayerList, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_hasPositions(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Game *arg1 = (Quackle::Game *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_hasPositions" "', argument " "1"" of type '" "Quackle::Game const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Game * >(argp1);
  result = (bool)((Quackle::Game const *)arg1)->hasPositions();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_history(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Game *arg1 = (Quackle::Game *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Quackle::History *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_history" "', argument " "1"" of type '" "Quackle::Game const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Game * >(argp1);
  result = (Quackle::History *) &((Quackle::Game const *)arg1)->history();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__History, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_addPosition(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Game *arg1 = (Quackle::Game *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_addPosition" "', argument " "1"" of type '" "Quackle::Game *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Game * >(argp1);
  (arg1)->addPosition();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_currentPosition__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Quackle::Game *arg1 = (Quackle::Game *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Quackle::GamePosition *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_currentPosition" "', argument " "1"" of type '" "Quackle::Game const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Game * >(argp1);
  result = (Quackle::GamePosition *) &((Quackle::Game const *)arg1)->currentPosition();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__GamePosition, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_currentPosition__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Quackle::Game *arg1 = (Quackle::Game *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Quackle::GamePosition *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_currentPosition" "', argument " "1"" of type '" "Quackle::Game *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Game * >(argp1);
  result = (Quackle::GamePosition *) &(arg1)->currentPosition();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__GamePosition, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_currentPosition(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Game_currentPosition", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Quackle__Game, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Game_currentPosition__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Quackle__Game, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Game_currentPosition__SWIG_0(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Game_currentPosition'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Quackle::Game::currentPosition() const\n"
    "    Quackle::Game::currentPosition()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Game_setCurrentPosition__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Quackle::Game *arg1 = (Quackle::Game *) 0 ;
  Quackle::HistoryLocation *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_setCurrentPosition" "', argument " "1"" of type '" "Quackle::Game *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Game * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__HistoryLocation,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Game_setCurrentPosition" "', argument " "2"" of type '" "Quackle::HistoryLocation const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Game_setCurrentPosition" "', argument " "2"" of type '" "Quackle::HistoryLocation const &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::HistoryLocation * >(argp2);
  (arg1)->setCurrentPosition((Quackle::HistoryLocation const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_setCurrentPosition__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Quackle::Game *arg1 = (Quackle::Game *) 0 ;
  Quackle::GamePosition *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_setCurrentPosition" "', argument " "1"" of type '" "Quackle::Game *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Game * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__GamePosition,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Game_setCurrentPosition" "', argument " "2"" of type '" "Quackle::GamePosition const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Game_setCurrentPosition" "', argument " "2"" of type '" "Quackle::GamePosition const &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::GamePosition * >(argp2);
  (arg1)->setCurrentPosition((Quackle::GamePosition const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_setCurrentPosition(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Game_setCurrentPosition", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Quackle__Game, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Quackle__HistoryLocation, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Game_setCurrentPosition__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Quackle__Game, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Quackle__GamePosition, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Game_setCurrentPosition__SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Game_setCurrentPosition'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Quackle::Game::setCurrentPosition(Quackle::HistoryLocation const &)\n"
    "    Quackle::Game::setCurrentPosition(Quackle::GamePosition const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Game_associateComputerPlayer(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Game *arg1 = (Quackle::Game *) 0 ;
  int arg2 ;
  Quackle::ComputerPlayer *arg3 = (Quackle::ComputerPlayer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Game_associateComputerPlayer", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_associateComputerPlayer" "', argument " "1"" of type '" "Quackle::Game *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Game * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Game_associateComputerPlayer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_Quackle__ComputerPlayer, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Game_associateComputerPlayer" "', argument " "3"" of type '" "Quackle::ComputerPlayer *""'"); 
  }
  arg3 = reinterpret_cast< Quackle::ComputerPlayer * >(argp3);
  (arg1)->associateComputerPlayer(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_computerPlayer(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Game *arg1 = (Quackle::Game *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  Quackle::ComputerPlayer *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Game_computerPlayer", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_computerPlayer" "', argument " "1"" of type '" "Quackle::Game *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Game * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Game_computerPlayer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (Quackle::ComputerPlayer *)(arg1)->computerPlayer(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__ComputerPlayer, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_setDefaultComputerPlayer(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Game *arg1 = (Quackle::Game *) 0 ;
  Quackle::ComputerPlayer *arg2 = (Quackle::ComputerPlayer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Game_setDefaultComputerPlayer", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_setDefaultComputerPlayer" "', argument " "1"" of type '" "Quackle::Game *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Game * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_Quackle__ComputerPlayer, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Game_setDefaultComputerPlayer" "', argument " "2"" of type '" "Quackle::ComputerPlayer *""'"); 
  }
  arg2 = reinterpret_cast< Quackle::ComputerPlayer * >(argp2);
  (arg1)->setDefaultComputerPlayer(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_associateKnownComputerPlayers(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Game *arg1 = (Quackle::Game *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_associateKnownComputerPlayers" "', argument " "1"" of type '" "Quackle::Game *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Game * >(argp1);
  (arg1)->associateKnownComputerPlayers();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_defaultComputerPlayer(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Game *arg1 = (Quackle::Game *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Quackle::ComputerPlayer *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_defaultComputerPlayer" "', argument " "1"" of type '" "Quackle::Game *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Game * >(argp1);
  result = (Quackle::ComputerPlayer *)(arg1)->defaultComputerPlayer();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__ComputerPlayer, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_haveComputerPlay__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Quackle::Game *arg1 = (Quackle::Game *) 0 ;
  Quackle::ComputerPlayer *arg2 = (Quackle::ComputerPlayer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  Quackle::Move result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_haveComputerPlay" "', argument " "1"" of type '" "Quackle::Game *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Game * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_Quackle__ComputerPlayer, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Game_haveComputerPlay" "', argument " "2"" of type '" "Quackle::ComputerPlayer *""'"); 
  }
  arg2 = reinterpret_cast< Quackle::ComputerPlayer * >(argp2);
  result = (arg1)->haveComputerPlay(arg2);
  resultobj = SWIG_NewPointerObj((new Quackle::Move(result)), SWIGTYPE_p_Quackle__Move, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_haveComputerPlay__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Quackle::Game *arg1 = (Quackle::Game *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Quackle::Move result;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_haveComputerPlay" "', argument " "1"" of type '" "Quackle::Game *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Game * >(argp1);
  result = (arg1)->haveComputerPlay();
  resultobj = SWIG_NewPointerObj((new Quackle::Move(result)), SWIGTYPE_p_Quackle__Move, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_haveComputerPlay(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Game_haveComputerPlay", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Quackle__Game, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Game_haveComputerPlay__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Quackle__Game, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Quackle__ComputerPlayer, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Game_haveComputerPlay__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Game_haveComputerPlay'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Quackle::Game::haveComputerPlay(Quackle::ComputerPlayer *)\n"
    "    Quackle::Game::haveComputerPlay()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Game_advanceToNoncomputerPlayer(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Game *arg1 = (Quackle::Game *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_advanceToNoncomputerPlayer" "', argument " "1"" of type '" "Quackle::Game *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Game * >(argp1);
  (arg1)->advanceToNoncomputerPlayer();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_setCandidate(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Game *arg1 = (Quackle::Game *) 0 ;
  Quackle::Move *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Game_setCandidate", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_setCandidate" "', argument " "1"" of type '" "Quackle::Game *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Game * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__Move,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Game_setCandidate" "', argument " "2"" of type '" "Quackle::Move const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Game_setCandidate" "', argument " "2"" of type '" "Quackle::Move const &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::Move * >(argp2);
  (arg1)->setCandidate((Quackle::Move const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_candidate(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Game *arg1 = (Quackle::Game *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Quackle::Move *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_candidate" "', argument " "1"" of type '" "Quackle::Game const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Game * >(argp1);
  result = (Quackle::Move *) &((Quackle::Game const *)arg1)->candidate();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__Move, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_resetCandidature(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Game *arg1 = (Quackle::Game *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_resetCandidature" "', argument " "1"" of type '" "Quackle::Game *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Game * >(argp1);
  (arg1)->resetCandidature();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_commitCandidate__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Quackle::Game *arg1 = (Quackle::Game *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_commitCandidate" "', argument " "1"" of type '" "Quackle::Game *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Game * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Game_commitCandidate" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->commitCandidate(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_commitCandidate__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Quackle::Game *arg1 = (Quackle::Game *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_commitCandidate" "', argument " "1"" of type '" "Quackle::Game *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Game * >(argp1);
  (arg1)->commitCandidate();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_commitCandidate(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Game_commitCandidate", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Quackle__Game, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Game_commitCandidate__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Quackle__Game, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Game_commitCandidate__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Game_commitCandidate'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Quackle::Game::commitCandidate(bool)\n"
    "    Quackle::Game::commitCandidate()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Game_commitMove(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Game *arg1 = (Quackle::Game *) 0 ;
  Quackle::Move *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Game_commitMove", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_commitMove" "', argument " "1"" of type '" "Quackle::Game *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Game * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__Move,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Game_commitMove" "', argument " "2"" of type '" "Quackle::Move const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Game_commitMove" "', argument " "2"" of type '" "Quackle::Move const &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::Move * >(argp2);
  (arg1)->commitMove((Quackle::Move const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_description(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Game *arg1 = (Quackle::Game *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  UVString *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_description" "', argument " "1"" of type '" "Quackle::Game const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Game * >(argp1);
  result = (UVString *) &((Quackle::Game const *)arg1)->description();
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_setDescription(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Game *arg1 = (Quackle::Game *) 0 ;
  UVString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Game_setDescription", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_setDescription" "', argument " "1"" of type '" "Quackle::Game *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Game * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Game_setDescription" "', argument " "2"" of type '" "UVString const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Game_setDescription" "', argument " "2"" of type '" "UVString const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->setDescription((UVString const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_title(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Game *arg1 = (Quackle::Game *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  UVString *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_title" "', argument " "1"" of type '" "Quackle::Game const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Game * >(argp1);
  result = (UVString *) &((Quackle::Game const *)arg1)->title();
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_setTitle(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Game *arg1 = (Quackle::Game *) 0 ;
  UVString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Game_setTitle", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_setTitle" "', argument " "1"" of type '" "Quackle::Game *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Game * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Game_setTitle" "', argument " "2"" of type '" "UVString const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Game_setTitle" "', argument " "2"" of type '" "UVString const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->setTitle((UVString const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *Game_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Quackle__Game, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Game_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_GameParameters(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::GameParameters *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "new_GameParameters", 0, 0, 0)) SWIG_fail;
  result = (Quackle::GameParameters *)new Quackle::GameParameters();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__GameParameters, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameParameters_minimumTilesForExchange(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::GameParameters *arg1 = (Quackle::GameParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__GameParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameParameters_minimumTilesForExchange" "', argument " "1"" of type '" "Quackle::GameParameters const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::GameParameters * >(argp1);
  result = (int)((Quackle::GameParameters const *)arg1)->minimumTilesForExchange();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameParameters_setMinimumTilesForExchange(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::GameParameters *arg1 = (Quackle::GameParameters *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "GameParameters_setMinimumTilesForExchange", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__GameParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameParameters_setMinimumTilesForExchange" "', argument " "1"" of type '" "Quackle::GameParameters *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::GameParameters * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GameParameters_setMinimumTilesForExchange" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->setMinimumTilesForExchange(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameParameters_numberOfScorelessTurnsThatEndsGame(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::GameParameters *arg1 = (Quackle::GameParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__GameParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameParameters_numberOfScorelessTurnsThatEndsGame" "', argument " "1"" of type '" "Quackle::GameParameters const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::GameParameters * >(argp1);
  result = (int)((Quackle::GameParameters const *)arg1)->numberOfScorelessTurnsThatEndsGame();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameParameters_setNumberOfScorelessTurnsThatEndsGame(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::GameParameters *arg1 = (Quackle::GameParameters *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "GameParameters_setNumberOfScorelessTurnsThatEndsGame", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__GameParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameParameters_setNumberOfScorelessTurnsThatEndsGame" "', argument " "1"" of type '" "Quackle::GameParameters *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::GameParameters * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GameParameters_setNumberOfScorelessTurnsThatEndsGame" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->setNumberOfScorelessTurnsThatEndsGame(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameParameters_bingoBonus(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::GameParameters *arg1 = (Quackle::GameParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__GameParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameParameters_bingoBonus" "', argument " "1"" of type '" "Quackle::GameParameters const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::GameParameters * >(argp1);
  result = (int)((Quackle::GameParameters const *)arg1)->bingoBonus();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameParameters_setBingoBonus(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::GameParameters *arg1 = (Quackle::GameParameters *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "GameParameters_setBingoBonus", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__GameParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameParameters_setBingoBonus" "', argument " "1"" of type '" "Quackle::GameParameters *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::GameParameters * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GameParameters_setBingoBonus" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->setBingoBonus(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameParameters_rackSize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::GameParameters *arg1 = (Quackle::GameParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__GameParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameParameters_rackSize" "', argument " "1"" of type '" "Quackle::GameParameters const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::GameParameters * >(argp1);
  result = (int)((Quackle::GameParameters const *)arg1)->rackSize();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameParameters_setRackSize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::GameParameters *arg1 = (Quackle::GameParameters *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "GameParameters_setRackSize", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__GameParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameParameters_setRackSize" "', argument " "1"" of type '" "Quackle::GameParameters *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::GameParameters * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GameParameters_setRackSize" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->setRackSize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameParameters_overdrawPenalty(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::GameParameters *arg1 = (Quackle::GameParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  unsigned int result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__GameParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameParameters_overdrawPenalty" "', argument " "1"" of type '" "Quackle::GameParameters const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::GameParameters * >(argp1);
  result = (unsigned int)((Quackle::GameParameters const *)arg1)->overdrawPenalty();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameParameters_setOverdrawPenalty(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::GameParameters *arg1 = (Quackle::GameParameters *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "GameParameters_setOverdrawPenalty", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__GameParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameParameters_setOverdrawPenalty" "', argument " "1"" of type '" "Quackle::GameParameters *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::GameParameters * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GameParameters_setOverdrawPenalty" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  (arg1)->setOverdrawPenalty(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_GameParameters(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::GameParameters *arg1 = (Quackle::GameParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__GameParameters, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GameParameters" "', argument " "1"" of type '" "Quackle::GameParameters *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::GameParameters * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *GameParameters_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Quackle__GameParameters, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *GameParameters_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_EnglishParameters(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::EnglishParameters *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "new_EnglishParameters", 0, 0, 0)) SWIG_fail;
  result = (Quackle::EnglishParameters *)new Quackle::EnglishParameters();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__EnglishParameters, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_EnglishParameters(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::EnglishParameters *arg1 = (Quackle::EnglishParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__EnglishParameters, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_EnglishParameters" "', argument " "1"" of type '" "Quackle::EnglishParameters *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::EnglishParameters * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *EnglishParameters_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Quackle__EnglishParameters, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *EnglishParameters_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_AveragedValue(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::AveragedValue *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "new_AveragedValue", 0, 0, 0)) SWIG_fail;
  result = (Quackle::AveragedValue *)new Quackle::AveragedValue();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__AveragedValue, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AveragedValue_incorporateValue(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::AveragedValue *arg1 = (Quackle::AveragedValue *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "AveragedValue_incorporateValue", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__AveragedValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AveragedValue_incorporateValue" "', argument " "1"" of type '" "Quackle::AveragedValue *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::AveragedValue * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AveragedValue_incorporateValue" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  (arg1)->incorporateValue(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AveragedValue_clear(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::AveragedValue *arg1 = (Quackle::AveragedValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__AveragedValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AveragedValue_clear" "', argument " "1"" of type '" "Quackle::AveragedValue *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::AveragedValue * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AveragedValue_valueSum(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::AveragedValue *arg1 = (Quackle::AveragedValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  long double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__AveragedValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AveragedValue_valueSum" "', argument " "1"" of type '" "Quackle::AveragedValue const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::AveragedValue * >(argp1);
  result = (long double)((Quackle::AveragedValue const *)arg1)->valueSum();
  resultobj = SWIG_NewPointerObj((new long double(result)), SWIGTYPE_p_long_double, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AveragedValue_squaredValueSum(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::AveragedValue *arg1 = (Quackle::AveragedValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  long double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__AveragedValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AveragedValue_squaredValueSum" "', argument " "1"" of type '" "Quackle::AveragedValue const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::AveragedValue * >(argp1);
  result = (long double)((Quackle::AveragedValue const *)arg1)->squaredValueSum();
  resultobj = SWIG_NewPointerObj((new long double(result)), SWIGTYPE_p_long_double, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AveragedValue_incorporatedValues(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::AveragedValue *arg1 = (Quackle::AveragedValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  long result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__AveragedValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AveragedValue_incorporatedValues" "', argument " "1"" of type '" "Quackle::AveragedValue const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::AveragedValue * >(argp1);
  result = (long)((Quackle::AveragedValue const *)arg1)->incorporatedValues();
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AveragedValue_hasValues(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::AveragedValue *arg1 = (Quackle::AveragedValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__AveragedValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AveragedValue_hasValues" "', argument " "1"" of type '" "Quackle::AveragedValue const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::AveragedValue * >(argp1);
  result = (bool)((Quackle::AveragedValue const *)arg1)->hasValues();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AveragedValue_averagedValue(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::AveragedValue *arg1 = (Quackle::AveragedValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__AveragedValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AveragedValue_averagedValue" "', argument " "1"" of type '" "Quackle::AveragedValue const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::AveragedValue * >(argp1);
  result = (double)((Quackle::AveragedValue const *)arg1)->averagedValue();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AveragedValue_standardDeviation(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::AveragedValue *arg1 = (Quackle::AveragedValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__AveragedValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AveragedValue_standardDeviation" "', argument " "1"" of type '" "Quackle::AveragedValue const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::AveragedValue * >(argp1);
  result = (double)((Quackle::AveragedValue const *)arg1)->standardDeviation();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_AveragedValue(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::AveragedValue *arg1 = (Quackle::AveragedValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__AveragedValue, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_AveragedValue" "', argument " "1"" of type '" "Quackle::AveragedValue *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::AveragedValue * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *AveragedValue_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Quackle__AveragedValue, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *AveragedValue_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_PositionStatistics_getStatistic(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::PositionStatistics *arg1 = (Quackle::PositionStatistics *) 0 ;
  Quackle::PositionStatistics::StatisticType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  Quackle::AveragedValue result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "PositionStatistics_getStatistic", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__PositionStatistics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionStatistics_getStatistic" "', argument " "1"" of type '" "Quackle::PositionStatistics const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::PositionStatistics * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PositionStatistics_getStatistic" "', argument " "2"" of type '" "Quackle::PositionStatistics::StatisticType""'");
  } 
  arg2 = static_cast< Quackle::PositionStatistics::StatisticType >(val2);
  result = ((Quackle::PositionStatistics const *)arg1)->getStatistic(arg2);
  resultobj = SWIG_NewPointerObj((new Quackle::AveragedValue(result)), SWIGTYPE_p_Quackle__AveragedValue, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PositionStatistics_score_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::PositionStatistics *arg1 = (Quackle::PositionStatistics *) 0 ;
  Quackle::AveragedValue *arg2 = (Quackle::AveragedValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "PositionStatistics_score_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__PositionStatistics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionStatistics_score_set" "', argument " "1"" of type '" "Quackle::PositionStatistics *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::PositionStatistics * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_Quackle__AveragedValue, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PositionStatistics_score_set" "', argument " "2"" of type '" "Quackle::AveragedValue *""'"); 
  }
  arg2 = reinterpret_cast< Quackle::AveragedValue * >(argp2);
  if (arg1) (arg1)->score = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PositionStatistics_score_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::PositionStatistics *arg1 = (Quackle::PositionStatistics *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Quackle::AveragedValue *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__PositionStatistics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionStatistics_score_get" "', argument " "1"" of type '" "Quackle::PositionStatistics *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::PositionStatistics * >(argp1);
  result = (Quackle::AveragedValue *)& ((arg1)->score);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__AveragedValue, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PositionStatistics_bingos_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::PositionStatistics *arg1 = (Quackle::PositionStatistics *) 0 ;
  Quackle::AveragedValue *arg2 = (Quackle::AveragedValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "PositionStatistics_bingos_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__PositionStatistics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionStatistics_bingos_set" "', argument " "1"" of type '" "Quackle::PositionStatistics *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::PositionStatistics * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_Quackle__AveragedValue, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PositionStatistics_bingos_set" "', argument " "2"" of type '" "Quackle::AveragedValue *""'"); 
  }
  arg2 = reinterpret_cast< Quackle::AveragedValue * >(argp2);
  if (arg1) (arg1)->bingos = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PositionStatistics_bingos_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::PositionStatistics *arg1 = (Quackle::PositionStatistics *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Quackle::AveragedValue *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__PositionStatistics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionStatistics_bingos_get" "', argument " "1"" of type '" "Quackle::PositionStatistics *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::PositionStatistics * >(argp1);
  result = (Quackle::AveragedValue *)& ((arg1)->bingos);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__AveragedValue, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PositionStatistics(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::PositionStatistics *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "new_PositionStatistics", 0, 0, 0)) SWIG_fail;
  result = (Quackle::PositionStatistics *)new Quackle::PositionStatistics();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__PositionStatistics, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_PositionStatistics(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::PositionStatistics *arg1 = (Quackle::PositionStatistics *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__PositionStatistics, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PositionStatistics" "', argument " "1"" of type '" "Quackle::PositionStatistics *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::PositionStatistics * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *PositionStatistics_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Quackle__PositionStatistics, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *PositionStatistics_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_Level_setNumberScores(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Level *arg1 = (Quackle::Level *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Level_setNumberScores", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Level, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Level_setNumberScores" "', argument " "1"" of type '" "Quackle::Level *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Level * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Level_setNumberScores" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  (arg1)->setNumberScores(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Level_statistics_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Level *arg1 = (Quackle::Level *) 0 ;
  Quackle::PositionStatisticsList *arg2 = (Quackle::PositionStatisticsList *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Level_statistics_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Level, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Level_statistics_set" "', argument " "1"" of type '" "Quackle::Level *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Level * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_std__vectorT_Quackle__PositionStatistics_std__allocatorT_Quackle__PositionStatistics_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Level_statistics_set" "', argument " "2"" of type '" "Quackle::PositionStatisticsList *""'"); 
  }
  arg2 = reinterpret_cast< Quackle::PositionStatisticsList * >(argp2);
  if (arg1) (arg1)->statistics = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Level_statistics_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Level *arg1 = (Quackle::Level *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Quackle::PositionStatisticsList *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Level, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Level_statistics_get" "', argument " "1"" of type '" "Quackle::Level *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Level * >(argp1);
  result = (Quackle::PositionStatisticsList *)& ((arg1)->statistics);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Quackle__PositionStatistics_std__allocatorT_Quackle__PositionStatistics_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Level(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Level *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "new_Level", 0, 0, 0)) SWIG_fail;
  result = (Quackle::Level *)new Quackle::Level();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__Level, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Level(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Level *arg1 = (Quackle::Level *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Level, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Level" "', argument " "1"" of type '" "Quackle::Level *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Level * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Level_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Quackle__Level, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Level_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_LevelList_setNumberLevels(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::LevelList *arg1 = (Quackle::LevelList *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LevelList_setNumberLevels", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__LevelList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LevelList_setNumberLevels" "', argument " "1"" of type '" "Quackle::LevelList *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::LevelList * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LevelList_setNumberLevels" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  (arg1)->setNumberLevels(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LevelList(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::LevelList *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "new_LevelList", 0, 0, 0)) SWIG_fail;
  result = (Quackle::LevelList *)new Quackle::LevelList();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__LevelList, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_LevelList(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::LevelList *arg1 = (Quackle::LevelList *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__LevelList, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LevelList" "', argument " "1"" of type '" "Quackle::LevelList *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::LevelList * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *LevelList_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Quackle__LevelList, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *LevelList_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_SimmedMove(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Move *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Quackle::SimmedMove *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_Quackle__Move,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SimmedMove" "', argument " "1"" of type '" "Quackle::Move const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SimmedMove" "', argument " "1"" of type '" "Quackle::Move const &""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Move * >(argp1);
  result = (Quackle::SimmedMove *)new Quackle::SimmedMove((Quackle::Move const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__SimmedMove, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimmedMove_calculateEquity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::SimmedMove *arg1 = (Quackle::SimmedMove *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__SimmedMove, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimmedMove_calculateEquity" "', argument " "1"" of type '" "Quackle::SimmedMove const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::SimmedMove * >(argp1);
  result = (double)((Quackle::SimmedMove const *)arg1)->calculateEquity();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimmedMove_calculateWinPercentage(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::SimmedMove *arg1 = (Quackle::SimmedMove *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__SimmedMove, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimmedMove_calculateWinPercentage" "', argument " "1"" of type '" "Quackle::SimmedMove const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::SimmedMove * >(argp1);
  result = (double)((Quackle::SimmedMove const *)arg1)->calculateWinPercentage();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimmedMove_clear(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::SimmedMove *arg1 = (Quackle::SimmedMove *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__SimmedMove, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimmedMove_clear" "', argument " "1"" of type '" "Quackle::SimmedMove *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::SimmedMove * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimmedMove_includeInSimulation(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::SimmedMove *arg1 = (Quackle::SimmedMove *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__SimmedMove, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimmedMove_includeInSimulation" "', argument " "1"" of type '" "Quackle::SimmedMove const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::SimmedMove * >(argp1);
  result = (bool)((Quackle::SimmedMove const *)arg1)->includeInSimulation();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimmedMove_setIncludeInSimulation(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::SimmedMove *arg1 = (Quackle::SimmedMove *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SimmedMove_setIncludeInSimulation", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__SimmedMove, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimmedMove_setIncludeInSimulation" "', argument " "1"" of type '" "Quackle::SimmedMove *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::SimmedMove * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SimmedMove_setIncludeInSimulation" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->setIncludeInSimulation(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimmedMove_id(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::SimmedMove *arg1 = (Quackle::SimmedMove *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  long result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__SimmedMove, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimmedMove_id" "', argument " "1"" of type '" "Quackle::SimmedMove const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::SimmedMove * >(argp1);
  result = (long)((Quackle::SimmedMove const *)arg1)->id();
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimmedMove_move_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::SimmedMove *arg1 = (Quackle::SimmedMove *) 0 ;
  Quackle::Move *arg2 = (Quackle::Move *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SimmedMove_move_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__SimmedMove, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimmedMove_move_set" "', argument " "1"" of type '" "Quackle::SimmedMove *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::SimmedMove * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_Quackle__Move, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimmedMove_move_set" "', argument " "2"" of type '" "Quackle::Move *""'"); 
  }
  arg2 = reinterpret_cast< Quackle::Move * >(argp2);
  if (arg1) (arg1)->move = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimmedMove_move_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::SimmedMove *arg1 = (Quackle::SimmedMove *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Quackle::Move *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__SimmedMove, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimmedMove_move_get" "', argument " "1"" of type '" "Quackle::SimmedMove *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::SimmedMove * >(argp1);
  result = (Quackle::Move *)& ((arg1)->move);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__Move, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimmedMove_levels_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::SimmedMove *arg1 = (Quackle::SimmedMove *) 0 ;
  Quackle::LevelList *arg2 = (Quackle::LevelList *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SimmedMove_levels_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__SimmedMove, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimmedMove_levels_set" "', argument " "1"" of type '" "Quackle::SimmedMove *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::SimmedMove * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_Quackle__LevelList, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimmedMove_levels_set" "', argument " "2"" of type '" "Quackle::LevelList *""'"); 
  }
  arg2 = reinterpret_cast< Quackle::LevelList * >(argp2);
  if (arg1) (arg1)->levels = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimmedMove_levels_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::SimmedMove *arg1 = (Quackle::SimmedMove *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Quackle::LevelList *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__SimmedMove, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimmedMove_levels_get" "', argument " "1"" of type '" "Quackle::SimmedMove *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::SimmedMove * >(argp1);
  result = (Quackle::LevelList *)& ((arg1)->levels);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__LevelList, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimmedMove_residual_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::SimmedMove *arg1 = (Quackle::SimmedMove *) 0 ;
  Quackle::AveragedValue *arg2 = (Quackle::AveragedValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SimmedMove_residual_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__SimmedMove, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimmedMove_residual_set" "', argument " "1"" of type '" "Quackle::SimmedMove *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::SimmedMove * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_Quackle__AveragedValue, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimmedMove_residual_set" "', argument " "2"" of type '" "Quackle::AveragedValue *""'"); 
  }
  arg2 = reinterpret_cast< Quackle::AveragedValue * >(argp2);
  if (arg1) (arg1)->residual = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimmedMove_residual_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::SimmedMove *arg1 = (Quackle::SimmedMove *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Quackle::AveragedValue *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__SimmedMove, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimmedMove_residual_get" "', argument " "1"" of type '" "Quackle::SimmedMove *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::SimmedMove * >(argp1);
  result = (Quackle::AveragedValue *)& ((arg1)->residual);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__AveragedValue, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimmedMove_gameSpread_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::SimmedMove *arg1 = (Quackle::SimmedMove *) 0 ;
  Quackle::AveragedValue *arg2 = (Quackle::AveragedValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SimmedMove_gameSpread_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__SimmedMove, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimmedMove_gameSpread_set" "', argument " "1"" of type '" "Quackle::SimmedMove *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::SimmedMove * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_Quackle__AveragedValue, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimmedMove_gameSpread_set" "', argument " "2"" of type '" "Quackle::AveragedValue *""'"); 
  }
  arg2 = reinterpret_cast< Quackle::AveragedValue * >(argp2);
  if (arg1) (arg1)->gameSpread = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimmedMove_gameSpread_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::SimmedMove *arg1 = (Quackle::SimmedMove *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Quackle::AveragedValue *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__SimmedMove, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimmedMove_gameSpread_get" "', argument " "1"" of type '" "Quackle::SimmedMove *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::SimmedMove * >(argp1);
  result = (Quackle::AveragedValue *)& ((arg1)->gameSpread);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__AveragedValue, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimmedMove_wins_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::SimmedMove *arg1 = (Quackle::SimmedMove *) 0 ;
  Quackle::AveragedValue *arg2 = (Quackle::AveragedValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SimmedMove_wins_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__SimmedMove, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimmedMove_wins_set" "', argument " "1"" of type '" "Quackle::SimmedMove *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::SimmedMove * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_Quackle__AveragedValue, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimmedMove_wins_set" "', argument " "2"" of type '" "Quackle::AveragedValue *""'"); 
  }
  arg2 = reinterpret_cast< Quackle::AveragedValue * >(argp2);
  if (arg1) (arg1)->wins = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimmedMove_wins_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::SimmedMove *arg1 = (Quackle::SimmedMove *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Quackle::AveragedValue *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__SimmedMove, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimmedMove_wins_get" "', argument " "1"" of type '" "Quackle::SimmedMove *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::SimmedMove * >(argp1);
  result = (Quackle::AveragedValue *)& ((arg1)->wins);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__AveragedValue, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimmedMove_getPositionStatistics(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::SimmedMove *arg1 = (Quackle::SimmedMove *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  Quackle::PositionStatistics result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SimmedMove_getPositionStatistics", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__SimmedMove, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimmedMove_getPositionStatistics" "', argument " "1"" of type '" "Quackle::SimmedMove const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::SimmedMove * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SimmedMove_getPositionStatistics" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SimmedMove_getPositionStatistics" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = ((Quackle::SimmedMove const *)arg1)->getPositionStatistics(arg2,arg3);
  resultobj = SWIG_NewPointerObj((new Quackle::PositionStatistics(result)), SWIGTYPE_p_Quackle__PositionStatistics, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SimmedMove(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::SimmedMove *arg1 = (Quackle::SimmedMove *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__SimmedMove, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SimmedMove" "', argument " "1"" of type '" "Quackle::SimmedMove *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::SimmedMove * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SimmedMove_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Quackle__SimmedMove, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *SimmedMove_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_SimmedMoveMessage_id_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::SimmedMoveMessage *arg1 = (Quackle::SimmedMoveMessage *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SimmedMoveMessage_id_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__SimmedMoveMessage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimmedMoveMessage_id_set" "', argument " "1"" of type '" "Quackle::SimmedMoveMessage *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::SimmedMoveMessage * >(argp1);
  ecode2 = SWIG_AsVal_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SimmedMoveMessage_id_set" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  if (arg1) (arg1)->id = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimmedMoveMessage_id_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::SimmedMoveMessage *arg1 = (Quackle::SimmedMoveMessage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  long result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__SimmedMoveMessage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimmedMoveMessage_id_get" "', argument " "1"" of type '" "Quackle::SimmedMoveMessage *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::SimmedMoveMessage * >(argp1);
  result = (long) ((arg1)->id);
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimmedMoveMessage_move_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::SimmedMoveMessage *arg1 = (Quackle::SimmedMoveMessage *) 0 ;
  Quackle::Move *arg2 = (Quackle::Move *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SimmedMoveMessage_move_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__SimmedMoveMessage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimmedMoveMessage_move_set" "', argument " "1"" of type '" "Quackle::SimmedMoveMessage *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::SimmedMoveMessage * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_Quackle__Move, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimmedMoveMessage_move_set" "', argument " "2"" of type '" "Quackle::Move *""'"); 
  }
  arg2 = reinterpret_cast< Quackle::Move * >(argp2);
  if (arg1) (arg1)->move = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimmedMoveMessage_move_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::SimmedMoveMessage *arg1 = (Quackle::SimmedMoveMessage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Quackle::Move *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__SimmedMoveMessage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimmedMoveMessage_move_get" "', argument " "1"" of type '" "Quackle::SimmedMoveMessage *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::SimmedMoveMessage * >(argp1);
  result = (Quackle::Move *)& ((arg1)->move);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__Move, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimmedMoveMessage_levels_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::SimmedMoveMessage *arg1 = (Quackle::SimmedMoveMessage *) 0 ;
  Quackle::LevelList *arg2 = (Quackle::LevelList *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SimmedMoveMessage_levels_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__SimmedMoveMessage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimmedMoveMessage_levels_set" "', argument " "1"" of type '" "Quackle::SimmedMoveMessage *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::SimmedMoveMessage * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_Quackle__LevelList, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimmedMoveMessage_levels_set" "', argument " "2"" of type '" "Quackle::LevelList *""'"); 
  }
  arg2 = reinterpret_cast< Quackle::LevelList * >(argp2);
  if (arg1) (arg1)->levels = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimmedMoveMessage_levels_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::SimmedMoveMessage *arg1 = (Quackle::SimmedMoveMessage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Quackle::LevelList *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__SimmedMoveMessage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimmedMoveMessage_levels_get" "', argument " "1"" of type '" "Quackle::SimmedMoveMessage *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::SimmedMoveMessage * >(argp1);
  result = (Quackle::LevelList *)& ((arg1)->levels);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__LevelList, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimmedMoveMessage_score_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::SimmedMoveMessage *arg1 = (Quackle::SimmedMoveMessage *) 0 ;
  vector< double > *arg2 = (vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SimmedMoveMessage_score_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__SimmedMoveMessage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimmedMoveMessage_score_set" "', argument " "1"" of type '" "Quackle::SimmedMoveMessage *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::SimmedMoveMessage * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimmedMoveMessage_score_set" "', argument " "2"" of type '" "vector< double > *""'"); 
  }
  arg2 = reinterpret_cast< vector< double > * >(argp2);
  if (arg1) (arg1)->score = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimmedMoveMessage_score_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::SimmedMoveMessage *arg1 = (Quackle::SimmedMoveMessage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  vector< double > *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__SimmedMoveMessage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimmedMoveMessage_score_get" "', argument " "1"" of type '" "Quackle::SimmedMoveMessage *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::SimmedMoveMessage * >(argp1);
  result = (vector< double > *)& ((arg1)->score);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimmedMoveMessage_bingos_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::SimmedMoveMessage *arg1 = (Quackle::SimmedMoveMessage *) 0 ;
  vector< double > *arg2 = (vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SimmedMoveMessage_bingos_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__SimmedMoveMessage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimmedMoveMessage_bingos_set" "', argument " "1"" of type '" "Quackle::SimmedMoveMessage *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::SimmedMoveMessage * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimmedMoveMessage_bingos_set" "', argument " "2"" of type '" "vector< double > *""'"); 
  }
  arg2 = reinterpret_cast< vector< double > * >(argp2);
  if (arg1) (arg1)->bingos = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimmedMoveMessage_bingos_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::SimmedMoveMessage *arg1 = (Quackle::SimmedMoveMessage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  vector< double > *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__SimmedMoveMessage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimmedMoveMessage_bingos_get" "', argument " "1"" of type '" "Quackle::SimmedMoveMessage *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::SimmedMoveMessage * >(argp1);
  result = (vector< double > *)& ((arg1)->bingos);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimmedMoveMessage_residual_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::SimmedMoveMessage *arg1 = (Quackle::SimmedMoveMessage *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SimmedMoveMessage_residual_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__SimmedMoveMessage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimmedMoveMessage_residual_set" "', argument " "1"" of type '" "Quackle::SimmedMoveMessage *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::SimmedMoveMessage * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SimmedMoveMessage_residual_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->residual = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimmedMoveMessage_residual_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::SimmedMoveMessage *arg1 = (Quackle::SimmedMoveMessage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__SimmedMoveMessage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimmedMoveMessage_residual_get" "', argument " "1"" of type '" "Quackle::SimmedMoveMessage *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::SimmedMoveMessage * >(argp1);
  result = (double) ((arg1)->residual);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimmedMoveMessage_gameSpread_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::SimmedMoveMessage *arg1 = (Quackle::SimmedMoveMessage *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SimmedMoveMessage_gameSpread_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__SimmedMoveMessage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimmedMoveMessage_gameSpread_set" "', argument " "1"" of type '" "Quackle::SimmedMoveMessage *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::SimmedMoveMessage * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SimmedMoveMessage_gameSpread_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->gameSpread = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimmedMoveMessage_gameSpread_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::SimmedMoveMessage *arg1 = (Quackle::SimmedMoveMessage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__SimmedMoveMessage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimmedMoveMessage_gameSpread_get" "', argument " "1"" of type '" "Quackle::SimmedMoveMessage *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::SimmedMoveMessage * >(argp1);
  result = (double) ((arg1)->gameSpread);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimmedMoveMessage_wins_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::SimmedMoveMessage *arg1 = (Quackle::SimmedMoveMessage *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SimmedMoveMessage_wins_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__SimmedMoveMessage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimmedMoveMessage_wins_set" "', argument " "1"" of type '" "Quackle::SimmedMoveMessage *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::SimmedMoveMessage * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SimmedMoveMessage_wins_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->wins = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimmedMoveMessage_wins_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::SimmedMoveMessage *arg1 = (Quackle::SimmedMoveMessage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__SimmedMoveMessage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimmedMoveMessage_wins_get" "', argument " "1"" of type '" "Quackle::SimmedMoveMessage *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::SimmedMoveMessage * >(argp1);
  result = (double) ((arg1)->wins);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimmedMoveMessage_bogowin_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::SimmedMoveMessage *arg1 = (Quackle::SimmedMoveMessage *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SimmedMoveMessage_bogowin_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__SimmedMoveMessage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimmedMoveMessage_bogowin_set" "', argument " "1"" of type '" "Quackle::SimmedMoveMessage *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::SimmedMoveMessage * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SimmedMoveMessage_bogowin_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->bogowin = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimmedMoveMessage_bogowin_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::SimmedMoveMessage *arg1 = (Quackle::SimmedMoveMessage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__SimmedMoveMessage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimmedMoveMessage_bogowin_get" "', argument " "1"" of type '" "Quackle::SimmedMoveMessage *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::SimmedMoveMessage * >(argp1);
  result = (bool) ((arg1)->bogowin);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimmedMoveMessage_xmlIndent_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::SimmedMoveMessage *arg1 = (Quackle::SimmedMoveMessage *) 0 ;
  UVString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SimmedMoveMessage_xmlIndent_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__SimmedMoveMessage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimmedMoveMessage_xmlIndent_set" "', argument " "1"" of type '" "Quackle::SimmedMoveMessage *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::SimmedMoveMessage * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimmedMoveMessage_xmlIndent_set" "', argument " "2"" of type '" "UVString const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimmedMoveMessage_xmlIndent_set" "', argument " "2"" of type '" "UVString const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->xmlIndent = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimmedMoveMessage_xmlIndent_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::SimmedMoveMessage *arg1 = (Quackle::SimmedMoveMessage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  UVString *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__SimmedMoveMessage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimmedMoveMessage_xmlIndent_get" "', argument " "1"" of type '" "Quackle::SimmedMoveMessage *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::SimmedMoveMessage * >(argp1);
  result = (UVString *) & ((arg1)->xmlIndent);
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SimmedMoveMessage(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::SimmedMoveMessage *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "new_SimmedMoveMessage", 0, 0, 0)) SWIG_fail;
  result = (Quackle::SimmedMoveMessage *)new Quackle::SimmedMoveMessage();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__SimmedMoveMessage, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SimmedMoveMessage(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::SimmedMoveMessage *arg1 = (Quackle::SimmedMoveMessage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__SimmedMoveMessage, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SimmedMoveMessage" "', argument " "1"" of type '" "Quackle::SimmedMoveMessage *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::SimmedMoveMessage * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SimmedMoveMessage_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Quackle__SimmedMoveMessage, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *SimmedMoveMessage_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_SimmedMoveConstants_game_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::SimmedMoveConstants *arg1 = (Quackle::SimmedMoveConstants *) 0 ;
  Quackle::Game *arg2 = (Quackle::Game *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SimmedMoveConstants_game_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__SimmedMoveConstants, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimmedMoveConstants_game_set" "', argument " "1"" of type '" "Quackle::SimmedMoveConstants *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::SimmedMoveConstants * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_Quackle__Game, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimmedMoveConstants_game_set" "', argument " "2"" of type '" "Quackle::Game *""'"); 
  }
  arg2 = reinterpret_cast< Quackle::Game * >(argp2);
  if (arg1) (arg1)->game = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimmedMoveConstants_game_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::SimmedMoveConstants *arg1 = (Quackle::SimmedMoveConstants *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Quackle::Game *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__SimmedMoveConstants, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimmedMoveConstants_game_get" "', argument " "1"" of type '" "Quackle::SimmedMoveConstants *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::SimmedMoveConstants * >(argp1);
  result = (Quackle::Game *)& ((arg1)->game);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__Game, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimmedMoveConstants_startPlayerId_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::SimmedMoveConstants *arg1 = (Quackle::SimmedMoveConstants *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SimmedMoveConstants_startPlayerId_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__SimmedMoveConstants, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimmedMoveConstants_startPlayerId_set" "', argument " "1"" of type '" "Quackle::SimmedMoveConstants *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::SimmedMoveConstants * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SimmedMoveConstants_startPlayerId_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->startPlayerId = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimmedMoveConstants_startPlayerId_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::SimmedMoveConstants *arg1 = (Quackle::SimmedMoveConstants *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__SimmedMoveConstants, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimmedMoveConstants_startPlayerId_get" "', argument " "1"" of type '" "Quackle::SimmedMoveConstants *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::SimmedMoveConstants * >(argp1);
  result = (int) ((arg1)->startPlayerId);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimmedMoveConstants_playerCount_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::SimmedMoveConstants *arg1 = (Quackle::SimmedMoveConstants *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SimmedMoveConstants_playerCount_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__SimmedMoveConstants, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimmedMoveConstants_playerCount_set" "', argument " "1"" of type '" "Quackle::SimmedMoveConstants *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::SimmedMoveConstants * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SimmedMoveConstants_playerCount_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->playerCount = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimmedMoveConstants_playerCount_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::SimmedMoveConstants *arg1 = (Quackle::SimmedMoveConstants *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__SimmedMoveConstants, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimmedMoveConstants_playerCount_get" "', argument " "1"" of type '" "Quackle::SimmedMoveConstants *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::SimmedMoveConstants * >(argp1);
  result = (int) ((arg1)->playerCount);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimmedMoveConstants_decimalTurns_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::SimmedMoveConstants *arg1 = (Quackle::SimmedMoveConstants *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SimmedMoveConstants_decimalTurns_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__SimmedMoveConstants, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimmedMoveConstants_decimalTurns_set" "', argument " "1"" of type '" "Quackle::SimmedMoveConstants *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::SimmedMoveConstants * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SimmedMoveConstants_decimalTurns_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->decimalTurns = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimmedMoveConstants_decimalTurns_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::SimmedMoveConstants *arg1 = (Quackle::SimmedMoveConstants *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__SimmedMoveConstants, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimmedMoveConstants_decimalTurns_get" "', argument " "1"" of type '" "Quackle::SimmedMoveConstants *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::SimmedMoveConstants * >(argp1);
  result = (int) ((arg1)->decimalTurns);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimmedMoveConstants_levelCount_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::SimmedMoveConstants *arg1 = (Quackle::SimmedMoveConstants *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SimmedMoveConstants_levelCount_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__SimmedMoveConstants, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimmedMoveConstants_levelCount_set" "', argument " "1"" of type '" "Quackle::SimmedMoveConstants *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::SimmedMoveConstants * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SimmedMoveConstants_levelCount_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->levelCount = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimmedMoveConstants_levelCount_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::SimmedMoveConstants *arg1 = (Quackle::SimmedMoveConstants *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__SimmedMoveConstants, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimmedMoveConstants_levelCount_get" "', argument " "1"" of type '" "Quackle::SimmedMoveConstants *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::SimmedMoveConstants * >(argp1);
  result = (int) ((arg1)->levelCount);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimmedMoveConstants_ignoreOppos_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::SimmedMoveConstants *arg1 = (Quackle::SimmedMoveConstants *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SimmedMoveConstants_ignoreOppos_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__SimmedMoveConstants, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimmedMoveConstants_ignoreOppos_set" "', argument " "1"" of type '" "Quackle::SimmedMoveConstants *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::SimmedMoveConstants * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SimmedMoveConstants_ignoreOppos_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->ignoreOppos = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimmedMoveConstants_ignoreOppos_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::SimmedMoveConstants *arg1 = (Quackle::SimmedMoveConstants *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__SimmedMoveConstants, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimmedMoveConstants_ignoreOppos_get" "', argument " "1"" of type '" "Quackle::SimmedMoveConstants *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::SimmedMoveConstants * >(argp1);
  result = (bool) ((arg1)->ignoreOppos);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimmedMoveConstants_isLogging_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::SimmedMoveConstants *arg1 = (Quackle::SimmedMoveConstants *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SimmedMoveConstants_isLogging_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__SimmedMoveConstants, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimmedMoveConstants_isLogging_set" "', argument " "1"" of type '" "Quackle::SimmedMoveConstants *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::SimmedMoveConstants * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SimmedMoveConstants_isLogging_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->isLogging = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimmedMoveConstants_isLogging_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::SimmedMoveConstants *arg1 = (Quackle::SimmedMoveConstants *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__SimmedMoveConstants, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimmedMoveConstants_isLogging_get" "', argument " "1"" of type '" "Quackle::SimmedMoveConstants *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::SimmedMoveConstants * >(argp1);
  result = (bool) ((arg1)->isLogging);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SimmedMoveConstants(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::SimmedMoveConstants *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "new_SimmedMoveConstants", 0, 0, 0)) SWIG_fail;
  result = (Quackle::SimmedMoveConstants *)new Quackle::SimmedMoveConstants();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__SimmedMoveConstants, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SimmedMoveConstants(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::SimmedMoveConstants *arg1 = (Quackle::SimmedMoveConstants *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__SimmedMoveConstants, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SimmedMoveConstants" "', argument " "1"" of type '" "Quackle::SimmedMoveConstants *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::SimmedMoveConstants * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SimmedMoveConstants_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Quackle__SimmedMoveConstants, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *SimmedMoveConstants_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_SimmedMoveMessageQueue(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::SimmedMoveMessageQueue *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "new_SimmedMoveMessageQueue", 0, 0, 0)) SWIG_fail;
  result = (Quackle::SimmedMoveMessageQueue *)new Quackle::SimmedMoveMessageQueue();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__SimmedMoveMessageQueue, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimmedMoveMessageQueue_push(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::SimmedMoveMessageQueue *arg1 = (Quackle::SimmedMoveMessageQueue *) 0 ;
  Quackle::SimmedMoveMessage *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SimmedMoveMessageQueue_push", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__SimmedMoveMessageQueue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimmedMoveMessageQueue_push" "', argument " "1"" of type '" "Quackle::SimmedMoveMessageQueue *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::SimmedMoveMessageQueue * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__SimmedMoveMessage,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimmedMoveMessageQueue_push" "', argument " "2"" of type '" "Quackle::SimmedMoveMessage &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimmedMoveMessageQueue_push" "', argument " "2"" of type '" "Quackle::SimmedMoveMessage &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::SimmedMoveMessage * >(argp2);
  (arg1)->push(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimmedMoveMessageQueue_send_terminate_all(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::SimmedMoveMessageQueue *arg1 = (Quackle::SimmedMoveMessageQueue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__SimmedMoveMessageQueue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimmedMoveMessageQueue_send_terminate_all" "', argument " "1"" of type '" "Quackle::SimmedMoveMessageQueue *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::SimmedMoveMessageQueue * >(argp1);
  (arg1)->send_terminate_all();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimmedMoveMessageQueue_send_terminate_one(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::SimmedMoveMessageQueue *arg1 = (Quackle::SimmedMoveMessageQueue *) 0 ;
  std::thread::id *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SimmedMoveMessageQueue_send_terminate_one", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__SimmedMoveMessageQueue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimmedMoveMessageQueue_send_terminate_one" "', argument " "1"" of type '" "Quackle::SimmedMoveMessageQueue *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::SimmedMoveMessageQueue * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__thread__id,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimmedMoveMessageQueue_send_terminate_one" "', argument " "2"" of type '" "std::thread::id const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimmedMoveMessageQueue_send_terminate_one" "', argument " "2"" of type '" "std::thread::id const &""'"); 
  }
  arg2 = reinterpret_cast< std::thread::id * >(argp2);
  (arg1)->send_terminate_one((std::thread::id const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimmedMoveMessageQueue_constants(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::SimmedMoveMessageQueue *arg1 = (Quackle::SimmedMoveMessageQueue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Quackle::SimmedMoveConstants *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__SimmedMoveMessageQueue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimmedMoveMessageQueue_constants" "', argument " "1"" of type '" "Quackle::SimmedMoveMessageQueue *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::SimmedMoveMessageQueue * >(argp1);
  result = (Quackle::SimmedMoveConstants *) &(arg1)->constants();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__SimmedMoveConstants, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimmedMoveMessageQueue_setConstants(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::SimmedMoveMessageQueue *arg1 = (Quackle::SimmedMoveMessageQueue *) 0 ;
  Quackle::SimmedMoveConstants *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SimmedMoveMessageQueue_setConstants", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__SimmedMoveMessageQueue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimmedMoveMessageQueue_setConstants" "', argument " "1"" of type '" "Quackle::SimmedMoveMessageQueue *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::SimmedMoveMessageQueue * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__SimmedMoveConstants,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimmedMoveMessageQueue_setConstants" "', argument " "2"" of type '" "Quackle::SimmedMoveConstants const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimmedMoveMessageQueue_setConstants" "', argument " "2"" of type '" "Quackle::SimmedMoveConstants const &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::SimmedMoveConstants * >(argp2);
  (arg1)->setConstants((Quackle::SimmedMoveConstants const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SimmedMoveMessageQueue(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::SimmedMoveMessageQueue *arg1 = (Quackle::SimmedMoveMessageQueue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__SimmedMoveMessageQueue, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SimmedMoveMessageQueue" "', argument " "1"" of type '" "Quackle::SimmedMoveMessageQueue *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::SimmedMoveMessageQueue * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SimmedMoveMessageQueue_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Quackle__SimmedMoveMessageQueue, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *SimmedMoveMessageQueue_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_Simulator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Simulator *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "new_Simulator", 0, 0, 0)) SWIG_fail;
  result = (Quackle::Simulator *)new Quackle::Simulator();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__Simulator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Simulator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Simulator *arg1 = (Quackle::Simulator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Simulator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Simulator" "', argument " "1"" of type '" "Quackle::Simulator *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Simulator * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Simulator_setPosition(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Simulator *arg1 = (Quackle::Simulator *) 0 ;
  Quackle::GamePosition *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Simulator_setPosition", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Simulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Simulator_setPosition" "', argument " "1"" of type '" "Quackle::Simulator *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Simulator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__GamePosition,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Simulator_setPosition" "', argument " "2"" of type '" "Quackle::GamePosition const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Simulator_setPosition" "', argument " "2"" of type '" "Quackle::GamePosition const &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::GamePosition * >(argp2);
  (arg1)->setPosition((Quackle::GamePosition const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Simulator_currentPosition__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Quackle::Simulator *arg1 = (Quackle::Simulator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Quackle::GamePosition *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Simulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Simulator_currentPosition" "', argument " "1"" of type '" "Quackle::Simulator *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Simulator * >(argp1);
  result = (Quackle::GamePosition *) &(arg1)->currentPosition();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__GamePosition, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Simulator_currentPosition__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Quackle::Simulator *arg1 = (Quackle::Simulator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Quackle::GamePosition *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Simulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Simulator_currentPosition" "', argument " "1"" of type '" "Quackle::Simulator const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Simulator * >(argp1);
  result = (Quackle::GamePosition *) &((Quackle::Simulator const *)arg1)->currentPosition();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__GamePosition, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Simulator_currentPosition(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Simulator_currentPosition", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Quackle__Simulator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Simulator_currentPosition__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Quackle__Simulator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Simulator_currentPosition__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Simulator_currentPosition'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Quackle::Simulator::currentPosition()\n"
    "    Quackle::Simulator::currentPosition() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Simulator_history(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Simulator *arg1 = (Quackle::Simulator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Quackle::History *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Simulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Simulator_history" "', argument " "1"" of type '" "Quackle::Simulator const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Simulator * >(argp1);
  result = (Quackle::History *) &((Quackle::Simulator const *)arg1)->history();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__History, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Simulator_setLogfile__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Quackle::Simulator *arg1 = (Quackle::Simulator *) 0 ;
  string *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  bool val3 ;
  int ecode3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Simulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Simulator_setLogfile" "', argument " "1"" of type '" "Quackle::Simulator *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Simulator * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Simulator_setLogfile" "', argument " "2"" of type '" "string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Simulator_setLogfile" "', argument " "2"" of type '" "string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Simulator_setLogfile" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  (arg1)->setLogfile((string const &)*arg2,arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Simulator_setLogfile__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Quackle::Simulator *arg1 = (Quackle::Simulator *) 0 ;
  string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Simulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Simulator_setLogfile" "', argument " "1"" of type '" "Quackle::Simulator *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Simulator * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Simulator_setLogfile" "', argument " "2"" of type '" "string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Simulator_setLogfile" "', argument " "2"" of type '" "string const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->setLogfile((string const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Simulator_setLogfile(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Simulator_setLogfile", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Quackle__Simulator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Simulator_setLogfile__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Quackle__Simulator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Simulator_setLogfile__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Simulator_setLogfile'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Quackle::Simulator::setLogfile(string const &,bool)\n"
    "    Quackle::Simulator::setLogfile(string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Simulator_logfile(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Simulator *arg1 = (Quackle::Simulator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  string result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Simulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Simulator_logfile" "', argument " "1"" of type '" "Quackle::Simulator const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Simulator * >(argp1);
  result = ((Quackle::Simulator const *)arg1)->logfile();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Simulator_setDispatch(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Simulator *arg1 = (Quackle::Simulator *) 0 ;
  Quackle::ComputerDispatch *arg2 = (Quackle::ComputerDispatch *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Simulator_setDispatch", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Simulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Simulator_setDispatch" "', argument " "1"" of type '" "Quackle::Simulator *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Simulator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_Quackle__ComputerDispatch, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Simulator_setDispatch" "', argument " "2"" of type '" "Quackle::ComputerDispatch *""'"); 
  }
  arg2 = reinterpret_cast< Quackle::ComputerDispatch * >(argp2);
  (arg1)->setDispatch(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Simulator_dispatch(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Simulator *arg1 = (Quackle::Simulator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Quackle::ComputerDispatch *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Simulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Simulator_dispatch" "', argument " "1"" of type '" "Quackle::Simulator const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Simulator * >(argp1);
  result = (Quackle::ComputerDispatch *)((Quackle::Simulator const *)arg1)->dispatch();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__ComputerDispatch, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Simulator_logMessage(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Simulator *arg1 = (Quackle::Simulator *) 0 ;
  UVString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Simulator_logMessage", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Simulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Simulator_logMessage" "', argument " "1"" of type '" "Quackle::Simulator *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Simulator * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Simulator_logMessage" "', argument " "2"" of type '" "UVString const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Simulator_logMessage" "', argument " "2"" of type '" "UVString const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->logMessage((UVString const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Simulator_isLogging(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Simulator *arg1 = (Quackle::Simulator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Simulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Simulator_isLogging" "', argument " "1"" of type '" "Quackle::Simulator const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Simulator * >(argp1);
  result = (bool)((Quackle::Simulator const *)arg1)->isLogging();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Simulator_closeLogfile(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Simulator *arg1 = (Quackle::Simulator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Simulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Simulator_closeLogfile" "', argument " "1"" of type '" "Quackle::Simulator *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Simulator * >(argp1);
  (arg1)->closeLogfile();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Simulator_setIncludedMoves(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Simulator *arg1 = (Quackle::Simulator *) 0 ;
  Quackle::MoveList *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Simulator_setIncludedMoves", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Simulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Simulator_setIncludedMoves" "', argument " "1"" of type '" "Quackle::Simulator *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Simulator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__MoveList,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Simulator_setIncludedMoves" "', argument " "2"" of type '" "Quackle::MoveList const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Simulator_setIncludedMoves" "', argument " "2"" of type '" "Quackle::MoveList const &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::MoveList * >(argp2);
  (arg1)->setIncludedMoves((Quackle::MoveList const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Simulator_makeSureConsideredMovesAreIncluded(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Simulator *arg1 = (Quackle::Simulator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Simulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Simulator_makeSureConsideredMovesAreIncluded" "', argument " "1"" of type '" "Quackle::Simulator *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Simulator * >(argp1);
  (arg1)->makeSureConsideredMovesAreIncluded();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Simulator_moveConsideredMovesToBeginning(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Simulator *arg1 = (Quackle::Simulator *) 0 ;
  Quackle::MoveList *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Simulator_moveConsideredMovesToBeginning", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Simulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Simulator_moveConsideredMovesToBeginning" "', argument " "1"" of type '" "Quackle::Simulator const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Simulator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__MoveList,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Simulator_moveConsideredMovesToBeginning" "', argument " "2"" of type '" "Quackle::MoveList &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Simulator_moveConsideredMovesToBeginning" "', argument " "2"" of type '" "Quackle::MoveList &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::MoveList * >(argp2);
  ((Quackle::Simulator const *)arg1)->moveConsideredMovesToBeginning(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Simulator_setConsideredMoves(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Simulator *arg1 = (Quackle::Simulator *) 0 ;
  Quackle::MoveList *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Simulator_setConsideredMoves", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Simulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Simulator_setConsideredMoves" "', argument " "1"" of type '" "Quackle::Simulator *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Simulator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__MoveList,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Simulator_setConsideredMoves" "', argument " "2"" of type '" "Quackle::MoveList const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Simulator_setConsideredMoves" "', argument " "2"" of type '" "Quackle::MoveList const &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::MoveList * >(argp2);
  (arg1)->setConsideredMoves((Quackle::MoveList const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Simulator_consideredMoves(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Simulator *arg1 = (Quackle::Simulator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Quackle::MoveList *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Simulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Simulator_consideredMoves" "', argument " "1"" of type '" "Quackle::Simulator const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Simulator * >(argp1);
  result = (Quackle::MoveList *) &((Quackle::Simulator const *)arg1)->consideredMoves();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__MoveList, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Simulator_addConsideredMove(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Simulator *arg1 = (Quackle::Simulator *) 0 ;
  Quackle::Move *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Simulator_addConsideredMove", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Simulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Simulator_addConsideredMove" "', argument " "1"" of type '" "Quackle::Simulator *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Simulator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__Move,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Simulator_addConsideredMove" "', argument " "2"" of type '" "Quackle::Move const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Simulator_addConsideredMove" "', argument " "2"" of type '" "Quackle::Move const &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::Move * >(argp2);
  (arg1)->addConsideredMove((Quackle::Move const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Simulator_isConsideredMove(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Simulator *arg1 = (Quackle::Simulator *) 0 ;
  Quackle::Move *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Simulator_isConsideredMove", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Simulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Simulator_isConsideredMove" "', argument " "1"" of type '" "Quackle::Simulator const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Simulator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__Move,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Simulator_isConsideredMove" "', argument " "2"" of type '" "Quackle::Move const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Simulator_isConsideredMove" "', argument " "2"" of type '" "Quackle::Move const &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::Move * >(argp2);
  result = (bool)((Quackle::Simulator const *)arg1)->isConsideredMove((Quackle::Move const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Simulator_pruneTo(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Simulator *arg1 = (Quackle::Simulator *) 0 ;
  double arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Simulator_pruneTo", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Simulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Simulator_pruneTo" "', argument " "1"" of type '" "Quackle::Simulator *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Simulator * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Simulator_pruneTo" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Simulator_pruneTo" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  (arg1)->pruneTo(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Simulator_setIgnoreOppos(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Simulator *arg1 = (Quackle::Simulator *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Simulator_setIgnoreOppos", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Simulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Simulator_setIgnoreOppos" "', argument " "1"" of type '" "Quackle::Simulator *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Simulator * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Simulator_setIgnoreOppos" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->setIgnoreOppos(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Simulator_ignoreOppos(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Simulator *arg1 = (Quackle::Simulator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Simulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Simulator_ignoreOppos" "', argument " "1"" of type '" "Quackle::Simulator const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Simulator * >(argp1);
  result = (bool)((Quackle::Simulator const *)arg1)->ignoreOppos();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Simulator_simThreadFunc(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::SimmedMoveMessageQueue *arg1 = 0 ;
  Quackle::SimmedMoveMessageQueue *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Simulator_simThreadFunc", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_Quackle__SimmedMoveMessageQueue,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Simulator_simThreadFunc" "', argument " "1"" of type '" "Quackle::SimmedMoveMessageQueue &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Simulator_simThreadFunc" "', argument " "1"" of type '" "Quackle::SimmedMoveMessageQueue &""'"); 
  }
  arg1 = reinterpret_cast< Quackle::SimmedMoveMessageQueue * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__SimmedMoveMessageQueue,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Simulator_simThreadFunc" "', argument " "2"" of type '" "Quackle::SimmedMoveMessageQueue &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Simulator_simThreadFunc" "', argument " "2"" of type '" "Quackle::SimmedMoveMessageQueue &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::SimmedMoveMessageQueue * >(argp2);
  Quackle::Simulator::simThreadFunc(*arg1,*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Simulator_setThreadCount(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Simulator *arg1 = (Quackle::Simulator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Simulator_setThreadCount", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Simulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Simulator_setThreadCount" "', argument " "1"" of type '" "Quackle::Simulator *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Simulator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Simulator_setThreadCount" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  (arg1)->setThreadCount(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Simulator_resetNumbers(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Simulator *arg1 = (Quackle::Simulator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Simulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Simulator_resetNumbers" "', argument " "1"" of type '" "Quackle::Simulator *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Simulator * >(argp1);
  (arg1)->resetNumbers();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Simulator_simulate__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Quackle::Simulator *arg1 = (Quackle::Simulator *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Simulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Simulator_simulate" "', argument " "1"" of type '" "Quackle::Simulator *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Simulator * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Simulator_simulate" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Simulator_simulate" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  (arg1)->simulate(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Simulator_simulate__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Quackle::Simulator *arg1 = (Quackle::Simulator *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Simulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Simulator_simulate" "', argument " "1"" of type '" "Quackle::Simulator *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Simulator * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Simulator_simulate" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->simulate(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Simulator_simulate(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Simulator_simulate", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Quackle__Simulator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Simulator_simulate__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Quackle__Simulator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Simulator_simulate__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Simulator_simulate'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Quackle::Simulator::simulate(int,int)\n"
    "    Quackle::Simulator::simulate(int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Simulator_simulateOnePosition(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::SimmedMoveMessage *arg1 = 0 ;
  Quackle::SimmedMoveConstants *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Simulator_simulateOnePosition", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_Quackle__SimmedMoveMessage,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Simulator_simulateOnePosition" "', argument " "1"" of type '" "Quackle::SimmedMoveMessage &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Simulator_simulateOnePosition" "', argument " "1"" of type '" "Quackle::SimmedMoveMessage &""'"); 
  }
  arg1 = reinterpret_cast< Quackle::SimmedMoveMessage * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__SimmedMoveConstants,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Simulator_simulateOnePosition" "', argument " "2"" of type '" "Quackle::SimmedMoveConstants const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Simulator_simulateOnePosition" "', argument " "2"" of type '" "Quackle::SimmedMoveConstants const &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::SimmedMoveConstants * >(argp2);
  Quackle::Simulator::simulateOnePosition(*arg1,(Quackle::SimmedMoveConstants const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Simulator_incorporateMessage(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Simulator *arg1 = (Quackle::Simulator *) 0 ;
  Quackle::SimmedMoveMessage *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Simulator_incorporateMessage", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Simulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Simulator_incorporateMessage" "', argument " "1"" of type '" "Quackle::Simulator *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Simulator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__SimmedMoveMessage,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Simulator_incorporateMessage" "', argument " "2"" of type '" "Quackle::SimmedMoveMessage const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Simulator_incorporateMessage" "', argument " "2"" of type '" "Quackle::SimmedMoveMessage const &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::SimmedMoveMessage * >(argp2);
  (arg1)->incorporateMessage((Quackle::SimmedMoveMessage const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Simulator_setPartialOppoRack(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Simulator *arg1 = (Quackle::Simulator *) 0 ;
  Quackle::Rack *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Simulator_setPartialOppoRack", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Simulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Simulator_setPartialOppoRack" "', argument " "1"" of type '" "Quackle::Simulator *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Simulator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__Rack,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Simulator_setPartialOppoRack" "', argument " "2"" of type '" "Quackle::Rack const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Simulator_setPartialOppoRack" "', argument " "2"" of type '" "Quackle::Rack const &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::Rack * >(argp2);
  (arg1)->setPartialOppoRack((Quackle::Rack const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Simulator_partialOppoRack(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Simulator *arg1 = (Quackle::Simulator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Quackle::Rack *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Simulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Simulator_partialOppoRack" "', argument " "1"" of type '" "Quackle::Simulator const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Simulator * >(argp1);
  result = (Quackle::Rack *) &((Quackle::Simulator const *)arg1)->partialOppoRack();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__Rack, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Simulator_randomizeOppoRacks(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Simulator *arg1 = (Quackle::Simulator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Simulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Simulator_randomizeOppoRacks" "', argument " "1"" of type '" "Quackle::Simulator *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Simulator * >(argp1);
  (arg1)->randomizeOppoRacks();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Simulator_randomizeDrawingOrder(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Simulator *arg1 = (Quackle::Simulator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Simulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Simulator_randomizeDrawingOrder" "', argument " "1"" of type '" "Quackle::Simulator *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Simulator * >(argp1);
  (arg1)->randomizeDrawingOrder();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Simulator_iterations(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Simulator *arg1 = (Quackle::Simulator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Simulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Simulator_iterations" "', argument " "1"" of type '" "Quackle::Simulator const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Simulator * >(argp1);
  result = (int)((Quackle::Simulator const *)arg1)->iterations();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Simulator_hasSimulationResults(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Simulator *arg1 = (Quackle::Simulator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Simulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Simulator_hasSimulationResults" "', argument " "1"" of type '" "Quackle::Simulator const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Simulator * >(argp1);
  result = (bool)((Quackle::Simulator const *)arg1)->hasSimulationResults();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Simulator_simmedMoves(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Simulator *arg1 = (Quackle::Simulator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Quackle::SimmedMoveList *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Simulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Simulator_simmedMoves" "', argument " "1"" of type '" "Quackle::Simulator const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Simulator * >(argp1);
  result = (Quackle::SimmedMoveList *) &((Quackle::Simulator const *)arg1)->simmedMoves();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Quackle__SimmedMove_std__allocatorT_Quackle__SimmedMove_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Simulator_moves__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Quackle::Simulator *arg1 = (Quackle::Simulator *) 0 ;
  bool arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  Quackle::MoveList result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Simulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Simulator_moves" "', argument " "1"" of type '" "Quackle::Simulator const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Simulator * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Simulator_moves" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Simulator_moves" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = ((Quackle::Simulator const *)arg1)->moves(arg2,arg3);
  resultobj = SWIG_NewPointerObj((new Quackle::MoveList(result)), SWIGTYPE_p_Quackle__MoveList, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Simulator_moves__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Quackle::Simulator *arg1 = (Quackle::Simulator *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  Quackle::MoveList result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Simulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Simulator_moves" "', argument " "1"" of type '" "Quackle::Simulator const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Simulator * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Simulator_moves" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = ((Quackle::Simulator const *)arg1)->moves(arg2);
  resultobj = SWIG_NewPointerObj((new Quackle::MoveList(result)), SWIGTYPE_p_Quackle__MoveList, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Simulator_moves__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Quackle::Simulator *arg1 = (Quackle::Simulator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Quackle::MoveList result;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Simulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Simulator_moves" "', argument " "1"" of type '" "Quackle::Simulator const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Simulator * >(argp1);
  result = ((Quackle::Simulator const *)arg1)->moves();
  resultobj = SWIG_NewPointerObj((new Quackle::MoveList(result)), SWIGTYPE_p_Quackle__MoveList, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Simulator_moves(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Simulator_moves", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Quackle__Simulator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Simulator_moves__SWIG_2(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Quackle__Simulator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Simulator_moves__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Quackle__Simulator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Simulator_moves__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Simulator_moves'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Quackle::Simulator::moves(bool,bool) const\n"
    "    Quackle::Simulator::moves(bool) const\n"
    "    Quackle::Simulator::moves() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Simulator_simmedMoveForMove(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Simulator *arg1 = (Quackle::Simulator *) 0 ;
  Quackle::Move *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  Quackle::SimmedMove *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Simulator_simmedMoveForMove", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Simulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Simulator_simmedMoveForMove" "', argument " "1"" of type '" "Quackle::Simulator const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Simulator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__Move,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Simulator_simmedMoveForMove" "', argument " "2"" of type '" "Quackle::Move const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Simulator_simmedMoveForMove" "', argument " "2"" of type '" "Quackle::Move const &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::Move * >(argp2);
  result = (Quackle::SimmedMove *) &((Quackle::Simulator const *)arg1)->simmedMoveForMove((Quackle::Move const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__SimmedMove, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Simulator_numLevels(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Simulator *arg1 = (Quackle::Simulator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Simulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Simulator_numLevels" "', argument " "1"" of type '" "Quackle::Simulator const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Simulator * >(argp1);
  result = (int)((Quackle::Simulator const *)arg1)->numLevels();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Simulator_numPlayersAtLevel(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Simulator *arg1 = (Quackle::Simulator *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Simulator_numPlayersAtLevel", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Simulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Simulator_numPlayersAtLevel" "', argument " "1"" of type '" "Quackle::Simulator const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Simulator * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Simulator_numPlayersAtLevel" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (int)((Quackle::Simulator const *)arg1)->numPlayersAtLevel(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Simulator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Quackle__Simulator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Simulator_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_ComputerParameters_secondsPerTurn_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::ComputerParameters *arg1 = (Quackle::ComputerParameters *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ComputerParameters_secondsPerTurn_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__ComputerParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComputerParameters_secondsPerTurn_set" "', argument " "1"" of type '" "Quackle::ComputerParameters *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::ComputerParameters * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ComputerParameters_secondsPerTurn_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->secondsPerTurn = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComputerParameters_secondsPerTurn_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::ComputerParameters *arg1 = (Quackle::ComputerParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__ComputerParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComputerParameters_secondsPerTurn_get" "', argument " "1"" of type '" "Quackle::ComputerParameters *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::ComputerParameters * >(argp1);
  result = (int) ((arg1)->secondsPerTurn);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComputerParameters_inferring_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::ComputerParameters *arg1 = (Quackle::ComputerParameters *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ComputerParameters_inferring_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__ComputerParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComputerParameters_inferring_set" "', argument " "1"" of type '" "Quackle::ComputerParameters *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::ComputerParameters * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ComputerParameters_inferring_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->inferring = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComputerParameters_inferring_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::ComputerParameters *arg1 = (Quackle::ComputerParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__ComputerParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComputerParameters_inferring_get" "', argument " "1"" of type '" "Quackle::ComputerParameters *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::ComputerParameters * >(argp1);
  result = (bool) ((arg1)->inferring);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ComputerParameters(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::ComputerParameters *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "new_ComputerParameters", 0, 0, 0)) SWIG_fail;
  result = (Quackle::ComputerParameters *)new Quackle::ComputerParameters();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__ComputerParameters, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ComputerParameters(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::ComputerParameters *arg1 = (Quackle::ComputerParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__ComputerParameters, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ComputerParameters" "', argument " "1"" of type '" "Quackle::ComputerParameters *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::ComputerParameters * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ComputerParameters_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Quackle__ComputerParameters, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *ComputerParameters_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_delete_ComputerDispatch(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::ComputerDispatch *arg1 = (Quackle::ComputerDispatch *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__ComputerDispatch, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ComputerDispatch" "', argument " "1"" of type '" "Quackle::ComputerDispatch *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::ComputerDispatch * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComputerDispatch_shouldAbort(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::ComputerDispatch *arg1 = (Quackle::ComputerDispatch *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__ComputerDispatch, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComputerDispatch_shouldAbort" "', argument " "1"" of type '" "Quackle::ComputerDispatch *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::ComputerDispatch * >(argp1);
  result = (bool)(arg1)->shouldAbort();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComputerDispatch_signalFractionDone(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::ComputerDispatch *arg1 = (Quackle::ComputerDispatch *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ComputerDispatch_signalFractionDone", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__ComputerDispatch, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComputerDispatch_signalFractionDone" "', argument " "1"" of type '" "Quackle::ComputerDispatch *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::ComputerDispatch * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ComputerDispatch_signalFractionDone" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  (arg1)->signalFractionDone(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ComputerDispatch_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Quackle__ComputerDispatch, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ScalingDispatch(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::ComputerDispatch *arg1 = (Quackle::ComputerDispatch *) 0 ;
  double arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  Quackle::ScalingDispatch *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "new_ScalingDispatch", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__ComputerDispatch, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScalingDispatch" "', argument " "1"" of type '" "Quackle::ComputerDispatch *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::ComputerDispatch * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ScalingDispatch" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ScalingDispatch" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = (Quackle::ScalingDispatch *)new Quackle::ScalingDispatch(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__ScalingDispatch, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ScalingDispatch(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::ScalingDispatch *arg1 = (Quackle::ScalingDispatch *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__ScalingDispatch, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ScalingDispatch" "', argument " "1"" of type '" "Quackle::ScalingDispatch *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::ScalingDispatch * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalingDispatch_shouldAbort(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::ScalingDispatch *arg1 = (Quackle::ScalingDispatch *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__ScalingDispatch, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScalingDispatch_shouldAbort" "', argument " "1"" of type '" "Quackle::ScalingDispatch *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::ScalingDispatch * >(argp1);
  result = (bool)(arg1)->shouldAbort();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalingDispatch_signalFractionDone(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::ScalingDispatch *arg1 = (Quackle::ScalingDispatch *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ScalingDispatch_signalFractionDone", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__ScalingDispatch, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScalingDispatch_signalFractionDone" "', argument " "1"" of type '" "Quackle::ScalingDispatch *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::ScalingDispatch * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScalingDispatch_signalFractionDone" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  (arg1)->signalFractionDone(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ScalingDispatch_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Quackle__ScalingDispatch, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *ScalingDispatch_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_delete_ComputerPlayer(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::ComputerPlayer *arg1 = (Quackle::ComputerPlayer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__ComputerPlayer, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ComputerPlayer" "', argument " "1"" of type '" "Quackle::ComputerPlayer *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::ComputerPlayer * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComputerPlayer_setParameters(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::ComputerPlayer *arg1 = (Quackle::ComputerPlayer *) 0 ;
  Quackle::ComputerParameters *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ComputerPlayer_setParameters", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__ComputerPlayer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComputerPlayer_setParameters" "', argument " "1"" of type '" "Quackle::ComputerPlayer *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::ComputerPlayer * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__ComputerParameters,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ComputerPlayer_setParameters" "', argument " "2"" of type '" "Quackle::ComputerParameters const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ComputerPlayer_setParameters" "', argument " "2"" of type '" "Quackle::ComputerParameters const &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::ComputerParameters * >(argp2);
  (arg1)->setParameters((Quackle::ComputerParameters const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComputerPlayer_parameters(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::ComputerPlayer *arg1 = (Quackle::ComputerPlayer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Quackle::ComputerParameters *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__ComputerPlayer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComputerPlayer_parameters" "', argument " "1"" of type '" "Quackle::ComputerPlayer const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::ComputerPlayer * >(argp1);
  result = (Quackle::ComputerParameters *) &((Quackle::ComputerPlayer const *)arg1)->parameters();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__ComputerParameters, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComputerPlayer_setPosition(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::ComputerPlayer *arg1 = (Quackle::ComputerPlayer *) 0 ;
  Quackle::GamePosition *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ComputerPlayer_setPosition", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__ComputerPlayer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComputerPlayer_setPosition" "', argument " "1"" of type '" "Quackle::ComputerPlayer *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::ComputerPlayer * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__GamePosition,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ComputerPlayer_setPosition" "', argument " "2"" of type '" "Quackle::GamePosition const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ComputerPlayer_setPosition" "', argument " "2"" of type '" "Quackle::GamePosition const &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::GamePosition * >(argp2);
  (arg1)->setPosition((Quackle::GamePosition const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComputerPlayer_currentPosition__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Quackle::ComputerPlayer *arg1 = (Quackle::ComputerPlayer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Quackle::GamePosition *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__ComputerPlayer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComputerPlayer_currentPosition" "', argument " "1"" of type '" "Quackle::ComputerPlayer *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::ComputerPlayer * >(argp1);
  result = (Quackle::GamePosition *) &(arg1)->currentPosition();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__GamePosition, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComputerPlayer_currentPosition__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Quackle::ComputerPlayer *arg1 = (Quackle::ComputerPlayer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Quackle::GamePosition *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__ComputerPlayer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComputerPlayer_currentPosition" "', argument " "1"" of type '" "Quackle::ComputerPlayer const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::ComputerPlayer * >(argp1);
  result = (Quackle::GamePosition *) &((Quackle::ComputerPlayer const *)arg1)->currentPosition();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__GamePosition, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComputerPlayer_currentPosition(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ComputerPlayer_currentPosition", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Quackle__ComputerPlayer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ComputerPlayer_currentPosition__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Quackle__ComputerPlayer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ComputerPlayer_currentPosition__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ComputerPlayer_currentPosition'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Quackle::ComputerPlayer::currentPosition()\n"
    "    Quackle::ComputerPlayer::currentPosition() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ComputerPlayer_shouldAbort(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::ComputerPlayer *arg1 = (Quackle::ComputerPlayer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__ComputerPlayer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComputerPlayer_shouldAbort" "', argument " "1"" of type '" "Quackle::ComputerPlayer *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::ComputerPlayer * >(argp1);
  result = (bool)(arg1)->shouldAbort();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComputerPlayer_signalFractionDone(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::ComputerPlayer *arg1 = (Quackle::ComputerPlayer *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ComputerPlayer_signalFractionDone", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__ComputerPlayer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComputerPlayer_signalFractionDone" "', argument " "1"" of type '" "Quackle::ComputerPlayer *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::ComputerPlayer * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ComputerPlayer_signalFractionDone" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  (arg1)->signalFractionDone(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComputerPlayer_considerMove(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::ComputerPlayer *arg1 = (Quackle::ComputerPlayer *) 0 ;
  Quackle::Move *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ComputerPlayer_considerMove", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__ComputerPlayer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComputerPlayer_considerMove" "', argument " "1"" of type '" "Quackle::ComputerPlayer *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::ComputerPlayer * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__Move,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ComputerPlayer_considerMove" "', argument " "2"" of type '" "Quackle::Move const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ComputerPlayer_considerMove" "', argument " "2"" of type '" "Quackle::Move const &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::Move * >(argp2);
  (arg1)->considerMove((Quackle::Move const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComputerPlayer_setConsideredMoves(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::ComputerPlayer *arg1 = (Quackle::ComputerPlayer *) 0 ;
  Quackle::MoveList *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ComputerPlayer_setConsideredMoves", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__ComputerPlayer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComputerPlayer_setConsideredMoves" "', argument " "1"" of type '" "Quackle::ComputerPlayer *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::ComputerPlayer * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__MoveList,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ComputerPlayer_setConsideredMoves" "', argument " "2"" of type '" "Quackle::MoveList const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ComputerPlayer_setConsideredMoves" "', argument " "2"" of type '" "Quackle::MoveList const &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::MoveList * >(argp2);
  (arg1)->setConsideredMoves((Quackle::MoveList const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComputerPlayer_name(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::ComputerPlayer *arg1 = (Quackle::ComputerPlayer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  UVString *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__ComputerPlayer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComputerPlayer_name" "', argument " "1"" of type '" "Quackle::ComputerPlayer const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::ComputerPlayer * >(argp1);
  result = (UVString *) &((Quackle::ComputerPlayer const *)arg1)->name();
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComputerPlayer_id(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::ComputerPlayer *arg1 = (Quackle::ComputerPlayer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__ComputerPlayer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComputerPlayer_id" "', argument " "1"" of type '" "Quackle::ComputerPlayer const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::ComputerPlayer * >(argp1);
  result = (int)((Quackle::ComputerPlayer const *)arg1)->id();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComputerPlayer_move(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::ComputerPlayer *arg1 = (Quackle::ComputerPlayer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Quackle::Move result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__ComputerPlayer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComputerPlayer_move" "', argument " "1"" of type '" "Quackle::ComputerPlayer *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::ComputerPlayer * >(argp1);
  result = (arg1)->move();
  resultobj = SWIG_NewPointerObj((new Quackle::Move(result)), SWIGTYPE_p_Quackle__Move, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComputerPlayer_clone(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::ComputerPlayer *arg1 = (Quackle::ComputerPlayer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Quackle::ComputerPlayer *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__ComputerPlayer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComputerPlayer_clone" "', argument " "1"" of type '" "Quackle::ComputerPlayer *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::ComputerPlayer * >(argp1);
  result = (Quackle::ComputerPlayer *)(arg1)->clone();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__ComputerPlayer, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComputerPlayer_moves(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::ComputerPlayer *arg1 = (Quackle::ComputerPlayer *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  Quackle::MoveList result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ComputerPlayer_moves", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__ComputerPlayer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComputerPlayer_moves" "', argument " "1"" of type '" "Quackle::ComputerPlayer *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::ComputerPlayer * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ComputerPlayer_moves" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (arg1)->moves(arg2);
  resultobj = SWIG_NewPointerObj((new Quackle::MoveList(result)), SWIGTYPE_p_Quackle__MoveList, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComputerPlayer_isSlow(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::ComputerPlayer *arg1 = (Quackle::ComputerPlayer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__ComputerPlayer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComputerPlayer_isSlow" "', argument " "1"" of type '" "Quackle::ComputerPlayer const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::ComputerPlayer * >(argp1);
  result = (bool)((Quackle::ComputerPlayer const *)arg1)->isSlow();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComputerPlayer_isUserVisible(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::ComputerPlayer *arg1 = (Quackle::ComputerPlayer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__ComputerPlayer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComputerPlayer_isUserVisible" "', argument " "1"" of type '" "Quackle::ComputerPlayer const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::ComputerPlayer * >(argp1);
  result = (bool)((Quackle::ComputerPlayer const *)arg1)->isUserVisible();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComputerPlayer_dispatch(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::ComputerPlayer *arg1 = (Quackle::ComputerPlayer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Quackle::ComputerDispatch *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__ComputerPlayer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComputerPlayer_dispatch" "', argument " "1"" of type '" "Quackle::ComputerPlayer const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::ComputerPlayer * >(argp1);
  result = (Quackle::ComputerDispatch *)((Quackle::ComputerPlayer const *)arg1)->dispatch();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__ComputerDispatch, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComputerPlayer_setDispatch(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::ComputerPlayer *arg1 = (Quackle::ComputerPlayer *) 0 ;
  Quackle::ComputerDispatch *arg2 = (Quackle::ComputerDispatch *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ComputerPlayer_setDispatch", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__ComputerPlayer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComputerPlayer_setDispatch" "', argument " "1"" of type '" "Quackle::ComputerPlayer *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::ComputerPlayer * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_Quackle__ComputerDispatch, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ComputerPlayer_setDispatch" "', argument " "2"" of type '" "Quackle::ComputerDispatch *""'"); 
  }
  arg2 = reinterpret_cast< Quackle::ComputerDispatch * >(argp2);
  (arg1)->setDispatch(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ComputerPlayer_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Quackle__ComputerPlayer, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_StaticPlayer(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::StaticPlayer *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "new_StaticPlayer", 0, 0, 0)) SWIG_fail;
  result = (Quackle::StaticPlayer *)new Quackle::StaticPlayer();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__StaticPlayer, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_StaticPlayer(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::StaticPlayer *arg1 = (Quackle::StaticPlayer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__StaticPlayer, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_StaticPlayer" "', argument " "1"" of type '" "Quackle::StaticPlayer *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::StaticPlayer * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StaticPlayer_clone(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::StaticPlayer *arg1 = (Quackle::StaticPlayer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Quackle::ComputerPlayer *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__StaticPlayer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StaticPlayer_clone" "', argument " "1"" of type '" "Quackle::StaticPlayer *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::StaticPlayer * >(argp1);
  result = (Quackle::ComputerPlayer *)(arg1)->clone();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__ComputerPlayer, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StaticPlayer_move(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::StaticPlayer *arg1 = (Quackle::StaticPlayer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Quackle::Move result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__StaticPlayer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StaticPlayer_move" "', argument " "1"" of type '" "Quackle::StaticPlayer *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::StaticPlayer * >(argp1);
  result = (arg1)->move();
  resultobj = SWIG_NewPointerObj((new Quackle::Move(result)), SWIGTYPE_p_Quackle__Move, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StaticPlayer_moves(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::StaticPlayer *arg1 = (Quackle::StaticPlayer *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  Quackle::MoveList result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "StaticPlayer_moves", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__StaticPlayer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StaticPlayer_moves" "', argument " "1"" of type '" "Quackle::StaticPlayer *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::StaticPlayer * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StaticPlayer_moves" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (arg1)->moves(arg2);
  resultobj = SWIG_NewPointerObj((new Quackle::MoveList(result)), SWIGTYPE_p_Quackle__MoveList, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *StaticPlayer_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Quackle__StaticPlayer, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *StaticPlayer_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_ComputerPlayerCollection(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::ComputerPlayerCollection *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "new_ComputerPlayerCollection", 0, 0, 0)) SWIG_fail;
  result = (Quackle::ComputerPlayerCollection *)new Quackle::ComputerPlayerCollection();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__ComputerPlayerCollection, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComputerPlayerCollection_addPlayer(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::ComputerPlayerCollection *arg1 = (Quackle::ComputerPlayerCollection *) 0 ;
  Quackle::ComputerPlayer *arg2 = (Quackle::ComputerPlayer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ComputerPlayerCollection_addPlayer", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__ComputerPlayerCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComputerPlayerCollection_addPlayer" "', argument " "1"" of type '" "Quackle::ComputerPlayerCollection *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::ComputerPlayerCollection * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_Quackle__ComputerPlayer, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ComputerPlayerCollection_addPlayer" "', argument " "2"" of type '" "Quackle::ComputerPlayer *""'"); 
  }
  arg2 = reinterpret_cast< Quackle::ComputerPlayer * >(argp2);
  (arg1)->addPlayer(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComputerPlayerCollection_createPlayer(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::ComputerPlayer *arg1 = (Quackle::ComputerPlayer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Quackle::Player result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__ComputerPlayer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComputerPlayerCollection_createPlayer" "', argument " "1"" of type '" "Quackle::ComputerPlayer *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::ComputerPlayer * >(argp1);
  result = Quackle::ComputerPlayerCollection::createPlayer(arg1);
  resultobj = SWIG_NewPointerObj((new Quackle::Player(result)), SWIGTYPE_p_Quackle__Player, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComputerPlayerCollection_fullCollection(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::ComputerPlayerCollection result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ComputerPlayerCollection_fullCollection", 0, 0, 0)) SWIG_fail;
  result = Quackle::ComputerPlayerCollection::fullCollection();
  resultobj = SWIG_NewPointerObj((new Quackle::ComputerPlayerCollection(result)), SWIGTYPE_p_Quackle__ComputerPlayerCollection, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ComputerPlayerCollection(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::ComputerPlayerCollection *arg1 = (Quackle::ComputerPlayerCollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__ComputerPlayerCollection, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ComputerPlayerCollection" "', argument " "1"" of type '" "Quackle::ComputerPlayerCollection *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::ComputerPlayerCollection * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ComputerPlayerCollection_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Quackle__ComputerPlayerCollection, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *ComputerPlayerCollection_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_DataManager(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::DataManager *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "new_DataManager", 0, 0, 0)) SWIG_fail;
  result = (Quackle::DataManager *)new Quackle::DataManager();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__DataManager, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_DataManager(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::DataManager *arg1 = (Quackle::DataManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__DataManager, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DataManager" "', argument " "1"" of type '" "Quackle::DataManager *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::DataManager * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataManager__self(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::DataManager *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "DataManager__self", 0, 0, 0)) SWIG_fail;
  result = (Quackle::DataManager *)Quackle::DataManager::self();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__DataManager, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataManager_exists(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  bool result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "DataManager_exists", 0, 0, 0)) SWIG_fail;
  result = (bool)Quackle::DataManager::exists();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataManager_isGood(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::DataManager *arg1 = (Quackle::DataManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__DataManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataManager_isGood" "', argument " "1"" of type '" "Quackle::DataManager const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::DataManager * >(argp1);
  result = (bool)((Quackle::DataManager const *)arg1)->isGood();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataManager_evaluator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::DataManager *arg1 = (Quackle::DataManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Quackle::Evaluator *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__DataManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataManager_evaluator" "', argument " "1"" of type '" "Quackle::DataManager *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::DataManager * >(argp1);
  result = (Quackle::Evaluator *)(arg1)->evaluator();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__Evaluator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataManager_setEvaluator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::DataManager *arg1 = (Quackle::DataManager *) 0 ;
  Quackle::Evaluator *arg2 = (Quackle::Evaluator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "DataManager_setEvaluator", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__DataManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataManager_setEvaluator" "', argument " "1"" of type '" "Quackle::DataManager *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::DataManager * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&arg2), SWIGTYPE_p_Quackle__Evaluator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DataManager_setEvaluator" "', argument " "2"" of type '" "Quackle::Evaluator *""'");
  }
  (arg1)->setEvaluator(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataManager_parameters(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::DataManager *arg1 = (Quackle::DataManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Quackle::GameParameters *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__DataManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataManager_parameters" "', argument " "1"" of type '" "Quackle::DataManager *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::DataManager * >(argp1);
  result = (Quackle::GameParameters *)(arg1)->parameters();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__GameParameters, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataManager_setParameters(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::DataManager *arg1 = (Quackle::DataManager *) 0 ;
  Quackle::GameParameters *arg2 = (Quackle::GameParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "DataManager_setParameters", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__DataManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataManager_setParameters" "', argument " "1"" of type '" "Quackle::DataManager *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::DataManager * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&arg2), SWIGTYPE_p_Quackle__GameParameters, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DataManager_setParameters" "', argument " "2"" of type '" "Quackle::GameParameters *""'");
  }
  (arg1)->setParameters(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataManager_alphabetParameters(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::DataManager *arg1 = (Quackle::DataManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Quackle::AlphabetParameters *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__DataManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataManager_alphabetParameters" "', argument " "1"" of type '" "Quackle::DataManager *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::DataManager * >(argp1);
  result = (Quackle::AlphabetParameters *)(arg1)->alphabetParameters();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__AlphabetParameters, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataManager_setAlphabetParameters(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::DataManager *arg1 = (Quackle::DataManager *) 0 ;
  Quackle::AlphabetParameters *arg2 = (Quackle::AlphabetParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "DataManager_setAlphabetParameters", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__DataManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataManager_setAlphabetParameters" "', argument " "1"" of type '" "Quackle::DataManager *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::DataManager * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&arg2), SWIGTYPE_p_Quackle__AlphabetParameters, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DataManager_setAlphabetParameters" "', argument " "2"" of type '" "Quackle::AlphabetParameters *""'");
  }
  (arg1)->setAlphabetParameters(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataManager_boardParameters(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::DataManager *arg1 = (Quackle::DataManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Quackle::BoardParameters *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__DataManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataManager_boardParameters" "', argument " "1"" of type '" "Quackle::DataManager *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::DataManager * >(argp1);
  result = (Quackle::BoardParameters *)(arg1)->boardParameters();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__BoardParameters, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataManager_setBoardParameters(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::DataManager *arg1 = (Quackle::DataManager *) 0 ;
  Quackle::BoardParameters *arg2 = (Quackle::BoardParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "DataManager_setBoardParameters", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__DataManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataManager_setBoardParameters" "', argument " "1"" of type '" "Quackle::DataManager *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::DataManager * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&arg2), SWIGTYPE_p_Quackle__BoardParameters, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DataManager_setBoardParameters" "', argument " "2"" of type '" "Quackle::BoardParameters *""'");
  }
  (arg1)->setBoardParameters(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataManager_lexiconParameters(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::DataManager *arg1 = (Quackle::DataManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Quackle::LexiconParameters *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__DataManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataManager_lexiconParameters" "', argument " "1"" of type '" "Quackle::DataManager *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::DataManager * >(argp1);
  result = (Quackle::LexiconParameters *)(arg1)->lexiconParameters();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__LexiconParameters, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataManager_setLexiconParameters(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::DataManager *arg1 = (Quackle::DataManager *) 0 ;
  Quackle::LexiconParameters *arg2 = (Quackle::LexiconParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "DataManager_setLexiconParameters", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__DataManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataManager_setLexiconParameters" "', argument " "1"" of type '" "Quackle::DataManager *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::DataManager * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&arg2), SWIGTYPE_p_Quackle__LexiconParameters, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DataManager_setLexiconParameters" "', argument " "2"" of type '" "Quackle::LexiconParameters *""'");
  }
  (arg1)->setLexiconParameters(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataManager_strategyParameters(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::DataManager *arg1 = (Quackle::DataManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Quackle::StrategyParameters *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__DataManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataManager_strategyParameters" "', argument " "1"" of type '" "Quackle::DataManager *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::DataManager * >(argp1);
  result = (Quackle::StrategyParameters *)(arg1)->strategyParameters();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__StrategyParameters, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataManager_setStrategyParameters(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::DataManager *arg1 = (Quackle::DataManager *) 0 ;
  Quackle::StrategyParameters *arg2 = (Quackle::StrategyParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "DataManager_setStrategyParameters", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__DataManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataManager_setStrategyParameters" "', argument " "1"" of type '" "Quackle::DataManager *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::DataManager * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_Quackle__StrategyParameters, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DataManager_setStrategyParameters" "', argument " "2"" of type '" "Quackle::StrategyParameters *""'"); 
  }
  arg2 = reinterpret_cast< Quackle::StrategyParameters * >(argp2);
  (arg1)->setStrategyParameters(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataManager_computerPlayers(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::DataManager *arg1 = (Quackle::DataManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Quackle::PlayerList *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__DataManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataManager_computerPlayers" "', argument " "1"" of type '" "Quackle::DataManager const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::DataManager * >(argp1);
  result = (Quackle::PlayerList *) &((Quackle::DataManager const *)arg1)->computerPlayers();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__PlayerList, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataManager_setComputerPlayers(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::DataManager *arg1 = (Quackle::DataManager *) 0 ;
  Quackle::PlayerList *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "DataManager_setComputerPlayers", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__DataManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataManager_setComputerPlayers" "', argument " "1"" of type '" "Quackle::DataManager *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::DataManager * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&arg2), SWIGTYPE_p_Quackle__PlayerList, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DataManager_setComputerPlayers" "', argument " "2"" of type '" "Quackle::PlayerList const &""'");
  }
  (arg1)->setComputerPlayers((Quackle::PlayerList const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataManager_cleanupComputerPlayers(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::DataManager *arg1 = (Quackle::DataManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__DataManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataManager_cleanupComputerPlayers" "', argument " "1"" of type '" "Quackle::DataManager *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::DataManager * >(argp1);
  (arg1)->cleanupComputerPlayers();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataManager_findDataFile__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Quackle::DataManager *arg1 = (Quackle::DataManager *) 0 ;
  string *arg2 = 0 ;
  string *arg3 = 0 ;
  string *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  int res4 = SWIG_OLDOBJ ;
  string result;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__DataManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataManager_findDataFile" "', argument " "1"" of type '" "Quackle::DataManager *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::DataManager * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DataManager_findDataFile" "', argument " "2"" of type '" "string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DataManager_findDataFile" "', argument " "2"" of type '" "string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DataManager_findDataFile" "', argument " "3"" of type '" "string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DataManager_findDataFile" "', argument " "3"" of type '" "string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "DataManager_findDataFile" "', argument " "4"" of type '" "string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DataManager_findDataFile" "', argument " "4"" of type '" "string const &""'"); 
    }
    arg4 = ptr;
  }
  result = (arg1)->findDataFile((string const &)*arg2,(string const &)*arg3,(string const &)*arg4);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataManager_findDataFile__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Quackle::DataManager *arg1 = (Quackle::DataManager *) 0 ;
  string *arg2 = 0 ;
  string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  string result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__DataManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataManager_findDataFile" "', argument " "1"" of type '" "Quackle::DataManager *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::DataManager * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DataManager_findDataFile" "', argument " "2"" of type '" "string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DataManager_findDataFile" "', argument " "2"" of type '" "string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DataManager_findDataFile" "', argument " "3"" of type '" "string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DataManager_findDataFile" "', argument " "3"" of type '" "string const &""'"); 
    }
    arg3 = ptr;
  }
  result = (arg1)->findDataFile((string const &)*arg2,(string const &)*arg3);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataManager_findDataFile(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "DataManager_findDataFile", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Quackle__DataManager, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_DataManager_findDataFile__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Quackle__DataManager, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_DataManager_findDataFile__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'DataManager_findDataFile'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Quackle::DataManager::findDataFile(string const &,string const &,string const &)\n"
    "    Quackle::DataManager::findDataFile(string const &,string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DataManager_hasUserDataFile(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::DataManager *arg1 = (Quackle::DataManager *) 0 ;
  string *arg2 = 0 ;
  string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  PyObject *swig_obj[3] ;
  bool result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "DataManager_hasUserDataFile", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__DataManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataManager_hasUserDataFile" "', argument " "1"" of type '" "Quackle::DataManager *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::DataManager * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DataManager_hasUserDataFile" "', argument " "2"" of type '" "string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DataManager_hasUserDataFile" "', argument " "2"" of type '" "string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DataManager_hasUserDataFile" "', argument " "3"" of type '" "string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DataManager_hasUserDataFile" "', argument " "3"" of type '" "string const &""'"); 
    }
    arg3 = ptr;
  }
  result = (bool)(arg1)->hasUserDataFile((string const &)*arg2,(string const &)*arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataManager_makeDataFilename__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Quackle::DataManager *arg1 = (Quackle::DataManager *) 0 ;
  string *arg2 = 0 ;
  string *arg3 = 0 ;
  string *arg4 = 0 ;
  bool arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  int res4 = SWIG_OLDOBJ ;
  bool val5 ;
  int ecode5 = 0 ;
  string result;
  
  (void)self;
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__DataManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataManager_makeDataFilename" "', argument " "1"" of type '" "Quackle::DataManager *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::DataManager * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DataManager_makeDataFilename" "', argument " "2"" of type '" "string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DataManager_makeDataFilename" "', argument " "2"" of type '" "string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DataManager_makeDataFilename" "', argument " "3"" of type '" "string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DataManager_makeDataFilename" "', argument " "3"" of type '" "string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "DataManager_makeDataFilename" "', argument " "4"" of type '" "string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DataManager_makeDataFilename" "', argument " "4"" of type '" "string const &""'"); 
    }
    arg4 = ptr;
  }
  ecode5 = SWIG_AsVal_bool(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "DataManager_makeDataFilename" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  result = (arg1)->makeDataFilename((string const &)*arg2,(string const &)*arg3,(string const &)*arg4,arg5);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataManager_makeDataFilename__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Quackle::DataManager *arg1 = (Quackle::DataManager *) 0 ;
  string *arg2 = 0 ;
  string *arg3 = 0 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  bool val4 ;
  int ecode4 = 0 ;
  string result;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__DataManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataManager_makeDataFilename" "', argument " "1"" of type '" "Quackle::DataManager *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::DataManager * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DataManager_makeDataFilename" "', argument " "2"" of type '" "string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DataManager_makeDataFilename" "', argument " "2"" of type '" "string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DataManager_makeDataFilename" "', argument " "3"" of type '" "string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DataManager_makeDataFilename" "', argument " "3"" of type '" "string const &""'"); 
    }
    arg3 = ptr;
  }
  ecode4 = SWIG_AsVal_bool(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "DataManager_makeDataFilename" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  result = (arg1)->makeDataFilename((string const &)*arg2,(string const &)*arg3,arg4);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataManager_makeDataFilename(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "DataManager_makeDataFilename", 0, 5, argv))) SWIG_fail;
  --argc;
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Quackle__DataManager, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_DataManager_makeDataFilename__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Quackle__DataManager, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_DataManager_makeDataFilename__SWIG_0(self, argc, argv);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'DataManager_makeDataFilename'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Quackle::DataManager::makeDataFilename(string const &,string const &,string const &,bool)\n"
    "    Quackle::DataManager::makeDataFilename(string const &,string const &,bool)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DataManager_setBackupLexicon(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::DataManager *arg1 = (Quackle::DataManager *) 0 ;
  string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "DataManager_setBackupLexicon", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__DataManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataManager_setBackupLexicon" "', argument " "1"" of type '" "Quackle::DataManager *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::DataManager * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "DataManager_setBackupLexicon" "', argument " "2"" of type '" "string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  (arg1)->setBackupLexicon(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataManager_backupLexicon(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::DataManager *arg1 = (Quackle::DataManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  string result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__DataManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataManager_backupLexicon" "', argument " "1"" of type '" "Quackle::DataManager *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::DataManager * >(argp1);
  result = (arg1)->backupLexicon();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataManager_setAppDataDirectory(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::DataManager *arg1 = (Quackle::DataManager *) 0 ;
  string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "DataManager_setAppDataDirectory", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__DataManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataManager_setAppDataDirectory" "', argument " "1"" of type '" "Quackle::DataManager *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::DataManager * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "DataManager_setAppDataDirectory" "', argument " "2"" of type '" "string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  (arg1)->setAppDataDirectory(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataManager_appDataDirectory(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::DataManager *arg1 = (Quackle::DataManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  string result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__DataManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataManager_appDataDirectory" "', argument " "1"" of type '" "Quackle::DataManager *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::DataManager * >(argp1);
  result = (arg1)->appDataDirectory();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataManager_setUserDataDirectory(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::DataManager *arg1 = (Quackle::DataManager *) 0 ;
  string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "DataManager_setUserDataDirectory", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__DataManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataManager_setUserDataDirectory" "', argument " "1"" of type '" "Quackle::DataManager *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::DataManager * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "DataManager_setUserDataDirectory" "', argument " "2"" of type '" "string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  (arg1)->setUserDataDirectory(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataManager_userDataDirectory(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::DataManager *arg1 = (Quackle::DataManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  string result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__DataManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataManager_userDataDirectory" "', argument " "1"" of type '" "Quackle::DataManager *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::DataManager * >(argp1);
  result = (arg1)->userDataDirectory();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataManager_seedRandomNumbers__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Quackle::DataManager *arg1 = (Quackle::DataManager *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__DataManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataManager_seedRandomNumbers" "', argument " "1"" of type '" "Quackle::DataManager *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::DataManager * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DataManager_seedRandomNumbers" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  (arg1)->seedRandomNumbers(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataManager_seedRandomNumbers__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Quackle::DataManager *arg1 = (Quackle::DataManager *) 0 ;
  std::seed_seq *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__DataManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataManager_seedRandomNumbers" "', argument " "1"" of type '" "Quackle::DataManager *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::DataManager * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__seed_seq,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DataManager_seedRandomNumbers" "', argument " "2"" of type '" "std::seed_seq &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DataManager_seedRandomNumbers" "', argument " "2"" of type '" "std::seed_seq &""'"); 
  }
  arg2 = reinterpret_cast< std::seed_seq * >(argp2);
  (arg1)->seedRandomNumbers(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataManager_seedRandomNumbers(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "DataManager_seedRandomNumbers", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Quackle__DataManager, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__seed_seq, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DataManager_seedRandomNumbers__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Quackle__DataManager, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_DataManager_seedRandomNumbers__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'DataManager_seedRandomNumbers'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Quackle::DataManager::seedRandomNumbers(unsigned int)\n"
    "    Quackle::DataManager::seedRandomNumbers(std::seed_seq &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DataManager_randomInteger(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::DataManager *arg1 = (Quackle::DataManager *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "DataManager_randomInteger", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__DataManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataManager_randomInteger" "', argument " "1"" of type '" "Quackle::DataManager *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::DataManager * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DataManager_randomInteger" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DataManager_randomInteger" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (int)(arg1)->randomInteger(arg2,arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DataManager_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Quackle__DataManager, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *DataManager_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_EndgameMove(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Move *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Quackle::EndgameMove *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_Quackle__Move,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_EndgameMove" "', argument " "1"" of type '" "Quackle::Move const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_EndgameMove" "', argument " "1"" of type '" "Quackle::Move const &""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Move * >(argp1);
  result = (Quackle::EndgameMove *)new Quackle::EndgameMove((Quackle::Move const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__EndgameMove, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EndgameMove_move_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::EndgameMove *arg1 = (Quackle::EndgameMove *) 0 ;
  Quackle::Move *arg2 = (Quackle::Move *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "EndgameMove_move_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__EndgameMove, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EndgameMove_move_set" "', argument " "1"" of type '" "Quackle::EndgameMove *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::EndgameMove * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_Quackle__Move, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EndgameMove_move_set" "', argument " "2"" of type '" "Quackle::Move *""'"); 
  }
  arg2 = reinterpret_cast< Quackle::Move * >(argp2);
  if (arg1) (arg1)->move = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EndgameMove_move_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::EndgameMove *arg1 = (Quackle::EndgameMove *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Quackle::Move *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__EndgameMove, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EndgameMove_move_get" "', argument " "1"" of type '" "Quackle::EndgameMove *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::EndgameMove * >(argp1);
  result = (Quackle::Move *)& ((arg1)->move);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__Move, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EndgameMove_optimistic_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::EndgameMove *arg1 = (Quackle::EndgameMove *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "EndgameMove_optimistic_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__EndgameMove, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EndgameMove_optimistic_set" "', argument " "1"" of type '" "Quackle::EndgameMove *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::EndgameMove * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EndgameMove_optimistic_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->optimistic = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EndgameMove_optimistic_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::EndgameMove *arg1 = (Quackle::EndgameMove *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__EndgameMove, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EndgameMove_optimistic_get" "', argument " "1"" of type '" "Quackle::EndgameMove *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::EndgameMove * >(argp1);
  result = (double) ((arg1)->optimistic);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EndgameMove_pessimistic_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::EndgameMove *arg1 = (Quackle::EndgameMove *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "EndgameMove_pessimistic_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__EndgameMove, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EndgameMove_pessimistic_set" "', argument " "1"" of type '" "Quackle::EndgameMove *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::EndgameMove * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EndgameMove_pessimistic_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->pessimistic = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EndgameMove_pessimistic_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::EndgameMove *arg1 = (Quackle::EndgameMove *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__EndgameMove, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EndgameMove_pessimistic_get" "', argument " "1"" of type '" "Quackle::EndgameMove *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::EndgameMove * >(argp1);
  result = (double) ((arg1)->pessimistic);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EndgameMove_estimated_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::EndgameMove *arg1 = (Quackle::EndgameMove *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "EndgameMove_estimated_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__EndgameMove, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EndgameMove_estimated_set" "', argument " "1"" of type '" "Quackle::EndgameMove *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::EndgameMove * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EndgameMove_estimated_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->estimated = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EndgameMove_estimated_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::EndgameMove *arg1 = (Quackle::EndgameMove *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__EndgameMove, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EndgameMove_estimated_get" "', argument " "1"" of type '" "Quackle::EndgameMove *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::EndgameMove * >(argp1);
  result = (double) ((arg1)->estimated);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EndgameMove_outplay_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::EndgameMove *arg1 = (Quackle::EndgameMove *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "EndgameMove_outplay_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__EndgameMove, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EndgameMove_outplay_set" "', argument " "1"" of type '" "Quackle::EndgameMove *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::EndgameMove * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EndgameMove_outplay_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->outplay = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EndgameMove_outplay_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::EndgameMove *arg1 = (Quackle::EndgameMove *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__EndgameMove, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EndgameMove_outplay_get" "', argument " "1"" of type '" "Quackle::EndgameMove *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::EndgameMove * >(argp1);
  result = (bool) ((arg1)->outplay);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_EndgameMove(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::EndgameMove *arg1 = (Quackle::EndgameMove *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__EndgameMove, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_EndgameMove" "', argument " "1"" of type '" "Quackle::EndgameMove *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::EndgameMove * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *EndgameMove_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Quackle__EndgameMove, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *EndgameMove_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_EndgameMoveList_optimisticComparator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::EndgameMove *arg1 = 0 ;
  Quackle::EndgameMove *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "EndgameMoveList_optimisticComparator", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_Quackle__EndgameMove,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EndgameMoveList_optimisticComparator" "', argument " "1"" of type '" "Quackle::EndgameMove const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EndgameMoveList_optimisticComparator" "', argument " "1"" of type '" "Quackle::EndgameMove const &""'"); 
  }
  arg1 = reinterpret_cast< Quackle::EndgameMove * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__EndgameMove,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EndgameMoveList_optimisticComparator" "', argument " "2"" of type '" "Quackle::EndgameMove const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EndgameMoveList_optimisticComparator" "', argument " "2"" of type '" "Quackle::EndgameMove const &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::EndgameMove * >(argp2);
  result = (bool)Quackle::EndgameMoveList::optimisticComparator((Quackle::EndgameMove const &)*arg1,(Quackle::EndgameMove const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_EndgameMoveList(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::EndgameMoveList *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "new_EndgameMoveList", 0, 0, 0)) SWIG_fail;
  result = (Quackle::EndgameMoveList *)new Quackle::EndgameMoveList();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__EndgameMoveList, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_EndgameMoveList(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::EndgameMoveList *arg1 = (Quackle::EndgameMoveList *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__EndgameMoveList, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_EndgameMoveList" "', argument " "1"" of type '" "Quackle::EndgameMoveList *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::EndgameMoveList * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *EndgameMoveList_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Quackle__EndgameMoveList, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *EndgameMoveList_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_Endgame(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Endgame *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "new_Endgame", 0, 0, 0)) SWIG_fail;
  result = (Quackle::Endgame *)new Quackle::Endgame();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__Endgame, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Endgame(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Endgame *arg1 = (Quackle::Endgame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Endgame, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Endgame" "', argument " "1"" of type '" "Quackle::Endgame *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Endgame * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Endgame_setPosition(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Endgame *arg1 = (Quackle::Endgame *) 0 ;
  Quackle::GamePosition *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Endgame_setPosition", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Endgame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Endgame_setPosition" "', argument " "1"" of type '" "Quackle::Endgame *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Endgame * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__GamePosition,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Endgame_setPosition" "', argument " "2"" of type '" "Quackle::GamePosition const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Endgame_setPosition" "', argument " "2"" of type '" "Quackle::GamePosition const &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::GamePosition * >(argp2);
  (arg1)->setPosition((Quackle::GamePosition const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Endgame_currentPosition__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Quackle::Endgame *arg1 = (Quackle::Endgame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Quackle::GamePosition *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Endgame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Endgame_currentPosition" "', argument " "1"" of type '" "Quackle::Endgame *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Endgame * >(argp1);
  result = (Quackle::GamePosition *) &(arg1)->currentPosition();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__GamePosition, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Endgame_currentPosition__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Quackle::Endgame *arg1 = (Quackle::Endgame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Quackle::GamePosition *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Endgame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Endgame_currentPosition" "', argument " "1"" of type '" "Quackle::Endgame const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Endgame * >(argp1);
  result = (Quackle::GamePosition *) &((Quackle::Endgame const *)arg1)->currentPosition();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__GamePosition, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Endgame_currentPosition(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Endgame_currentPosition", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Quackle__Endgame, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Endgame_currentPosition__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Quackle__Endgame, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Endgame_currentPosition__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Endgame_currentPosition'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Quackle::Endgame::currentPosition()\n"
    "    Quackle::Endgame::currentPosition() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Endgame_setDispatch(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Endgame *arg1 = (Quackle::Endgame *) 0 ;
  Quackle::ComputerDispatch *arg2 = (Quackle::ComputerDispatch *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Endgame_setDispatch", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Endgame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Endgame_setDispatch" "', argument " "1"" of type '" "Quackle::Endgame *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Endgame * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_Quackle__ComputerDispatch, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Endgame_setDispatch" "', argument " "2"" of type '" "Quackle::ComputerDispatch *""'"); 
  }
  arg2 = reinterpret_cast< Quackle::ComputerDispatch * >(argp2);
  (arg1)->setDispatch(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Endgame_setLogfile__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Quackle::Endgame *arg1 = (Quackle::Endgame *) 0 ;
  string *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  bool val3 ;
  int ecode3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Endgame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Endgame_setLogfile" "', argument " "1"" of type '" "Quackle::Endgame *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Endgame * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Endgame_setLogfile" "', argument " "2"" of type '" "string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Endgame_setLogfile" "', argument " "2"" of type '" "string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Endgame_setLogfile" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  (arg1)->setLogfile((string const &)*arg2,arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Endgame_setLogfile__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Quackle::Endgame *arg1 = (Quackle::Endgame *) 0 ;
  string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Endgame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Endgame_setLogfile" "', argument " "1"" of type '" "Quackle::Endgame *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Endgame * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Endgame_setLogfile" "', argument " "2"" of type '" "string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Endgame_setLogfile" "', argument " "2"" of type '" "string const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->setLogfile((string const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Endgame_setLogfile(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Endgame_setLogfile", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Quackle__Endgame, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Endgame_setLogfile__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Quackle__Endgame, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Endgame_setLogfile__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Endgame_setLogfile'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Quackle::Endgame::setLogfile(string const &,bool)\n"
    "    Quackle::Endgame::setLogfile(string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Endgame_logfile(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Endgame *arg1 = (Quackle::Endgame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  string result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Endgame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Endgame_logfile" "', argument " "1"" of type '" "Quackle::Endgame const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Endgame * >(argp1);
  result = ((Quackle::Endgame const *)arg1)->logfile();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Endgame_logMessage(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Endgame *arg1 = (Quackle::Endgame *) 0 ;
  UVString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Endgame_logMessage", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Endgame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Endgame_logMessage" "', argument " "1"" of type '" "Quackle::Endgame *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Endgame * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Endgame_logMessage" "', argument " "2"" of type '" "UVString const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Endgame_logMessage" "', argument " "2"" of type '" "UVString const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->logMessage((UVString const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Endgame_isLogging(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Endgame *arg1 = (Quackle::Endgame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Endgame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Endgame_isLogging" "', argument " "1"" of type '" "Quackle::Endgame const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Endgame * >(argp1);
  result = (bool)((Quackle::Endgame const *)arg1)->isLogging();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Endgame_closeLogfile(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Endgame *arg1 = (Quackle::Endgame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Endgame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Endgame_closeLogfile" "', argument " "1"" of type '" "Quackle::Endgame *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Endgame * >(argp1);
  (arg1)->closeLogfile();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Endgame_setIncludedMoves(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Endgame *arg1 = (Quackle::Endgame *) 0 ;
  Quackle::MoveList *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Endgame_setIncludedMoves", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Endgame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Endgame_setIncludedMoves" "', argument " "1"" of type '" "Quackle::Endgame *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Endgame * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__MoveList,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Endgame_setIncludedMoves" "', argument " "2"" of type '" "Quackle::MoveList const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Endgame_setIncludedMoves" "', argument " "2"" of type '" "Quackle::MoveList const &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::MoveList * >(argp2);
  (arg1)->setIncludedMoves((Quackle::MoveList const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Endgame_moves(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Endgame *arg1 = (Quackle::Endgame *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  Quackle::MoveList result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Endgame_moves", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Endgame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Endgame_moves" "', argument " "1"" of type '" "Quackle::Endgame *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Endgame * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Endgame_moves" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (arg1)->moves(arg2);
  resultobj = SWIG_NewPointerObj((new Quackle::MoveList(result)), SWIGTYPE_p_Quackle__MoveList, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Endgame_endgameMoves(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Endgame *arg1 = (Quackle::Endgame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Quackle::EndgameMoveList *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Endgame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Endgame_endgameMoves" "', argument " "1"" of type '" "Quackle::Endgame const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Endgame * >(argp1);
  result = (Quackle::EndgameMoveList *) &((Quackle::Endgame const *)arg1)->endgameMoves();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__EndgameMoveList, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Endgame_solve(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Endgame *arg1 = (Quackle::Endgame *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  Quackle::Move result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Endgame_solve", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Endgame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Endgame_solve" "', argument " "1"" of type '" "Quackle::Endgame *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Endgame * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Endgame_solve" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (arg1)->solve(arg2);
  resultobj = SWIG_NewPointerObj((new Quackle::Move(result)), SWIGTYPE_p_Quackle__Move, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Endgame_reallyPlayOut(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Endgame *arg1 = (Quackle::Endgame *) 0 ;
  Quackle::Move *arg2 = 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Endgame_reallyPlayOut", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Endgame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Endgame_reallyPlayOut" "', argument " "1"" of type '" "Quackle::Endgame *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Endgame * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__Move,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Endgame_reallyPlayOut" "', argument " "2"" of type '" "Quackle::Move &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Endgame_reallyPlayOut" "', argument " "2"" of type '" "Quackle::Move &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::Move * >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Endgame_reallyPlayOut" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  (arg1)->reallyPlayOut(*arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Endgame_disappoint(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Endgame *arg1 = (Quackle::Endgame *) 0 ;
  Quackle::EndgameMove *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  double result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Endgame_disappoint", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Endgame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Endgame_disappoint" "', argument " "1"" of type '" "Quackle::Endgame *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Endgame * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__EndgameMove,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Endgame_disappoint" "', argument " "2"" of type '" "Quackle::EndgameMove &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Endgame_disappoint" "', argument " "2"" of type '" "Quackle::EndgameMove &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::EndgameMove * >(argp2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Endgame_disappoint" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = (double)(arg1)->disappoint(*arg2,arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Endgame_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Quackle__Endgame, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Endgame_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_EndgamePlayer(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::EndgamePlayer *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "new_EndgamePlayer", 0, 0, 0)) SWIG_fail;
  result = (Quackle::EndgamePlayer *)new Quackle::EndgamePlayer();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__EndgamePlayer, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_EndgamePlayer(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::EndgamePlayer *arg1 = (Quackle::EndgamePlayer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__EndgamePlayer, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_EndgamePlayer" "', argument " "1"" of type '" "Quackle::EndgamePlayer *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::EndgamePlayer * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EndgamePlayer_move(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::EndgamePlayer *arg1 = (Quackle::EndgamePlayer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Quackle::Move result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__EndgamePlayer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EndgamePlayer_move" "', argument " "1"" of type '" "Quackle::EndgamePlayer *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::EndgamePlayer * >(argp1);
  result = (arg1)->move();
  resultobj = SWIG_NewPointerObj((new Quackle::Move(result)), SWIGTYPE_p_Quackle__Move, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EndgamePlayer_moves(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::EndgamePlayer *arg1 = (Quackle::EndgamePlayer *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  Quackle::MoveList result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "EndgamePlayer_moves", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__EndgamePlayer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EndgamePlayer_moves" "', argument " "1"" of type '" "Quackle::EndgamePlayer *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::EndgamePlayer * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EndgamePlayer_moves" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (arg1)->moves(arg2);
  resultobj = SWIG_NewPointerObj((new Quackle::MoveList(result)), SWIGTYPE_p_Quackle__MoveList, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EndgamePlayer_clone(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::EndgamePlayer *arg1 = (Quackle::EndgamePlayer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Quackle::ComputerPlayer *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__EndgamePlayer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EndgamePlayer_clone" "', argument " "1"" of type '" "Quackle::EndgamePlayer *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::EndgamePlayer * >(argp1);
  result = (Quackle::ComputerPlayer *)(arg1)->clone();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__ComputerPlayer, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EndgamePlayer_isUserVisible(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::EndgamePlayer *arg1 = (Quackle::EndgamePlayer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__EndgamePlayer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EndgamePlayer_isUserVisible" "', argument " "1"" of type '" "Quackle::EndgamePlayer const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::EndgamePlayer * >(argp1);
  result = (bool)((Quackle::EndgamePlayer const *)arg1)->isUserVisible();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EndgamePlayer_setDispatch(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::EndgamePlayer *arg1 = (Quackle::EndgamePlayer *) 0 ;
  Quackle::ComputerDispatch *arg2 = (Quackle::ComputerDispatch *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "EndgamePlayer_setDispatch", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__EndgamePlayer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EndgamePlayer_setDispatch" "', argument " "1"" of type '" "Quackle::EndgamePlayer *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::EndgamePlayer * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_Quackle__ComputerDispatch, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EndgamePlayer_setDispatch" "', argument " "2"" of type '" "Quackle::ComputerDispatch *""'"); 
  }
  arg2 = reinterpret_cast< Quackle::ComputerDispatch * >(argp2);
  (arg1)->setDispatch(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *EndgamePlayer_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Quackle__EndgamePlayer, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *EndgamePlayer_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_ProbableRack_rack_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::ProbableRack *arg1 = (Quackle::ProbableRack *) 0 ;
  Quackle::Rack *arg2 = (Quackle::Rack *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ProbableRack_rack_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__ProbableRack, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProbableRack_rack_set" "', argument " "1"" of type '" "Quackle::ProbableRack *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::ProbableRack * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_Quackle__Rack, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ProbableRack_rack_set" "', argument " "2"" of type '" "Quackle::Rack *""'"); 
  }
  arg2 = reinterpret_cast< Quackle::Rack * >(argp2);
  if (arg1) (arg1)->rack = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProbableRack_rack_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::ProbableRack *arg1 = (Quackle::ProbableRack *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Quackle::Rack *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__ProbableRack, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProbableRack_rack_get" "', argument " "1"" of type '" "Quackle::ProbableRack *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::ProbableRack * >(argp1);
  result = (Quackle::Rack *)& ((arg1)->rack);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__Rack, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProbableRack_probability_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::ProbableRack *arg1 = (Quackle::ProbableRack *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ProbableRack_probability_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__ProbableRack, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProbableRack_probability_set" "', argument " "1"" of type '" "Quackle::ProbableRack *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::ProbableRack * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ProbableRack_probability_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->probability = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProbableRack_probability_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::ProbableRack *arg1 = (Quackle::ProbableRack *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__ProbableRack, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProbableRack_probability_get" "', argument " "1"" of type '" "Quackle::ProbableRack *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::ProbableRack * >(argp1);
  result = (double) ((arg1)->probability);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProbableRack_possibility_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::ProbableRack *arg1 = (Quackle::ProbableRack *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ProbableRack_possibility_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__ProbableRack, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProbableRack_possibility_set" "', argument " "1"" of type '" "Quackle::ProbableRack *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::ProbableRack * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ProbableRack_possibility_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->possibility = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProbableRack_possibility_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::ProbableRack *arg1 = (Quackle::ProbableRack *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__ProbableRack, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProbableRack_possibility_get" "', argument " "1"" of type '" "Quackle::ProbableRack *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::ProbableRack * >(argp1);
  result = (double) ((arg1)->possibility);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ProbableRack(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::ProbableRack *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "new_ProbableRack", 0, 0, 0)) SWIG_fail;
  result = (Quackle::ProbableRack *)new Quackle::ProbableRack();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__ProbableRack, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ProbableRack(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::ProbableRack *arg1 = (Quackle::ProbableRack *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__ProbableRack, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ProbableRack" "', argument " "1"" of type '" "Quackle::ProbableRack *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::ProbableRack * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ProbableRack_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Quackle__ProbableRack, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *ProbableRack_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_Enumerator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Bag *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Quackle::Enumerator *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_Quackle__Bag,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Enumerator" "', argument " "1"" of type '" "Quackle::Bag &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Enumerator" "', argument " "1"" of type '" "Quackle::Bag &""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Bag * >(argp1);
  result = (Quackle::Enumerator *)new Quackle::Enumerator(*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__Enumerator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Enumerator_enumerate__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Quackle::Enumerator *arg1 = (Quackle::Enumerator *) 0 ;
  Quackle::ProbableRackList *arg2 = (Quackle::ProbableRackList *) 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Enumerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Enumerator_enumerate" "', argument " "1"" of type '" "Quackle::Enumerator *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Enumerator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_std__vectorT_Quackle__ProbableRack_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Enumerator_enumerate" "', argument " "2"" of type '" "Quackle::ProbableRackList *""'"); 
  }
  arg2 = reinterpret_cast< Quackle::ProbableRackList * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Enumerator_enumerate" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  (arg1)->enumerate(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Enumerator_enumerate__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Quackle::Enumerator *arg1 = (Quackle::Enumerator *) 0 ;
  Quackle::ProbableRackList *arg2 = (Quackle::ProbableRackList *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Enumerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Enumerator_enumerate" "', argument " "1"" of type '" "Quackle::Enumerator *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Enumerator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_std__vectorT_Quackle__ProbableRack_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Enumerator_enumerate" "', argument " "2"" of type '" "Quackle::ProbableRackList *""'"); 
  }
  arg2 = reinterpret_cast< Quackle::ProbableRackList * >(argp2);
  (arg1)->enumerate(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Enumerator_enumerate(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Enumerator_enumerate", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Quackle__Enumerator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< Quackle::ProbableRack,std::allocator< Quackle::ProbableRack > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Enumerator_enumerate__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Quackle__Enumerator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< Quackle::ProbableRack,std::allocator< Quackle::ProbableRack > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Enumerator_enumerate__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Enumerator_enumerate'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Quackle::Enumerator::enumerate(Quackle::ProbableRackList *,unsigned int)\n"
    "    Quackle::Enumerator::enumerate(Quackle::ProbableRackList *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Enumerator_enumeratePossible(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Enumerator *arg1 = (Quackle::Enumerator *) 0 ;
  Quackle::ProbableRackList *arg2 = (Quackle::ProbableRackList *) 0 ;
  Quackle::Bag *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Enumerator_enumeratePossible", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Enumerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Enumerator_enumeratePossible" "', argument " "1"" of type '" "Quackle::Enumerator *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Enumerator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_std__vectorT_Quackle__ProbableRack_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Enumerator_enumeratePossible" "', argument " "2"" of type '" "Quackle::ProbableRackList *""'"); 
  }
  arg2 = reinterpret_cast< Quackle::ProbableRackList * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_Quackle__Bag,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Enumerator_enumeratePossible" "', argument " "3"" of type '" "Quackle::Bag const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Enumerator_enumeratePossible" "', argument " "3"" of type '" "Quackle::Bag const &""'"); 
  }
  arg3 = reinterpret_cast< Quackle::Bag * >(argp3);
  (arg1)->enumeratePossible(arg2,(Quackle::Bag const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Enumerator_normalizeProbabilities(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::ProbableRackList *arg1 = (Quackle::ProbableRackList *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Quackle__ProbableRack_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Enumerator_normalizeProbabilities" "', argument " "1"" of type '" "Quackle::ProbableRackList *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::ProbableRackList * >(argp1);
  Quackle::Enumerator::normalizeProbabilities(arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Enumerator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Enumerator *arg1 = (Quackle::Enumerator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Enumerator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Enumerator" "', argument " "1"" of type '" "Quackle::Enumerator *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Enumerator * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Enumerator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Quackle__Enumerator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Enumerator_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_SmartBogowin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::SmartBogowin *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "new_SmartBogowin", 0, 0, 0)) SWIG_fail;
  result = (Quackle::SmartBogowin *)new Quackle::SmartBogowin();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__SmartBogowin, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SmartBogowin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::SmartBogowin *arg1 = (Quackle::SmartBogowin *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__SmartBogowin, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SmartBogowin" "', argument " "1"" of type '" "Quackle::SmartBogowin *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::SmartBogowin * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SmartBogowin_move(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::SmartBogowin *arg1 = (Quackle::SmartBogowin *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Quackle::Move result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__SmartBogowin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmartBogowin_move" "', argument " "1"" of type '" "Quackle::SmartBogowin *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::SmartBogowin * >(argp1);
  result = (arg1)->move();
  resultobj = SWIG_NewPointerObj((new Quackle::Move(result)), SWIGTYPE_p_Quackle__Move, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SmartBogowin_moves(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::SmartBogowin *arg1 = (Quackle::SmartBogowin *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  Quackle::MoveList result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SmartBogowin_moves", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__SmartBogowin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmartBogowin_moves" "', argument " "1"" of type '" "Quackle::SmartBogowin *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::SmartBogowin * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SmartBogowin_moves" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (arg1)->moves(arg2);
  resultobj = SWIG_NewPointerObj((new Quackle::MoveList(result)), SWIGTYPE_p_Quackle__MoveList, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SmartBogowin_clone(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::SmartBogowin *arg1 = (Quackle::SmartBogowin *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Quackle::ComputerPlayer *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__SmartBogowin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmartBogowin_clone" "', argument " "1"" of type '" "Quackle::SmartBogowin *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::SmartBogowin * >(argp1);
  result = (Quackle::ComputerPlayer *)(arg1)->clone();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__ComputerPlayer, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SmartBogowin_isSlow(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::SmartBogowin *arg1 = (Quackle::SmartBogowin *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__SmartBogowin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmartBogowin_isSlow" "', argument " "1"" of type '" "Quackle::SmartBogowin const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::SmartBogowin * >(argp1);
  result = (bool)((Quackle::SmartBogowin const *)arg1)->isSlow();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SmartBogowin_isUserVisible(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::SmartBogowin *arg1 = (Quackle::SmartBogowin *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__SmartBogowin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmartBogowin_isUserVisible" "', argument " "1"" of type '" "Quackle::SmartBogowin const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::SmartBogowin * >(argp1);
  result = (bool)((Quackle::SmartBogowin const *)arg1)->isUserVisible();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SmartBogowin_bogopoints(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::SmartBogowin *arg1 = (Quackle::SmartBogowin *) 0 ;
  Quackle::Move *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SmartBogowin_bogopoints", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__SmartBogowin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmartBogowin_bogopoints" "', argument " "1"" of type '" "Quackle::SmartBogowin *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::SmartBogowin * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__Move,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SmartBogowin_bogopoints" "', argument " "2"" of type '" "Quackle::Move &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SmartBogowin_bogopoints" "', argument " "2"" of type '" "Quackle::Move &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::Move * >(argp2);
  result = (double)(arg1)->bogopoints(*arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SmartBogowin_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Quackle__SmartBogowin, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *SmartBogowin_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_Stopwatch(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Stopwatch *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "new_Stopwatch", 0, 0, 0)) SWIG_fail;
  result = (Quackle::Stopwatch *)new Quackle::Stopwatch();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__Stopwatch, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Stopwatch_start(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Stopwatch *arg1 = (Quackle::Stopwatch *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Stopwatch, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Stopwatch_start" "', argument " "1"" of type '" "Quackle::Stopwatch *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Stopwatch * >(argp1);
  (arg1)->start();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Stopwatch_elapsed(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Stopwatch *arg1 = (Quackle::Stopwatch *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Stopwatch, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Stopwatch_elapsed" "', argument " "1"" of type '" "Quackle::Stopwatch const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Stopwatch * >(argp1);
  result = (int)((Quackle::Stopwatch const *)arg1)->elapsed();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Stopwatch_exceeded(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Stopwatch *arg1 = (Quackle::Stopwatch *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Stopwatch_exceeded", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Stopwatch, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Stopwatch_exceeded" "', argument " "1"" of type '" "Quackle::Stopwatch const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Stopwatch * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Stopwatch_exceeded" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (bool)((Quackle::Stopwatch const *)arg1)->exceeded(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Stopwatch(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Stopwatch *arg1 = (Quackle::Stopwatch *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Stopwatch, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Stopwatch" "', argument " "1"" of type '" "Quackle::Stopwatch *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Stopwatch * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Stopwatch_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Quackle__Stopwatch, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Stopwatch_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_ExtensionWithInfo(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::ExtensionWithInfo *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "new_ExtensionWithInfo", 0, 0, 0)) SWIG_fail;
  result = (Quackle::ExtensionWithInfo *)new Quackle::ExtensionWithInfo();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__ExtensionWithInfo, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExtensionWithInfo_extensionLetterString_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::ExtensionWithInfo *arg1 = (Quackle::ExtensionWithInfo *) 0 ;
  Quackle::LetterString *arg2 = (Quackle::LetterString *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ExtensionWithInfo_extensionLetterString_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__ExtensionWithInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExtensionWithInfo_extensionLetterString_set" "', argument " "1"" of type '" "Quackle::ExtensionWithInfo *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::ExtensionWithInfo * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_Quackle__FixedLengthString, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ExtensionWithInfo_extensionLetterString_set" "', argument " "2"" of type '" "Quackle::LetterString *""'"); 
  }
  arg2 = reinterpret_cast< Quackle::LetterString * >(argp2);
  if (arg1) (arg1)->extensionLetterString = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExtensionWithInfo_extensionLetterString_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::ExtensionWithInfo *arg1 = (Quackle::ExtensionWithInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Quackle::LetterString *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__ExtensionWithInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExtensionWithInfo_extensionLetterString_get" "', argument " "1"" of type '" "Quackle::ExtensionWithInfo *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::ExtensionWithInfo * >(argp1);
  result = (Quackle::LetterString *)& ((arg1)->extensionLetterString);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__FixedLengthString, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExtensionWithInfo_playability_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::ExtensionWithInfo *arg1 = (Quackle::ExtensionWithInfo *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ExtensionWithInfo_playability_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__ExtensionWithInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExtensionWithInfo_playability_set" "', argument " "1"" of type '" "Quackle::ExtensionWithInfo *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::ExtensionWithInfo * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ExtensionWithInfo_playability_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->playability = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExtensionWithInfo_playability_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::ExtensionWithInfo *arg1 = (Quackle::ExtensionWithInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__ExtensionWithInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExtensionWithInfo_playability_get" "', argument " "1"" of type '" "Quackle::ExtensionWithInfo *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::ExtensionWithInfo * >(argp1);
  result = (int) ((arg1)->playability);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExtensionWithInfo_probability_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::ExtensionWithInfo *arg1 = (Quackle::ExtensionWithInfo *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ExtensionWithInfo_probability_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__ExtensionWithInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExtensionWithInfo_probability_set" "', argument " "1"" of type '" "Quackle::ExtensionWithInfo *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::ExtensionWithInfo * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ExtensionWithInfo_probability_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->probability = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExtensionWithInfo_probability_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::ExtensionWithInfo *arg1 = (Quackle::ExtensionWithInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__ExtensionWithInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExtensionWithInfo_probability_get" "', argument " "1"" of type '" "Quackle::ExtensionWithInfo *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::ExtensionWithInfo * >(argp1);
  result = (double) ((arg1)->probability);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExtensionWithInfo_british_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::ExtensionWithInfo *arg1 = (Quackle::ExtensionWithInfo *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ExtensionWithInfo_british_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__ExtensionWithInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExtensionWithInfo_british_set" "', argument " "1"" of type '" "Quackle::ExtensionWithInfo *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::ExtensionWithInfo * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ExtensionWithInfo_british_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->british = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExtensionWithInfo_british_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::ExtensionWithInfo *arg1 = (Quackle::ExtensionWithInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__ExtensionWithInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExtensionWithInfo_british_get" "', argument " "1"" of type '" "Quackle::ExtensionWithInfo *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::ExtensionWithInfo * >(argp1);
  result = (bool) ((arg1)->british);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ExtensionWithInfo(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::ExtensionWithInfo *arg1 = (Quackle::ExtensionWithInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__ExtensionWithInfo, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ExtensionWithInfo" "', argument " "1"" of type '" "Quackle::ExtensionWithInfo *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::ExtensionWithInfo * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ExtensionWithInfo_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Quackle__ExtensionWithInfo, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *ExtensionWithInfo_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_WordWithInfo(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::WordWithInfo *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "new_WordWithInfo", 0, 0, 0)) SWIG_fail;
  result = (Quackle::WordWithInfo *)new Quackle::WordWithInfo();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__WordWithInfo, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WordWithInfo_wordLetterString_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::WordWithInfo *arg1 = (Quackle::WordWithInfo *) 0 ;
  Quackle::LetterString *arg2 = (Quackle::LetterString *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "WordWithInfo_wordLetterString_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__WordWithInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WordWithInfo_wordLetterString_set" "', argument " "1"" of type '" "Quackle::WordWithInfo *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::WordWithInfo * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_Quackle__FixedLengthString, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WordWithInfo_wordLetterString_set" "', argument " "2"" of type '" "Quackle::LetterString *""'"); 
  }
  arg2 = reinterpret_cast< Quackle::LetterString * >(argp2);
  if (arg1) (arg1)->wordLetterString = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WordWithInfo_wordLetterString_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::WordWithInfo *arg1 = (Quackle::WordWithInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Quackle::LetterString *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__WordWithInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WordWithInfo_wordLetterString_get" "', argument " "1"" of type '" "Quackle::WordWithInfo *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::WordWithInfo * >(argp1);
  result = (Quackle::LetterString *)& ((arg1)->wordLetterString);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__FixedLengthString, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WordWithInfo_playability_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::WordWithInfo *arg1 = (Quackle::WordWithInfo *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "WordWithInfo_playability_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__WordWithInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WordWithInfo_playability_set" "', argument " "1"" of type '" "Quackle::WordWithInfo *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::WordWithInfo * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "WordWithInfo_playability_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->playability = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WordWithInfo_playability_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::WordWithInfo *arg1 = (Quackle::WordWithInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__WordWithInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WordWithInfo_playability_get" "', argument " "1"" of type '" "Quackle::WordWithInfo *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::WordWithInfo * >(argp1);
  result = (int) ((arg1)->playability);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WordWithInfo_probability_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::WordWithInfo *arg1 = (Quackle::WordWithInfo *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "WordWithInfo_probability_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__WordWithInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WordWithInfo_probability_set" "', argument " "1"" of type '" "Quackle::WordWithInfo *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::WordWithInfo * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "WordWithInfo_probability_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->probability = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WordWithInfo_probability_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::WordWithInfo *arg1 = (Quackle::WordWithInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__WordWithInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WordWithInfo_probability_get" "', argument " "1"" of type '" "Quackle::WordWithInfo *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::WordWithInfo * >(argp1);
  result = (double) ((arg1)->probability);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WordWithInfo_british_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::WordWithInfo *arg1 = (Quackle::WordWithInfo *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "WordWithInfo_british_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__WordWithInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WordWithInfo_british_set" "', argument " "1"" of type '" "Quackle::WordWithInfo *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::WordWithInfo * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "WordWithInfo_british_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->british = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WordWithInfo_british_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::WordWithInfo *arg1 = (Quackle::WordWithInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__WordWithInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WordWithInfo_british_get" "', argument " "1"" of type '" "Quackle::WordWithInfo *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::WordWithInfo * >(argp1);
  result = (bool) ((arg1)->british);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WordWithInfo_frontExtensions_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::WordWithInfo *arg1 = (Quackle::WordWithInfo *) 0 ;
  vector< Quackle::ExtensionWithInfo > *arg2 = (vector< Quackle::ExtensionWithInfo > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "WordWithInfo_frontExtensions_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__WordWithInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WordWithInfo_frontExtensions_set" "', argument " "1"" of type '" "Quackle::WordWithInfo *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::WordWithInfo * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_std__vectorT_Quackle__ExtensionWithInfo_std__allocatorT_Quackle__ExtensionWithInfo_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WordWithInfo_frontExtensions_set" "', argument " "2"" of type '" "vector< Quackle::ExtensionWithInfo > *""'"); 
  }
  arg2 = reinterpret_cast< vector< Quackle::ExtensionWithInfo > * >(argp2);
  if (arg1) (arg1)->frontExtensions = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WordWithInfo_frontExtensions_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::WordWithInfo *arg1 = (Quackle::WordWithInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  vector< Quackle::ExtensionWithInfo > *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__WordWithInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WordWithInfo_frontExtensions_get" "', argument " "1"" of type '" "Quackle::WordWithInfo *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::WordWithInfo * >(argp1);
  result = (vector< Quackle::ExtensionWithInfo > *)& ((arg1)->frontExtensions);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Quackle__ExtensionWithInfo_std__allocatorT_Quackle__ExtensionWithInfo_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WordWithInfo_backExtensions_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::WordWithInfo *arg1 = (Quackle::WordWithInfo *) 0 ;
  vector< Quackle::ExtensionWithInfo > *arg2 = (vector< Quackle::ExtensionWithInfo > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "WordWithInfo_backExtensions_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__WordWithInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WordWithInfo_backExtensions_set" "', argument " "1"" of type '" "Quackle::WordWithInfo *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::WordWithInfo * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_std__vectorT_Quackle__ExtensionWithInfo_std__allocatorT_Quackle__ExtensionWithInfo_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WordWithInfo_backExtensions_set" "', argument " "2"" of type '" "vector< Quackle::ExtensionWithInfo > *""'"); 
  }
  arg2 = reinterpret_cast< vector< Quackle::ExtensionWithInfo > * >(argp2);
  if (arg1) (arg1)->backExtensions = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WordWithInfo_backExtensions_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::WordWithInfo *arg1 = (Quackle::WordWithInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  vector< Quackle::ExtensionWithInfo > *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__WordWithInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WordWithInfo_backExtensions_get" "', argument " "1"" of type '" "Quackle::WordWithInfo *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::WordWithInfo * >(argp1);
  result = (vector< Quackle::ExtensionWithInfo > *)& ((arg1)->backExtensions);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Quackle__ExtensionWithInfo_std__allocatorT_Quackle__ExtensionWithInfo_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_WordWithInfo(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::WordWithInfo *arg1 = (Quackle::WordWithInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__WordWithInfo, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_WordWithInfo" "', argument " "1"" of type '" "Quackle::WordWithInfo *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::WordWithInfo * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *WordWithInfo_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Quackle__WordWithInfo, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *WordWithInfo_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_Generator__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  Quackle::Generator *result = 0 ;
  
  (void)self;
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (Quackle::Generator *)new Quackle::Generator();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__Generator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Generator__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Quackle::GamePosition *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Quackle::Generator *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_Quackle__GamePosition,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Generator" "', argument " "1"" of type '" "Quackle::GamePosition const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Generator" "', argument " "1"" of type '" "Quackle::GamePosition const &""'"); 
  }
  arg1 = reinterpret_cast< Quackle::GamePosition * >(argp1);
  result = (Quackle::Generator *)new Quackle::Generator((Quackle::GamePosition const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__Generator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Generator(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_Generator", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_Generator__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Quackle__GamePosition, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Generator__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_Generator'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Quackle::Generator::Generator()\n"
    "    Quackle::Generator::Generator(Quackle::GamePosition const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_Generator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Generator *arg1 = (Quackle::Generator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Generator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Generator" "', argument " "1"" of type '" "Quackle::Generator *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Generator * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Generator_kibitz__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Quackle::Generator *arg1 = (Quackle::Generator *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Generator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Generator_kibitz" "', argument " "1"" of type '" "Quackle::Generator *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Generator * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Generator_kibitz" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Generator_kibitz" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  (arg1)->kibitz(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Generator_kibitz__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Quackle::Generator *arg1 = (Quackle::Generator *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Generator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Generator_kibitz" "', argument " "1"" of type '" "Quackle::Generator *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Generator * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Generator_kibitz" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->kibitz(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Generator_kibitz__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Quackle::Generator *arg1 = (Quackle::Generator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Generator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Generator_kibitz" "', argument " "1"" of type '" "Quackle::Generator *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Generator * >(argp1);
  (arg1)->kibitz();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Generator_kibitz(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Generator_kibitz", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Quackle__Generator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Generator_kibitz__SWIG_2(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Quackle__Generator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Generator_kibitz__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Quackle__Generator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Generator_kibitz__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Generator_kibitz'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Quackle::Generator::kibitz(int,int)\n"
    "    Quackle::Generator::kibitz(int)\n"
    "    Quackle::Generator::kibitz()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Generator_kibitzList(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Generator *arg1 = (Quackle::Generator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Quackle::MoveList *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Generator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Generator_kibitzList" "', argument " "1"" of type '" "Quackle::Generator *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Generator * >(argp1);
  result = (Quackle::MoveList *) &(arg1)->kibitzList();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__MoveList, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Generator_allPossiblePlays(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Generator *arg1 = (Quackle::Generator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Quackle::MoveList *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Generator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Generator_allPossiblePlays" "', argument " "1"" of type '" "Quackle::Generator *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Generator * >(argp1);
  result = (Quackle::MoveList *) &(arg1)->allPossiblePlays();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__MoveList, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Generator_setPosition(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Generator *arg1 = (Quackle::Generator *) 0 ;
  Quackle::GamePosition *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Generator_setPosition", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Generator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Generator_setPosition" "', argument " "1"" of type '" "Quackle::Generator *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Generator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__GamePosition,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Generator_setPosition" "', argument " "2"" of type '" "Quackle::GamePosition const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Generator_setPosition" "', argument " "2"" of type '" "Quackle::GamePosition const &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::GamePosition * >(argp2);
  (arg1)->setPosition((Quackle::GamePosition const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Generator_position(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Generator *arg1 = (Quackle::Generator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Quackle::GamePosition *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Generator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Generator_position" "', argument " "1"" of type '" "Quackle::Generator const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Generator * >(argp1);
  result = (Quackle::GamePosition *) &((Quackle::Generator const *)arg1)->position();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__GamePosition, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Generator_makeMove(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Generator *arg1 = (Quackle::Generator *) 0 ;
  Quackle::Move *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Generator_makeMove", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Generator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Generator_makeMove" "', argument " "1"" of type '" "Quackle::Generator *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Generator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__Move,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Generator_makeMove" "', argument " "2"" of type '" "Quackle::Move const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Generator_makeMove" "', argument " "2"" of type '" "Quackle::Move const &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::Move * >(argp2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Generator_makeMove" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  (arg1)->makeMove((Quackle::Move const &)*arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Generator_isAcceptableWord(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Generator *arg1 = (Quackle::Generator *) 0 ;
  Quackle::LetterString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Generator_isAcceptableWord", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Generator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Generator_isAcceptableWord" "', argument " "1"" of type '" "Quackle::Generator *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Generator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__FixedLengthString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Generator_isAcceptableWord" "', argument " "2"" of type '" "Quackle::LetterString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Generator_isAcceptableWord" "', argument " "2"" of type '" "Quackle::LetterString const &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::LetterString * >(argp2);
  result = (bool)(arg1)->isAcceptableWord((Quackle::LetterString const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Generator_anagramLetters__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Quackle::Generator *arg1 = (Quackle::Generator *) 0 ;
  Quackle::LetterString *arg2 = 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  Quackle::WordList result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Generator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Generator_anagramLetters" "', argument " "1"" of type '" "Quackle::Generator *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Generator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__FixedLengthString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Generator_anagramLetters" "', argument " "2"" of type '" "Quackle::LetterString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Generator_anagramLetters" "', argument " "2"" of type '" "Quackle::LetterString const &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::LetterString * >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Generator_anagramLetters" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (arg1)->anagramLetters((Quackle::LetterString const &)*arg2,arg3);
  resultobj = swig::from(static_cast< std::vector< Quackle::FixedLengthString,std::allocator< Quackle::FixedLengthString > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Generator_anagramLetters__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Quackle::Generator *arg1 = (Quackle::Generator *) 0 ;
  Quackle::LetterString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  Quackle::WordList result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Generator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Generator_anagramLetters" "', argument " "1"" of type '" "Quackle::Generator *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Generator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__FixedLengthString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Generator_anagramLetters" "', argument " "2"" of type '" "Quackle::LetterString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Generator_anagramLetters" "', argument " "2"" of type '" "Quackle::LetterString const &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::LetterString * >(argp2);
  result = (arg1)->anagramLetters((Quackle::LetterString const &)*arg2);
  resultobj = swig::from(static_cast< std::vector< Quackle::FixedLengthString,std::allocator< Quackle::FixedLengthString > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Generator_anagramLetters(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Generator_anagramLetters", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Quackle__Generator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Quackle__FixedLengthString, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Generator_anagramLetters__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Quackle__Generator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Quackle__FixedLengthString, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Generator_anagramLetters__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Generator_anagramLetters'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Quackle::Generator::anagramLetters(Quackle::LetterString const &,int)\n"
    "    Quackle::Generator::anagramLetters(Quackle::LetterString const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Generator_storeWordInfo(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Generator *arg1 = (Quackle::Generator *) 0 ;
  Quackle::WordWithInfo *arg2 = (Quackle::WordWithInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Generator_storeWordInfo", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Generator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Generator_storeWordInfo" "', argument " "1"" of type '" "Quackle::Generator *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Generator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_Quackle__WordWithInfo, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Generator_storeWordInfo" "', argument " "2"" of type '" "Quackle::WordWithInfo *""'"); 
  }
  arg2 = reinterpret_cast< Quackle::WordWithInfo * >(argp2);
  (arg1)->storeWordInfo(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Generator_storeExtensions(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Generator *arg1 = (Quackle::Generator *) 0 ;
  Quackle::WordWithInfo *arg2 = (Quackle::WordWithInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Generator_storeExtensions", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Generator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Generator_storeExtensions" "', argument " "1"" of type '" "Quackle::Generator *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Generator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_Quackle__WordWithInfo, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Generator_storeExtensions" "', argument " "2"" of type '" "Quackle::WordWithInfo *""'"); 
  }
  arg2 = reinterpret_cast< Quackle::WordWithInfo * >(argp2);
  (arg1)->storeExtensions(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Generator_allCrosses(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Generator *arg1 = (Quackle::Generator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Generator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Generator_allCrosses" "', argument " "1"" of type '" "Quackle::Generator *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Generator * >(argp1);
  (arg1)->allCrosses();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Generator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Quackle__Generator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Generator_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_GaddagNode_letter(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::GaddagNode *arg1 = (Quackle::GaddagNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Quackle::Letter result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__GaddagNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GaddagNode_letter" "', argument " "1"" of type '" "Quackle::GaddagNode const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::GaddagNode * >(argp1);
  result = (Quackle::Letter)((Quackle::GaddagNode const *)arg1)->letter();
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaddagNode_isTerminal(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::GaddagNode *arg1 = (Quackle::GaddagNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__GaddagNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GaddagNode_isTerminal" "', argument " "1"" of type '" "Quackle::GaddagNode const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::GaddagNode * >(argp1);
  result = (bool)((Quackle::GaddagNode const *)arg1)->isTerminal();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaddagNode_firstChild(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::GaddagNode *arg1 = (Quackle::GaddagNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Quackle::GaddagNode *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__GaddagNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GaddagNode_firstChild" "', argument " "1"" of type '" "Quackle::GaddagNode const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::GaddagNode * >(argp1);
  result = (Quackle::GaddagNode *)((Quackle::GaddagNode const *)arg1)->firstChild();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__GaddagNode, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaddagNode_nextSibling(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::GaddagNode *arg1 = (Quackle::GaddagNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Quackle::GaddagNode *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__GaddagNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GaddagNode_nextSibling" "', argument " "1"" of type '" "Quackle::GaddagNode const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::GaddagNode * >(argp1);
  result = (Quackle::GaddagNode *)((Quackle::GaddagNode const *)arg1)->nextSibling();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__GaddagNode, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaddagNode_child(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::GaddagNode *arg1 = (Quackle::GaddagNode *) 0 ;
  Quackle::Letter arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  Quackle::GaddagNode *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "GaddagNode_child", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__GaddagNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GaddagNode_child" "', argument " "1"" of type '" "Quackle::GaddagNode const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::GaddagNode * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GaddagNode_child" "', argument " "2"" of type '" "Quackle::Letter""'");
  } 
  arg2 = static_cast< Quackle::Letter >(val2);
  result = (Quackle::GaddagNode *)((Quackle::GaddagNode const *)arg1)->child(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__GaddagNode, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GaddagNode(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::GaddagNode *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "new_GaddagNode", 0, 0, 0)) SWIG_fail;
  result = (Quackle::GaddagNode *)new Quackle::GaddagNode();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__GaddagNode, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_GaddagNode(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::GaddagNode *arg1 = (Quackle::GaddagNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__GaddagNode, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GaddagNode" "', argument " "1"" of type '" "Quackle::GaddagNode *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::GaddagNode * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *GaddagNode_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Quackle__GaddagNode, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *GaddagNode_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_LexiconInterpreter_loadDawg(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::LexiconInterpreter *arg1 = (Quackle::LexiconInterpreter *) 0 ;
  std::ifstream *arg2 = 0 ;
  Quackle::LexiconParameters *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LexiconInterpreter_loadDawg", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__LexiconInterpreter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LexiconInterpreter_loadDawg" "', argument " "1"" of type '" "Quackle::LexiconInterpreter *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::LexiconInterpreter * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__ifstream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LexiconInterpreter_loadDawg" "', argument " "2"" of type '" "std::ifstream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LexiconInterpreter_loadDawg" "', argument " "2"" of type '" "std::ifstream &""'"); 
  }
  arg2 = reinterpret_cast< std::ifstream * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_Quackle__LexiconParameters,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LexiconInterpreter_loadDawg" "', argument " "3"" of type '" "Quackle::LexiconParameters &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LexiconInterpreter_loadDawg" "', argument " "3"" of type '" "Quackle::LexiconParameters &""'"); 
  }
  arg3 = reinterpret_cast< Quackle::LexiconParameters * >(argp3);
  (arg1)->loadDawg(*arg2,*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LexiconInterpreter_loadGaddag(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::LexiconInterpreter *arg1 = (Quackle::LexiconInterpreter *) 0 ;
  std::ifstream *arg2 = 0 ;
  Quackle::LexiconParameters *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LexiconInterpreter_loadGaddag", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__LexiconInterpreter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LexiconInterpreter_loadGaddag" "', argument " "1"" of type '" "Quackle::LexiconInterpreter *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::LexiconInterpreter * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__ifstream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LexiconInterpreter_loadGaddag" "', argument " "2"" of type '" "std::ifstream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LexiconInterpreter_loadGaddag" "', argument " "2"" of type '" "std::ifstream &""'"); 
  }
  arg2 = reinterpret_cast< std::ifstream * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_Quackle__LexiconParameters,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LexiconInterpreter_loadGaddag" "', argument " "3"" of type '" "Quackle::LexiconParameters &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LexiconInterpreter_loadGaddag" "', argument " "3"" of type '" "Quackle::LexiconParameters &""'"); 
  }
  arg3 = reinterpret_cast< Quackle::LexiconParameters * >(argp3);
  (arg1)->loadGaddag(*arg2,*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LexiconInterpreter_dawgAt(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::LexiconInterpreter *arg1 = (Quackle::LexiconInterpreter *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  int arg3 ;
  unsigned int *arg4 = 0 ;
  Quackle::Letter *arg5 = 0 ;
  bool *arg6 = 0 ;
  bool *arg7 = 0 ;
  bool *arg8 = 0 ;
  int *arg9 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  void *argp9 = 0 ;
  int res9 = 0 ;
  PyObject *swig_obj[9] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LexiconInterpreter_dawgAt", 9, 9, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__LexiconInterpreter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LexiconInterpreter_dawgAt" "', argument " "1"" of type '" "Quackle::LexiconInterpreter const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::LexiconInterpreter * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LexiconInterpreter_dawgAt" "', argument " "2"" of type '" "unsigned char const *""'"); 
  }
  arg2 = reinterpret_cast< unsigned char * >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "LexiconInterpreter_dawgAt" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_unsigned_int,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "LexiconInterpreter_dawgAt" "', argument " "4"" of type '" "unsigned int &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LexiconInterpreter_dawgAt" "', argument " "4"" of type '" "unsigned int &""'"); 
  }
  arg4 = reinterpret_cast< unsigned int * >(argp4);
  res5 = SWIG_ConvertPtr(swig_obj[4], &argp5, SWIGTYPE_p_unsigned_char,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "LexiconInterpreter_dawgAt" "', argument " "5"" of type '" "Quackle::Letter &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LexiconInterpreter_dawgAt" "', argument " "5"" of type '" "Quackle::Letter &""'"); 
  }
  arg5 = reinterpret_cast< Quackle::Letter * >(argp5);
  res6 = SWIG_ConvertPtr(swig_obj[5], &argp6, SWIGTYPE_p_bool,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "LexiconInterpreter_dawgAt" "', argument " "6"" of type '" "bool &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LexiconInterpreter_dawgAt" "', argument " "6"" of type '" "bool &""'"); 
  }
  arg6 = reinterpret_cast< bool * >(argp6);
  res7 = SWIG_ConvertPtr(swig_obj[6], &argp7, SWIGTYPE_p_bool,  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "LexiconInterpreter_dawgAt" "', argument " "7"" of type '" "bool &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LexiconInterpreter_dawgAt" "', argument " "7"" of type '" "bool &""'"); 
  }
  arg7 = reinterpret_cast< bool * >(argp7);
  res8 = SWIG_ConvertPtr(swig_obj[7], &argp8, SWIGTYPE_p_bool,  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "LexiconInterpreter_dawgAt" "', argument " "8"" of type '" "bool &""'"); 
  }
  if (!argp8) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LexiconInterpreter_dawgAt" "', argument " "8"" of type '" "bool &""'"); 
  }
  arg8 = reinterpret_cast< bool * >(argp8);
  res9 = SWIG_ConvertPtr(swig_obj[8], &argp9, SWIGTYPE_p_int,  0 );
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "LexiconInterpreter_dawgAt" "', argument " "9"" of type '" "int &""'"); 
  }
  if (!argp9) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LexiconInterpreter_dawgAt" "', argument " "9"" of type '" "int &""'"); 
  }
  arg9 = reinterpret_cast< int * >(argp9);
  ((Quackle::LexiconInterpreter const *)arg1)->dawgAt((unsigned char const *)arg2,arg3,*arg4,*arg5,*arg6,*arg7,*arg8,*arg9);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LexiconInterpreter_versionNumber(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::LexiconInterpreter *arg1 = (Quackle::LexiconInterpreter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__LexiconInterpreter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LexiconInterpreter_versionNumber" "', argument " "1"" of type '" "Quackle::LexiconInterpreter const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::LexiconInterpreter * >(argp1);
  result = (int)((Quackle::LexiconInterpreter const *)arg1)->versionNumber();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_LexiconInterpreter(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::LexiconInterpreter *arg1 = (Quackle::LexiconInterpreter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__LexiconInterpreter, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LexiconInterpreter" "', argument " "1"" of type '" "Quackle::LexiconInterpreter *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::LexiconInterpreter * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *LexiconInterpreter_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Quackle__LexiconInterpreter, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_LexiconParameters(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::LexiconParameters *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "new_LexiconParameters", 0, 0, 0)) SWIG_fail;
  result = (Quackle::LexiconParameters *)new Quackle::LexiconParameters();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__LexiconParameters, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_LexiconParameters(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::LexiconParameters *arg1 = (Quackle::LexiconParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__LexiconParameters, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LexiconParameters" "', argument " "1"" of type '" "Quackle::LexiconParameters *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::LexiconParameters * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LexiconParameters_unloadAll(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::LexiconParameters *arg1 = (Quackle::LexiconParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__LexiconParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LexiconParameters_unloadAll" "', argument " "1"" of type '" "Quackle::LexiconParameters *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::LexiconParameters * >(argp1);
  (arg1)->unloadAll();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LexiconParameters_hasSomething(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::LexiconParameters *arg1 = (Quackle::LexiconParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__LexiconParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LexiconParameters_hasSomething" "', argument " "1"" of type '" "Quackle::LexiconParameters const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::LexiconParameters * >(argp1);
  result = (bool)((Quackle::LexiconParameters const *)arg1)->hasSomething();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LexiconParameters_loadDawg(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::LexiconParameters *arg1 = (Quackle::LexiconParameters *) 0 ;
  string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LexiconParameters_loadDawg", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__LexiconParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LexiconParameters_loadDawg" "', argument " "1"" of type '" "Quackle::LexiconParameters *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::LexiconParameters * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LexiconParameters_loadDawg" "', argument " "2"" of type '" "string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LexiconParameters_loadDawg" "', argument " "2"" of type '" "string const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->loadDawg((string const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LexiconParameters_unloadDawg(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::LexiconParameters *arg1 = (Quackle::LexiconParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__LexiconParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LexiconParameters_unloadDawg" "', argument " "1"" of type '" "Quackle::LexiconParameters *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::LexiconParameters * >(argp1);
  (arg1)->unloadDawg();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LexiconParameters_hasDawg(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::LexiconParameters *arg1 = (Quackle::LexiconParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__LexiconParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LexiconParameters_hasDawg" "', argument " "1"" of type '" "Quackle::LexiconParameters const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::LexiconParameters * >(argp1);
  result = (bool)((Quackle::LexiconParameters const *)arg1)->hasDawg();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LexiconParameters_dawgVersion(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::LexiconParameters *arg1 = (Quackle::LexiconParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__LexiconParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LexiconParameters_dawgVersion" "', argument " "1"" of type '" "Quackle::LexiconParameters const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::LexiconParameters * >(argp1);
  result = (int)((Quackle::LexiconParameters const *)arg1)->dawgVersion();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LexiconParameters_loadGaddag(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::LexiconParameters *arg1 = (Quackle::LexiconParameters *) 0 ;
  string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LexiconParameters_loadGaddag", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__LexiconParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LexiconParameters_loadGaddag" "', argument " "1"" of type '" "Quackle::LexiconParameters *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::LexiconParameters * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LexiconParameters_loadGaddag" "', argument " "2"" of type '" "string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LexiconParameters_loadGaddag" "', argument " "2"" of type '" "string const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->loadGaddag((string const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LexiconParameters_unloadGaddag(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::LexiconParameters *arg1 = (Quackle::LexiconParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__LexiconParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LexiconParameters_unloadGaddag" "', argument " "1"" of type '" "Quackle::LexiconParameters *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::LexiconParameters * >(argp1);
  (arg1)->unloadGaddag();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LexiconParameters_hasGaddag(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::LexiconParameters *arg1 = (Quackle::LexiconParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__LexiconParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LexiconParameters_hasGaddag" "', argument " "1"" of type '" "Quackle::LexiconParameters const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::LexiconParameters * >(argp1);
  result = (bool)((Quackle::LexiconParameters const *)arg1)->hasGaddag();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LexiconParameters_findDictionaryFile(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject *swig_obj[1] ;
  string result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LexiconParameters_findDictionaryFile" "', argument " "1"" of type '" "string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LexiconParameters_findDictionaryFile" "', argument " "1"" of type '" "string const &""'"); 
    }
    arg1 = ptr;
  }
  result = Quackle::LexiconParameters::findDictionaryFile((std::string const &)*arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LexiconParameters_hasUserDictionaryFile(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LexiconParameters_hasUserDictionaryFile" "', argument " "1"" of type '" "string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LexiconParameters_hasUserDictionaryFile" "', argument " "1"" of type '" "string const &""'"); 
    }
    arg1 = ptr;
  }
  result = (bool)Quackle::LexiconParameters::hasUserDictionaryFile((std::string const &)*arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LexiconParameters_lexiconName(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::LexiconParameters *arg1 = (Quackle::LexiconParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  string result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__LexiconParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LexiconParameters_lexiconName" "', argument " "1"" of type '" "Quackle::LexiconParameters const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::LexiconParameters * >(argp1);
  result = ((Quackle::LexiconParameters const *)arg1)->lexiconName();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LexiconParameters_setLexiconName(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::LexiconParameters *arg1 = (Quackle::LexiconParameters *) 0 ;
  string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LexiconParameters_setLexiconName", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__LexiconParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LexiconParameters_setLexiconName" "', argument " "1"" of type '" "Quackle::LexiconParameters *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::LexiconParameters * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LexiconParameters_setLexiconName" "', argument " "2"" of type '" "string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LexiconParameters_setLexiconName" "', argument " "2"" of type '" "string const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->setLexiconName((string const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LexiconParameters_dawgAt(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::LexiconParameters *arg1 = (Quackle::LexiconParameters *) 0 ;
  int arg2 ;
  unsigned int *arg3 = 0 ;
  Quackle::Letter *arg4 = 0 ;
  bool *arg5 = 0 ;
  bool *arg6 = 0 ;
  bool *arg7 = 0 ;
  int *arg8 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  PyObject *swig_obj[8] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LexiconParameters_dawgAt", 8, 8, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__LexiconParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LexiconParameters_dawgAt" "', argument " "1"" of type '" "Quackle::LexiconParameters const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::LexiconParameters * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LexiconParameters_dawgAt" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_unsigned_int,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LexiconParameters_dawgAt" "', argument " "3"" of type '" "unsigned int &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LexiconParameters_dawgAt" "', argument " "3"" of type '" "unsigned int &""'"); 
  }
  arg3 = reinterpret_cast< unsigned int * >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_unsigned_char,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "LexiconParameters_dawgAt" "', argument " "4"" of type '" "Quackle::Letter &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LexiconParameters_dawgAt" "', argument " "4"" of type '" "Quackle::Letter &""'"); 
  }
  arg4 = reinterpret_cast< Quackle::Letter * >(argp4);
  res5 = SWIG_ConvertPtr(swig_obj[4], &argp5, SWIGTYPE_p_bool,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "LexiconParameters_dawgAt" "', argument " "5"" of type '" "bool &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LexiconParameters_dawgAt" "', argument " "5"" of type '" "bool &""'"); 
  }
  arg5 = reinterpret_cast< bool * >(argp5);
  res6 = SWIG_ConvertPtr(swig_obj[5], &argp6, SWIGTYPE_p_bool,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "LexiconParameters_dawgAt" "', argument " "6"" of type '" "bool &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LexiconParameters_dawgAt" "', argument " "6"" of type '" "bool &""'"); 
  }
  arg6 = reinterpret_cast< bool * >(argp6);
  res7 = SWIG_ConvertPtr(swig_obj[6], &argp7, SWIGTYPE_p_bool,  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "LexiconParameters_dawgAt" "', argument " "7"" of type '" "bool &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LexiconParameters_dawgAt" "', argument " "7"" of type '" "bool &""'"); 
  }
  arg7 = reinterpret_cast< bool * >(argp7);
  res8 = SWIG_ConvertPtr(swig_obj[7], &argp8, SWIGTYPE_p_int,  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "LexiconParameters_dawgAt" "', argument " "8"" of type '" "int &""'"); 
  }
  if (!argp8) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LexiconParameters_dawgAt" "', argument " "8"" of type '" "int &""'"); 
  }
  arg8 = reinterpret_cast< int * >(argp8);
  ((Quackle::LexiconParameters const *)arg1)->dawgAt(arg2,*arg3,*arg4,*arg5,*arg6,*arg7,*arg8);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LexiconParameters_gaddagRoot(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::LexiconParameters *arg1 = (Quackle::LexiconParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Quackle::GaddagNode *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__LexiconParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LexiconParameters_gaddagRoot" "', argument " "1"" of type '" "Quackle::LexiconParameters const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::LexiconParameters * >(argp1);
  result = (Quackle::GaddagNode *)((Quackle::LexiconParameters const *)arg1)->gaddagRoot();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__GaddagNode, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LexiconParameters_hashString(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::LexiconParameters *arg1 = (Quackle::LexiconParameters *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  string result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LexiconParameters_hashString", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__LexiconParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LexiconParameters_hashString" "', argument " "1"" of type '" "Quackle::LexiconParameters const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::LexiconParameters * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LexiconParameters_hashString" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = ((Quackle::LexiconParameters const *)arg1)->hashString(arg2);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LexiconParameters_copyrightString(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::LexiconParameters *arg1 = (Quackle::LexiconParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  string result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__LexiconParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LexiconParameters_copyrightString" "', argument " "1"" of type '" "Quackle::LexiconParameters const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::LexiconParameters * >(argp1);
  result = ((Quackle::LexiconParameters const *)arg1)->copyrightString();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LexiconParameters_logoFileName(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::LexiconParameters *arg1 = (Quackle::LexiconParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  string result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__LexiconParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LexiconParameters_logoFileName" "', argument " "1"" of type '" "Quackle::LexiconParameters const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::LexiconParameters * >(argp1);
  result = ((Quackle::LexiconParameters const *)arg1)->logoFileName();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LexiconParameters_utf8Alphabet(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::LexiconParameters *arg1 = (Quackle::LexiconParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  vector< string > *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__LexiconParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LexiconParameters_utf8Alphabet" "', argument " "1"" of type '" "Quackle::LexiconParameters const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::LexiconParameters * >(argp1);
  result = (vector< string > *) &((Quackle::LexiconParameters const *)arg1)->utf8Alphabet();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *LexiconParameters_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Quackle__LexiconParameters, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *LexiconParameters_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_Preendgame(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Preendgame *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "new_Preendgame", 0, 0, 0)) SWIG_fail;
  result = (Quackle::Preendgame *)new Quackle::Preendgame();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__Preendgame, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Preendgame(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Preendgame *arg1 = (Quackle::Preendgame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Preendgame, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Preendgame" "', argument " "1"" of type '" "Quackle::Preendgame *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Preendgame * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Preendgame_move(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Preendgame *arg1 = (Quackle::Preendgame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Quackle::Move result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Preendgame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Preendgame_move" "', argument " "1"" of type '" "Quackle::Preendgame *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Preendgame * >(argp1);
  result = (arg1)->move();
  resultobj = SWIG_NewPointerObj((new Quackle::Move(result)), SWIGTYPE_p_Quackle__Move, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Preendgame_moves(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Preendgame *arg1 = (Quackle::Preendgame *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  Quackle::MoveList result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Preendgame_moves", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Preendgame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Preendgame_moves" "', argument " "1"" of type '" "Quackle::Preendgame *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Preendgame * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Preendgame_moves" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (arg1)->moves(arg2);
  resultobj = SWIG_NewPointerObj((new Quackle::MoveList(result)), SWIGTYPE_p_Quackle__MoveList, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Preendgame_clone(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Preendgame *arg1 = (Quackle::Preendgame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Quackle::ComputerPlayer *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Preendgame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Preendgame_clone" "', argument " "1"" of type '" "Quackle::Preendgame *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Preendgame * >(argp1);
  result = (Quackle::ComputerPlayer *)(arg1)->clone();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__ComputerPlayer, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Preendgame_isUserVisible(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Preendgame *arg1 = (Quackle::Preendgame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Preendgame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Preendgame_isUserVisible" "', argument " "1"" of type '" "Quackle::Preendgame const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Preendgame * >(argp1);
  result = (bool)((Quackle::Preendgame const *)arg1)->isUserVisible();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Preendgame_isSlow(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Preendgame *arg1 = (Quackle::Preendgame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Preendgame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Preendgame_isSlow" "', argument " "1"" of type '" "Quackle::Preendgame const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Preendgame * >(argp1);
  result = (bool)((Quackle::Preendgame const *)arg1)->isSlow();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Preendgame_maximumTilesInBagToEngage(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Preendgame_maximumTilesInBagToEngage", 0, 0, 0)) SWIG_fail;
  result = (int)Quackle::Preendgame::maximumTilesInBagToEngage();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Preendgame_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Quackle__Preendgame, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Preendgame_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_Reporter(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Reporter *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "new_Reporter", 0, 0, 0)) SWIG_fail;
  result = (Quackle::Reporter *)new Quackle::Reporter();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__Reporter, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Reporter_reportPosition(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::GamePosition *arg1 = 0 ;
  Quackle::ComputerPlayer *arg2 = (Quackle::ComputerPlayer *) 0 ;
  UVString *arg3 = (UVString *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Reporter_reportPosition", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_Quackle__GamePosition,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reporter_reportPosition" "', argument " "1"" of type '" "Quackle::GamePosition const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Reporter_reportPosition" "', argument " "1"" of type '" "Quackle::GamePosition const &""'"); 
  }
  arg1 = reinterpret_cast< Quackle::GamePosition * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_Quackle__ComputerPlayer, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Reporter_reportPosition" "', argument " "2"" of type '" "Quackle::ComputerPlayer *""'"); 
  }
  arg2 = reinterpret_cast< Quackle::ComputerPlayer * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_std__string, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Reporter_reportPosition" "', argument " "3"" of type '" "UVString *""'"); 
  }
  arg3 = reinterpret_cast< UVString * >(argp3);
  Quackle::Reporter::reportPosition((Quackle::GamePosition const &)*arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Reporter_reportGameStatistics(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Game *arg1 = 0 ;
  UVString *arg2 = (UVString *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Reporter_reportGameStatistics", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_Quackle__Game,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reporter_reportGameStatistics" "', argument " "1"" of type '" "Quackle::Game const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Reporter_reportGameStatistics" "', argument " "1"" of type '" "Quackle::Game const &""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Game * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_std__string, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Reporter_reportGameStatistics" "', argument " "2"" of type '" "UVString *""'"); 
  }
  arg2 = reinterpret_cast< UVString * >(argp2);
  Quackle::Reporter::reportGameStatistics((Quackle::Game const &)*arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Reporter_reportHeader(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Game *arg1 = 0 ;
  UVString *arg2 = (UVString *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Reporter_reportHeader", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_Quackle__Game,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reporter_reportHeader" "', argument " "1"" of type '" "Quackle::Game const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Reporter_reportHeader" "', argument " "1"" of type '" "Quackle::Game const &""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Game * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_std__string, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Reporter_reportHeader" "', argument " "2"" of type '" "UVString *""'"); 
  }
  arg2 = reinterpret_cast< UVString * >(argp2);
  Quackle::Reporter::reportHeader((Quackle::Game const &)*arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Reporter_reportGame(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Game *arg1 = 0 ;
  Quackle::ComputerPlayer *arg2 = (Quackle::ComputerPlayer *) 0 ;
  UVString *arg3 = (UVString *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Reporter_reportGame", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_Quackle__Game,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reporter_reportGame" "', argument " "1"" of type '" "Quackle::Game const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Reporter_reportGame" "', argument " "1"" of type '" "Quackle::Game const &""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Game * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_Quackle__ComputerPlayer, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Reporter_reportGame" "', argument " "2"" of type '" "Quackle::ComputerPlayer *""'"); 
  }
  arg2 = reinterpret_cast< Quackle::ComputerPlayer * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_std__string, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Reporter_reportGame" "', argument " "3"" of type '" "UVString *""'"); 
  }
  arg3 = reinterpret_cast< UVString * >(argp3);
  Quackle::Reporter::reportGame((Quackle::Game const &)*arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Reporter(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Reporter *arg1 = (Quackle::Reporter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Reporter, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Reporter" "', argument " "1"" of type '" "Quackle::Reporter *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Reporter * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Reporter_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Quackle__Reporter, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Reporter_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_Resolvent(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Resolvent *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "new_Resolvent", 0, 0, 0)) SWIG_fail;
  result = (Quackle::Resolvent *)new Quackle::Resolvent();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__Resolvent, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Resolvent(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Resolvent *arg1 = (Quackle::Resolvent *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Resolvent, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Resolvent" "', argument " "1"" of type '" "Quackle::Resolvent *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Resolvent * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Resolvent_move(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Resolvent *arg1 = (Quackle::Resolvent *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Quackle::Move result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Resolvent, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Resolvent_move" "', argument " "1"" of type '" "Quackle::Resolvent *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Resolvent * >(argp1);
  result = (arg1)->move();
  resultobj = SWIG_NewPointerObj((new Quackle::Move(result)), SWIGTYPE_p_Quackle__Move, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Resolvent_moves(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Resolvent *arg1 = (Quackle::Resolvent *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  Quackle::MoveList result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Resolvent_moves", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Resolvent, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Resolvent_moves" "', argument " "1"" of type '" "Quackle::Resolvent *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Resolvent * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Resolvent_moves" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (arg1)->moves(arg2);
  resultobj = SWIG_NewPointerObj((new Quackle::MoveList(result)), SWIGTYPE_p_Quackle__MoveList, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Resolvent_clone(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Resolvent *arg1 = (Quackle::Resolvent *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Quackle::ComputerPlayer *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Resolvent, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Resolvent_clone" "', argument " "1"" of type '" "Quackle::Resolvent *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Resolvent * >(argp1);
  result = (Quackle::ComputerPlayer *)(arg1)->clone();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__ComputerPlayer, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Resolvent_isSlow(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Resolvent *arg1 = (Quackle::Resolvent *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Resolvent, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Resolvent_isSlow" "', argument " "1"" of type '" "Quackle::Resolvent const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Resolvent * >(argp1);
  result = (bool)((Quackle::Resolvent const *)arg1)->isSlow();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Resolvent_isUserVisible(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Resolvent *arg1 = (Quackle::Resolvent *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__Resolvent, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Resolvent_isUserVisible" "', argument " "1"" of type '" "Quackle::Resolvent const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Resolvent * >(argp1);
  result = (bool)((Quackle::Resolvent const *)arg1)->isUserVisible();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Resolvent_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Quackle__Resolvent, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Resolvent_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_InferringPlayer(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::InferringPlayer *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "new_InferringPlayer", 0, 0, 0)) SWIG_fail;
  result = (Quackle::InferringPlayer *)new Quackle::InferringPlayer();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__InferringPlayer, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_InferringPlayer(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::InferringPlayer *arg1 = (Quackle::InferringPlayer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__InferringPlayer, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_InferringPlayer" "', argument " "1"" of type '" "Quackle::InferringPlayer *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::InferringPlayer * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InferringPlayer_clone(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::InferringPlayer *arg1 = (Quackle::InferringPlayer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Quackle::ComputerPlayer *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__InferringPlayer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InferringPlayer_clone" "', argument " "1"" of type '" "Quackle::InferringPlayer *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::InferringPlayer * >(argp1);
  result = (Quackle::ComputerPlayer *)(arg1)->clone();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__ComputerPlayer, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *InferringPlayer_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Quackle__InferringPlayer, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *InferringPlayer_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_TorontoPlayer(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::TorontoPlayer *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "new_TorontoPlayer", 0, 0, 0)) SWIG_fail;
  result = (Quackle::TorontoPlayer *)new Quackle::TorontoPlayer();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__TorontoPlayer, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_TorontoPlayer(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::TorontoPlayer *arg1 = (Quackle::TorontoPlayer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__TorontoPlayer, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TorontoPlayer" "', argument " "1"" of type '" "Quackle::TorontoPlayer *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::TorontoPlayer * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TorontoPlayer_clone(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::TorontoPlayer *arg1 = (Quackle::TorontoPlayer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Quackle::ComputerPlayer *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__TorontoPlayer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TorontoPlayer_clone" "', argument " "1"" of type '" "Quackle::TorontoPlayer *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::TorontoPlayer * >(argp1);
  result = (Quackle::ComputerPlayer *)(arg1)->clone();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__ComputerPlayer, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *TorontoPlayer_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Quackle__TorontoPlayer, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *TorontoPlayer_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_FiveMinutePlayer(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::FiveMinutePlayer *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "new_FiveMinutePlayer", 0, 0, 0)) SWIG_fail;
  result = (Quackle::FiveMinutePlayer *)new Quackle::FiveMinutePlayer();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__FiveMinutePlayer, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_FiveMinutePlayer(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::FiveMinutePlayer *arg1 = (Quackle::FiveMinutePlayer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__FiveMinutePlayer, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_FiveMinutePlayer" "', argument " "1"" of type '" "Quackle::FiveMinutePlayer *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::FiveMinutePlayer * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FiveMinutePlayer_clone(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::FiveMinutePlayer *arg1 = (Quackle::FiveMinutePlayer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Quackle::ComputerPlayer *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__FiveMinutePlayer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FiveMinutePlayer_clone" "', argument " "1"" of type '" "Quackle::FiveMinutePlayer *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::FiveMinutePlayer * >(argp1);
  result = (Quackle::ComputerPlayer *)(arg1)->clone();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__ComputerPlayer, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *FiveMinutePlayer_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Quackle__FiveMinutePlayer, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *FiveMinutePlayer_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_TwentySecondPlayer(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::TwentySecondPlayer *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "new_TwentySecondPlayer", 0, 0, 0)) SWIG_fail;
  result = (Quackle::TwentySecondPlayer *)new Quackle::TwentySecondPlayer();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__TwentySecondPlayer, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_TwentySecondPlayer(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::TwentySecondPlayer *arg1 = (Quackle::TwentySecondPlayer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__TwentySecondPlayer, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TwentySecondPlayer" "', argument " "1"" of type '" "Quackle::TwentySecondPlayer *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::TwentySecondPlayer * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TwentySecondPlayer_clone(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::TwentySecondPlayer *arg1 = (Quackle::TwentySecondPlayer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Quackle::ComputerPlayer *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__TwentySecondPlayer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TwentySecondPlayer_clone" "', argument " "1"" of type '" "Quackle::TwentySecondPlayer *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::TwentySecondPlayer * >(argp1);
  result = (Quackle::ComputerPlayer *)(arg1)->clone();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__ComputerPlayer, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *TwentySecondPlayer_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Quackle__TwentySecondPlayer, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *TwentySecondPlayer_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_StrategyParameters(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::StrategyParameters *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "new_StrategyParameters", 0, 0, 0)) SWIG_fail;
  result = (Quackle::StrategyParameters *)new Quackle::StrategyParameters();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__StrategyParameters, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StrategyParameters_initialize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::StrategyParameters *arg1 = (Quackle::StrategyParameters *) 0 ;
  string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "StrategyParameters_initialize", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__StrategyParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrategyParameters_initialize" "', argument " "1"" of type '" "Quackle::StrategyParameters *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::StrategyParameters * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StrategyParameters_initialize" "', argument " "2"" of type '" "string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StrategyParameters_initialize" "', argument " "2"" of type '" "string const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->initialize((string const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StrategyParameters_hasSyn2(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::StrategyParameters *arg1 = (Quackle::StrategyParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__StrategyParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrategyParameters_hasSyn2" "', argument " "1"" of type '" "Quackle::StrategyParameters const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::StrategyParameters * >(argp1);
  result = (bool)((Quackle::StrategyParameters const *)arg1)->hasSyn2();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StrategyParameters_hasWorths(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::StrategyParameters *arg1 = (Quackle::StrategyParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__StrategyParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrategyParameters_hasWorths" "', argument " "1"" of type '" "Quackle::StrategyParameters const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::StrategyParameters * >(argp1);
  result = (bool)((Quackle::StrategyParameters const *)arg1)->hasWorths();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StrategyParameters_hasVcPlace(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::StrategyParameters *arg1 = (Quackle::StrategyParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__StrategyParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrategyParameters_hasVcPlace" "', argument " "1"" of type '" "Quackle::StrategyParameters const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::StrategyParameters * >(argp1);
  result = (bool)((Quackle::StrategyParameters const *)arg1)->hasVcPlace();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StrategyParameters_hasBogowin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::StrategyParameters *arg1 = (Quackle::StrategyParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__StrategyParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrategyParameters_hasBogowin" "', argument " "1"" of type '" "Quackle::StrategyParameters const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::StrategyParameters * >(argp1);
  result = (bool)((Quackle::StrategyParameters const *)arg1)->hasBogowin();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StrategyParameters_hasSuperleaves(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::StrategyParameters *arg1 = (Quackle::StrategyParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__StrategyParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrategyParameters_hasSuperleaves" "', argument " "1"" of type '" "Quackle::StrategyParameters const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::StrategyParameters * >(argp1);
  result = (bool)((Quackle::StrategyParameters const *)arg1)->hasSuperleaves();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StrategyParameters_syn2(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::StrategyParameters *arg1 = (Quackle::StrategyParameters *) 0 ;
  Quackle::Letter arg2 ;
  Quackle::Letter arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  unsigned char val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  double result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "StrategyParameters_syn2", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__StrategyParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrategyParameters_syn2" "', argument " "1"" of type '" "Quackle::StrategyParameters const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::StrategyParameters * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StrategyParameters_syn2" "', argument " "2"" of type '" "Quackle::Letter""'");
  } 
  arg2 = static_cast< Quackle::Letter >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_char(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StrategyParameters_syn2" "', argument " "3"" of type '" "Quackle::Letter""'");
  } 
  arg3 = static_cast< Quackle::Letter >(val3);
  result = (double)((Quackle::StrategyParameters const *)arg1)->syn2(arg2,arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StrategyParameters_tileWorth(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::StrategyParameters *arg1 = (Quackle::StrategyParameters *) 0 ;
  Quackle::Letter arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "StrategyParameters_tileWorth", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__StrategyParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrategyParameters_tileWorth" "', argument " "1"" of type '" "Quackle::StrategyParameters const *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::StrategyParameters * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StrategyParameters_tileWorth" "', argument " "2"" of type '" "Quackle::Letter""'");
  } 
  arg2 = static_cast< Quackle::Letter >(val2);
  result = (double)((Quackle::StrategyParameters const *)arg1)->tileWorth(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StrategyParameters_vcPlace(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::StrategyParameters *arg1 = (Quackle::StrategyParameters *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  double result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "StrategyParameters_vcPlace", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__StrategyParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrategyParameters_vcPlace" "', argument " "1"" of type '" "Quackle::StrategyParameters *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::StrategyParameters * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StrategyParameters_vcPlace" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StrategyParameters_vcPlace" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "StrategyParameters_vcPlace" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  result = (double)(arg1)->vcPlace(arg2,arg3,arg4);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StrategyParameters_bogowin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::StrategyParameters *arg1 = (Quackle::StrategyParameters *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  double result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "StrategyParameters_bogowin", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__StrategyParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrategyParameters_bogowin" "', argument " "1"" of type '" "Quackle::StrategyParameters *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::StrategyParameters * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StrategyParameters_bogowin" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StrategyParameters_bogowin" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "StrategyParameters_bogowin" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  result = (double)(arg1)->bogowin(arg2,arg3,arg4);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StrategyParameters_superleave(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::StrategyParameters *arg1 = (Quackle::StrategyParameters *) 0 ;
  Quackle::LetterString arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "StrategyParameters_superleave", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__StrategyParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrategyParameters_superleave" "', argument " "1"" of type '" "Quackle::StrategyParameters *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::StrategyParameters * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__FixedLengthString,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StrategyParameters_superleave" "', argument " "2"" of type '" "Quackle::LetterString""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StrategyParameters_superleave" "', argument " "2"" of type '" "Quackle::LetterString""'");
    } else {
      Quackle::LetterString * temp = reinterpret_cast< Quackle::LetterString * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (double)(arg1)->superleave(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_StrategyParameters(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::StrategyParameters *arg1 = (Quackle::StrategyParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Quackle__StrategyParameters, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_StrategyParameters" "', argument " "1"" of type '" "Quackle::StrategyParameters *""'"); 
  }
  arg1 = reinterpret_cast< Quackle::StrategyParameters * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *StrategyParameters_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Quackle__StrategyParameters, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *StrategyParameters_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_FlexibleAlphabetParameters(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  QuackleIO::FlexibleAlphabetParameters *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "new_FlexibleAlphabetParameters", 0, 0, 0)) SWIG_fail;
  result = (QuackleIO::FlexibleAlphabetParameters *)new QuackleIO::FlexibleAlphabetParameters();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_QuackleIO__FlexibleAlphabetParameters, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FlexibleAlphabetParameters_load(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  QuackleIO::FlexibleAlphabetParameters *arg1 = (QuackleIO::FlexibleAlphabetParameters *) 0 ;
  QString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "FlexibleAlphabetParameters_load", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_QuackleIO__FlexibleAlphabetParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FlexibleAlphabetParameters_load" "', argument " "1"" of type '" "QuackleIO::FlexibleAlphabetParameters *""'"); 
  }
  arg1 = reinterpret_cast< QuackleIO::FlexibleAlphabetParameters * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_QString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FlexibleAlphabetParameters_load" "', argument " "2"" of type '" "QString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FlexibleAlphabetParameters_load" "', argument " "2"" of type '" "QString const &""'"); 
  }
  arg2 = reinterpret_cast< QString * >(argp2);
  result = (bool)(arg1)->load((QString const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_FlexibleAlphabetParameters(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  QuackleIO::FlexibleAlphabetParameters *arg1 = (QuackleIO::FlexibleAlphabetParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_QuackleIO__FlexibleAlphabetParameters, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_FlexibleAlphabetParameters" "', argument " "1"" of type '" "QuackleIO::FlexibleAlphabetParameters *""'"); 
  }
  arg1 = reinterpret_cast< QuackleIO::FlexibleAlphabetParameters * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *FlexibleAlphabetParameters_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_QuackleIO__FlexibleAlphabetParameters, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *FlexibleAlphabetParameters_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_UtilSettings(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  QuackleIO::UtilSettings *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "new_UtilSettings", 0, 0, 0)) SWIG_fail;
  result = (QuackleIO::UtilSettings *)new QuackleIO::UtilSettings();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_QuackleIO__UtilSettings, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UtilSettings__self(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  QuackleIO::UtilSettings *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "UtilSettings__self", 0, 0, 0)) SWIG_fail;
  result = (QuackleIO::UtilSettings *)QuackleIO::UtilSettings::self();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_QuackleIO__UtilSettings, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UtilSettings_octothorpBritish_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  QuackleIO::UtilSettings *arg1 = (QuackleIO::UtilSettings *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "UtilSettings_octothorpBritish_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_QuackleIO__UtilSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UtilSettings_octothorpBritish_set" "', argument " "1"" of type '" "QuackleIO::UtilSettings *""'"); 
  }
  arg1 = reinterpret_cast< QuackleIO::UtilSettings * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UtilSettings_octothorpBritish_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->octothorpBritish = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UtilSettings_octothorpBritish_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  QuackleIO::UtilSettings *arg1 = (QuackleIO::UtilSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_QuackleIO__UtilSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UtilSettings_octothorpBritish_get" "', argument " "1"" of type '" "QuackleIO::UtilSettings *""'"); 
  }
  arg1 = reinterpret_cast< QuackleIO::UtilSettings * >(argp1);
  result = (bool) ((arg1)->octothorpBritish);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UtilSettings_vowelFirst_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  QuackleIO::UtilSettings *arg1 = (QuackleIO::UtilSettings *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "UtilSettings_vowelFirst_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_QuackleIO__UtilSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UtilSettings_vowelFirst_set" "', argument " "1"" of type '" "QuackleIO::UtilSettings *""'"); 
  }
  arg1 = reinterpret_cast< QuackleIO::UtilSettings * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UtilSettings_vowelFirst_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->vowelFirst = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UtilSettings_vowelFirst_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  QuackleIO::UtilSettings *arg1 = (QuackleIO::UtilSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_QuackleIO__UtilSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UtilSettings_vowelFirst_get" "', argument " "1"" of type '" "QuackleIO::UtilSettings *""'"); 
  }
  arg1 = reinterpret_cast< QuackleIO::UtilSettings * >(argp1);
  result = (bool) ((arg1)->vowelFirst);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UtilSettings_scoreInvalidAsZero_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  QuackleIO::UtilSettings *arg1 = (QuackleIO::UtilSettings *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "UtilSettings_scoreInvalidAsZero_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_QuackleIO__UtilSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UtilSettings_scoreInvalidAsZero_set" "', argument " "1"" of type '" "QuackleIO::UtilSettings *""'"); 
  }
  arg1 = reinterpret_cast< QuackleIO::UtilSettings * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UtilSettings_scoreInvalidAsZero_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->scoreInvalidAsZero = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UtilSettings_scoreInvalidAsZero_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  QuackleIO::UtilSettings *arg1 = (QuackleIO::UtilSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_QuackleIO__UtilSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UtilSettings_scoreInvalidAsZero_get" "', argument " "1"" of type '" "QuackleIO::UtilSettings *""'"); 
  }
  arg1 = reinterpret_cast< QuackleIO::UtilSettings * >(argp1);
  result = (bool) ((arg1)->scoreInvalidAsZero);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_UtilSettings(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  QuackleIO::UtilSettings *arg1 = (QuackleIO::UtilSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_QuackleIO__UtilSettings, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_UtilSettings" "', argument " "1"" of type '" "QuackleIO::UtilSettings *""'"); 
  }
  arg1 = reinterpret_cast< QuackleIO::UtilSettings * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *UtilSettings_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_QuackleIO__UtilSettings, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *UtilSettings_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_Util_qstringToString(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  QString *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  UVString result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_QString,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Util_qstringToString" "', argument " "1"" of type '" "QString const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Util_qstringToString" "', argument " "1"" of type '" "QString const &""'"); 
  }
  arg1 = reinterpret_cast< QString * >(argp1);
  result = QuackleIO::Util::qstringToString((QString const &)*arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Util_encode(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  QString *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Quackle::LetterString result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_QString,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Util_encode" "', argument " "1"" of type '" "QString const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Util_encode" "', argument " "1"" of type '" "QString const &""'"); 
  }
  arg1 = reinterpret_cast< QString * >(argp1);
  result = QuackleIO::Util::encode((QString const &)*arg1);
  resultobj = SWIG_NewPointerObj((new Quackle::LetterString(result)), SWIGTYPE_p_Quackle__FixedLengthString, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Util_nonBlankEncode(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  QString *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Quackle::LetterString result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_QString,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Util_nonBlankEncode" "', argument " "1"" of type '" "QString const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Util_nonBlankEncode" "', argument " "1"" of type '" "QString const &""'"); 
  }
  arg1 = reinterpret_cast< QString * >(argp1);
  result = QuackleIO::Util::nonBlankEncode((QString const &)*arg1);
  resultobj = SWIG_NewPointerObj((new Quackle::LetterString(result)), SWIGTYPE_p_Quackle__FixedLengthString, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Util_uvStringToQString(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  UVString *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject *swig_obj[1] ;
  QString result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Util_uvStringToQString" "', argument " "1"" of type '" "UVString const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Util_uvStringToQString" "', argument " "1"" of type '" "UVString const &""'"); 
    }
    arg1 = ptr;
  }
  result = QuackleIO::Util::uvStringToQString((std::string const &)*arg1);
  resultobj = SWIG_NewPointerObj((new QString(result)), SWIGTYPE_p_QString, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Util_letterStringToQString(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::LetterString *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  QString result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_Quackle__FixedLengthString,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Util_letterStringToQString" "', argument " "1"" of type '" "Quackle::LetterString const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Util_letterStringToQString" "', argument " "1"" of type '" "Quackle::LetterString const &""'"); 
  }
  arg1 = reinterpret_cast< Quackle::LetterString * >(argp1);
  result = QuackleIO::Util::letterStringToQString((Quackle::FixedLengthString const &)*arg1);
  resultobj = SWIG_NewPointerObj((new QString(result)), SWIGTYPE_p_QString, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Util_letterToQString(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Letter *arg1 = 0 ;
  Quackle::Letter temp1 ;
  unsigned char val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  QString result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_unsigned_SS_char(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Util_letterToQString" "', argument " "1"" of type '" "Quackle::Letter""'");
  } 
  temp1 = static_cast< Quackle::Letter >(val1);
  arg1 = &temp1;
  result = QuackleIO::Util::letterToQString((unsigned char const &)*arg1);
  resultobj = SWIG_NewPointerObj((new QString(result)), SWIGTYPE_p_QString, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Util_qstringToStdString(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  QString *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  string result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_QString,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Util_qstringToStdString" "', argument " "1"" of type '" "QString const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Util_qstringToStdString" "', argument " "1"" of type '" "QString const &""'"); 
  }
  arg1 = reinterpret_cast< QString * >(argp1);
  result = QuackleIO::Util::qstringToStdString((QString const &)*arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Util_stdStringToQString(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject *swig_obj[1] ;
  QString result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Util_stdStringToQString" "', argument " "1"" of type '" "string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Util_stdStringToQString" "', argument " "1"" of type '" "string const &""'"); 
    }
    arg1 = ptr;
  }
  result = QuackleIO::Util::stdStringToQString((std::string const &)*arg1);
  resultobj = SWIG_NewPointerObj((new QString(result)), SWIGTYPE_p_QString, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Util_moveToDetailedString(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Move *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  QString result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_Quackle__Move,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Util_moveToDetailedString" "', argument " "1"" of type '" "Quackle::Move const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Util_moveToDetailedString" "', argument " "1"" of type '" "Quackle::Move const &""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Move * >(argp1);
  result = QuackleIO::Util::moveToDetailedString((Quackle::Move const &)*arg1);
  resultobj = SWIG_NewPointerObj((new QString(result)), SWIGTYPE_p_QString, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Util_moveToSensitiveString(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::Move *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  QString result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_Quackle__Move,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Util_moveToSensitiveString" "', argument " "1"" of type '" "Quackle::Move const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Util_moveToSensitiveString" "', argument " "1"" of type '" "Quackle::Move const &""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Move * >(argp1);
  result = QuackleIO::Util::moveToSensitiveString((Quackle::Move const &)*arg1);
  resultobj = SWIG_NewPointerObj((new QString(result)), SWIGTYPE_p_QString, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Util_alphagram__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Quackle::LetterString *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Quackle::LetterString result;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_Quackle__FixedLengthString,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Util_alphagram" "', argument " "1"" of type '" "Quackle::LetterString const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Util_alphagram" "', argument " "1"" of type '" "Quackle::LetterString const &""'"); 
  }
  arg1 = reinterpret_cast< Quackle::LetterString * >(argp1);
  result = QuackleIO::Util::alphagram((Quackle::FixedLengthString const &)*arg1);
  resultobj = SWIG_NewPointerObj((new Quackle::LetterString(result)), SWIGTYPE_p_Quackle__FixedLengthString, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Util_alphagram__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  QString *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  QString result;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_QString,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Util_alphagram" "', argument " "1"" of type '" "QString const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Util_alphagram" "', argument " "1"" of type '" "QString const &""'"); 
  }
  arg1 = reinterpret_cast< QString * >(argp1);
  result = QuackleIO::Util::alphagram((QString const &)*arg1);
  resultobj = SWIG_NewPointerObj((new QString(result)), SWIGTYPE_p_QString, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Util_alphagram(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Util_alphagram", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Quackle__FixedLengthString, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Util_alphagram__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_QString, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Util_alphagram__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Util_alphagram'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    QuackleIO::Util::alphagram(Quackle::LetterString const &)\n"
    "    QuackleIO::Util::alphagram(QString const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Util_arrangeLettersForUser__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Quackle::LetterString *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Quackle::LetterString result;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_Quackle__FixedLengthString,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Util_arrangeLettersForUser" "', argument " "1"" of type '" "Quackle::LetterString const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Util_arrangeLettersForUser" "', argument " "1"" of type '" "Quackle::LetterString const &""'"); 
  }
  arg1 = reinterpret_cast< Quackle::LetterString * >(argp1);
  result = QuackleIO::Util::arrangeLettersForUser((Quackle::FixedLengthString const &)*arg1);
  resultobj = SWIG_NewPointerObj((new Quackle::LetterString(result)), SWIGTYPE_p_Quackle__FixedLengthString, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Util_arrangeLettersForUser__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Quackle::Rack *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Quackle::LetterString result;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_Quackle__Rack,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Util_arrangeLettersForUser" "', argument " "1"" of type '" "Quackle::Rack const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Util_arrangeLettersForUser" "', argument " "1"" of type '" "Quackle::Rack const &""'"); 
  }
  arg1 = reinterpret_cast< Quackle::Rack * >(argp1);
  result = QuackleIO::Util::arrangeLettersForUser((Quackle::Rack const &)*arg1);
  resultobj = SWIG_NewPointerObj((new Quackle::LetterString(result)), SWIGTYPE_p_Quackle__FixedLengthString, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Util_arrangeLettersForUser__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  QString *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  QString result;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_QString,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Util_arrangeLettersForUser" "', argument " "1"" of type '" "QString const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Util_arrangeLettersForUser" "', argument " "1"" of type '" "QString const &""'"); 
  }
  arg1 = reinterpret_cast< QString * >(argp1);
  result = QuackleIO::Util::arrangeLettersForUser((QString const &)*arg1);
  resultobj = SWIG_NewPointerObj((new QString(result)), SWIGTYPE_p_QString, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Util_arrangeLettersForUser(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Util_arrangeLettersForUser", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Quackle__FixedLengthString, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Util_arrangeLettersForUser__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Quackle__Rack, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Util_arrangeLettersForUser__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_QString, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Util_arrangeLettersForUser__SWIG_2(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Util_arrangeLettersForUser'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    QuackleIO::Util::arrangeLettersForUser(Quackle::LetterString const &)\n"
    "    QuackleIO::Util::arrangeLettersForUser(Quackle::Rack const &)\n"
    "    QuackleIO::Util::arrangeLettersForUser(QString const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Util_makeRack(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  QString *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Quackle::Rack result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_QString,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Util_makeRack" "', argument " "1"" of type '" "QString const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Util_makeRack" "', argument " "1"" of type '" "QString const &""'"); 
  }
  arg1 = reinterpret_cast< QString * >(argp1);
  result = QuackleIO::Util::makeRack((QString const &)*arg1);
  resultobj = SWIG_NewPointerObj((new Quackle::Rack(result)), SWIGTYPE_p_Quackle__Rack, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Util_sanitizeUserVisibleLetterString(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  QString *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  QString result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_QString,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Util_sanitizeUserVisibleLetterString" "', argument " "1"" of type '" "QString const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Util_sanitizeUserVisibleLetterString" "', argument " "1"" of type '" "QString const &""'"); 
  }
  arg1 = reinterpret_cast< QString * >(argp1);
  result = QuackleIO::Util::sanitizeUserVisibleLetterString((QString const &)*arg1);
  resultobj = SWIG_NewPointerObj((new QString(result)), SWIGTYPE_p_QString, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Util_symbolsFor(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Quackle::LetterString *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  QString result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_Quackle__FixedLengthString,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Util_symbolsFor" "', argument " "1"" of type '" "Quackle::LetterString const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Util_symbolsFor" "', argument " "1"" of type '" "Quackle::LetterString const &""'"); 
  }
  arg1 = reinterpret_cast< Quackle::LetterString * >(argp1);
  result = QuackleIO::Util::symbolsFor((Quackle::FixedLengthString const &)*arg1);
  resultobj = SWIG_NewPointerObj((new QString(result)), SWIGTYPE_p_QString, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Util(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  QuackleIO::Util *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "new_Util", 0, 0, 0)) SWIG_fail;
  result = (QuackleIO::Util *)new QuackleIO::Util();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_QuackleIO__Util, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Util(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  QuackleIO::Util *arg1 = (QuackleIO::Util *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_QuackleIO__Util, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Util" "', argument " "1"" of type '" "QuackleIO::Util *""'"); 
  }
  arg1 = reinterpret_cast< QuackleIO::Util * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Util_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_QuackleIO__Util, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Util_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_delete_Logania(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  QuackleIO::Logania *arg1 = (QuackleIO::Logania *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_QuackleIO__Logania, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Logania" "', argument " "1"" of type '" "QuackleIO::Logania *""'"); 
  }
  arg1 = reinterpret_cast< QuackleIO::Logania * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Logania_read(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  QuackleIO::Logania *arg1 = (QuackleIO::Logania *) 0 ;
  QTextStream *arg2 = 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  Quackle::Game *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Logania_read", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_QuackleIO__Logania, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Logania_read" "', argument " "1"" of type '" "QuackleIO::Logania *""'"); 
  }
  arg1 = reinterpret_cast< QuackleIO::Logania * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_QTextStream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Logania_read" "', argument " "2"" of type '" "QTextStream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Logania_read" "', argument " "2"" of type '" "QTextStream &""'"); 
  }
  arg2 = reinterpret_cast< QTextStream * >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Logania_read" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (Quackle::Game *)(arg1)->read(*arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__Game, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Logania_canRead(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  QuackleIO::Logania *arg1 = (QuackleIO::Logania *) 0 ;
  QTextStream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Logania_canRead", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_QuackleIO__Logania, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Logania_canRead" "', argument " "1"" of type '" "QuackleIO::Logania const *""'"); 
  }
  arg1 = reinterpret_cast< QuackleIO::Logania * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_QTextStream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Logania_canRead" "', argument " "2"" of type '" "QTextStream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Logania_canRead" "', argument " "2"" of type '" "QTextStream &""'"); 
  }
  arg2 = reinterpret_cast< QTextStream * >(argp2);
  result = (bool)((QuackleIO::Logania const *)arg1)->canRead(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Logania_write(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  QuackleIO::Logania *arg1 = (QuackleIO::Logania *) 0 ;
  Quackle::Game *arg2 = 0 ;
  QTextStream *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Logania_write", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_QuackleIO__Logania, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Logania_write" "', argument " "1"" of type '" "QuackleIO::Logania *""'"); 
  }
  arg1 = reinterpret_cast< QuackleIO::Logania * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__Game,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Logania_write" "', argument " "2"" of type '" "Quackle::Game const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Logania_write" "', argument " "2"" of type '" "Quackle::Game const &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::Game * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_QTextStream,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Logania_write" "', argument " "3"" of type '" "QTextStream &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Logania_write" "', argument " "3"" of type '" "QTextStream &""'"); 
  }
  arg3 = reinterpret_cast< QTextStream * >(argp3);
  (arg1)->write((Quackle::Game const &)*arg2,*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Logania_filter(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  QuackleIO::Logania *arg1 = (QuackleIO::Logania *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  QString result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_QuackleIO__Logania, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Logania_filter" "', argument " "1"" of type '" "QuackleIO::Logania const *""'"); 
  }
  arg1 = reinterpret_cast< QuackleIO::Logania * >(argp1);
  result = ((QuackleIO::Logania const *)arg1)->filter();
  resultobj = SWIG_NewPointerObj((new QString(result)), SWIGTYPE_p_QString, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Logania_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_QuackleIO__Logania, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_GCGIO(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  QuackleIO::GCGIO *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "new_GCGIO", 0, 0, 0)) SWIG_fail;
  result = (QuackleIO::GCGIO *)new QuackleIO::GCGIO();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_QuackleIO__GCGIO, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_GCGIO(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  QuackleIO::GCGIO *arg1 = (QuackleIO::GCGIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_QuackleIO__GCGIO, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GCGIO" "', argument " "1"" of type '" "QuackleIO::GCGIO *""'"); 
  }
  arg1 = reinterpret_cast< QuackleIO::GCGIO * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GCGIO_read__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  QuackleIO::GCGIO *arg1 = (QuackleIO::GCGIO *) 0 ;
  QString *arg2 = 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  Quackle::Game *result = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_QuackleIO__GCGIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GCGIO_read" "', argument " "1"" of type '" "QuackleIO::GCGIO *""'"); 
  }
  arg1 = reinterpret_cast< QuackleIO::GCGIO * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_QString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GCGIO_read" "', argument " "2"" of type '" "QString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GCGIO_read" "', argument " "2"" of type '" "QString const &""'"); 
  }
  arg2 = reinterpret_cast< QString * >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GCGIO_read" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (Quackle::Game *)(arg1)->read((QString const &)*arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__Game, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GCGIO_read__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  QuackleIO::GCGIO *arg1 = (QuackleIO::GCGIO *) 0 ;
  QTextStream *arg2 = 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  Quackle::Game *result = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_QuackleIO__GCGIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GCGIO_read" "', argument " "1"" of type '" "QuackleIO::GCGIO *""'"); 
  }
  arg1 = reinterpret_cast< QuackleIO::GCGIO * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_QTextStream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GCGIO_read" "', argument " "2"" of type '" "QTextStream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GCGIO_read" "', argument " "2"" of type '" "QTextStream &""'"); 
  }
  arg2 = reinterpret_cast< QTextStream * >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GCGIO_read" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (Quackle::Game *)(arg1)->read(*arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quackle__Game, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GCGIO_read(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "GCGIO_read", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_QuackleIO__GCGIO, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_QString, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_GCGIO_read__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_QuackleIO__GCGIO, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_QTextStream, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_GCGIO_read__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'GCGIO_read'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    QuackleIO::GCGIO::read(QString const &,int)\n"
    "    QuackleIO::GCGIO::read(QTextStream &,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_GCGIO_canRead(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  QuackleIO::GCGIO *arg1 = (QuackleIO::GCGIO *) 0 ;
  QTextStream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "GCGIO_canRead", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_QuackleIO__GCGIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GCGIO_canRead" "', argument " "1"" of type '" "QuackleIO::GCGIO const *""'"); 
  }
  arg1 = reinterpret_cast< QuackleIO::GCGIO * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_QTextStream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GCGIO_canRead" "', argument " "2"" of type '" "QTextStream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GCGIO_canRead" "', argument " "2"" of type '" "QTextStream &""'"); 
  }
  arg2 = reinterpret_cast< QTextStream * >(argp2);
  result = (bool)((QuackleIO::GCGIO const *)arg1)->canRead(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GCGIO_write(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  QuackleIO::GCGIO *arg1 = (QuackleIO::GCGIO *) 0 ;
  Quackle::Game *arg2 = 0 ;
  QTextStream *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "GCGIO_write", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_QuackleIO__GCGIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GCGIO_write" "', argument " "1"" of type '" "QuackleIO::GCGIO *""'"); 
  }
  arg1 = reinterpret_cast< QuackleIO::GCGIO * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Quackle__Game,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GCGIO_write" "', argument " "2"" of type '" "Quackle::Game const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GCGIO_write" "', argument " "2"" of type '" "Quackle::Game const &""'"); 
  }
  arg2 = reinterpret_cast< Quackle::Game * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_QTextStream,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GCGIO_write" "', argument " "3"" of type '" "QTextStream &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GCGIO_write" "', argument " "3"" of type '" "QTextStream &""'"); 
  }
  arg3 = reinterpret_cast< QTextStream * >(argp3);
  (arg1)->write((Quackle::Game const &)*arg2,*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GCGIO_filter(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  QuackleIO::GCGIO *arg1 = (QuackleIO::GCGIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  QString result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_QuackleIO__GCGIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GCGIO_filter" "', argument " "1"" of type '" "QuackleIO::GCGIO const *""'"); 
  }
  arg1 = reinterpret_cast< QuackleIO::GCGIO * >(argp1);
  result = ((QuackleIO::GCGIO const *)arg1)->filter();
  resultobj = SWIG_NewPointerObj((new QString(result)), SWIGTYPE_p_QString, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *GCGIO_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_QuackleIO__GCGIO, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *GCGIO_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

static PyMethodDef SwigMethods[] = {
	 { "delete_SwigPyIterator", _wrap_delete_SwigPyIterator, METH_O, NULL},
	 { "SwigPyIterator_value", _wrap_SwigPyIterator_value, METH_O, NULL},
	 { "SwigPyIterator_incr", _wrap_SwigPyIterator_incr, METH_VARARGS, NULL},
	 { "SwigPyIterator_decr", _wrap_SwigPyIterator_decr, METH_VARARGS, NULL},
	 { "SwigPyIterator_distance", _wrap_SwigPyIterator_distance, METH_VARARGS, NULL},
	 { "SwigPyIterator_equal", _wrap_SwigPyIterator_equal, METH_VARARGS, NULL},
	 { "SwigPyIterator_copy", _wrap_SwigPyIterator_copy, METH_O, NULL},
	 { "SwigPyIterator_next", _wrap_SwigPyIterator_next, METH_O, NULL},
	 { "SwigPyIterator___next__", _wrap_SwigPyIterator___next__, METH_O, NULL},
	 { "SwigPyIterator_previous", _wrap_SwigPyIterator_previous, METH_O, NULL},
	 { "SwigPyIterator_advance", _wrap_SwigPyIterator_advance, METH_VARARGS, NULL},
	 { "SwigPyIterator___eq__", _wrap_SwigPyIterator___eq__, METH_VARARGS, NULL},
	 { "SwigPyIterator___ne__", _wrap_SwigPyIterator___ne__, METH_VARARGS, NULL},
	 { "SwigPyIterator___iadd__", _wrap_SwigPyIterator___iadd__, METH_VARARGS, NULL},
	 { "SwigPyIterator___isub__", _wrap_SwigPyIterator___isub__, METH_VARARGS, NULL},
	 { "SwigPyIterator___add__", _wrap_SwigPyIterator___add__, METH_VARARGS, NULL},
	 { "SwigPyIterator___sub__", _wrap_SwigPyIterator___sub__, METH_VARARGS, NULL},
	 { "SwigPyIterator_swigregister", SwigPyIterator_swigregister, METH_O, NULL},
	 { "new_FixedLengthString", _wrap_new_FixedLengthString, METH_VARARGS, NULL},
	 { "FixedLengthString_begin", _wrap_FixedLengthString_begin, METH_VARARGS, NULL},
	 { "FixedLengthString_end", _wrap_FixedLengthString_end, METH_VARARGS, NULL},
	 { "FixedLengthString_erase", _wrap_FixedLengthString_erase, METH_VARARGS, NULL},
	 { "FixedLengthString_length", _wrap_FixedLengthString_length, METH_O, NULL},
	 { "FixedLengthString_substr", _wrap_FixedLengthString_substr, METH_VARARGS, NULL},
	 { "FixedLengthString_empty", _wrap_FixedLengthString_empty, METH_O, NULL},
	 { "FixedLengthString_size", _wrap_FixedLengthString_size, METH_O, NULL},
	 { "FixedLengthString_clear", _wrap_FixedLengthString_clear, METH_O, NULL},
	 { "FixedLengthString_push_back", _wrap_FixedLengthString_push_back, METH_VARARGS, NULL},
	 { "FixedLengthString_pop_back", _wrap_FixedLengthString_pop_back, METH_O, NULL},
	 { "FixedLengthString_constData", _wrap_FixedLengthString_constData, METH_O, NULL},
	 { "FixedLengthString_compare", _wrap_FixedLengthString_compare, METH_VARARGS, NULL},
	 { "FixedLengthString___iadd__", _wrap_FixedLengthString___iadd__, METH_VARARGS, NULL},
	 { "delete_FixedLengthString", _wrap_delete_FixedLengthString, METH_O, NULL},
	 { "FixedLengthString_swigregister", FixedLengthString_swigregister, METH_O, NULL},
	 { "FixedLengthString_swiginit", FixedLengthString_swiginit, METH_VARARGS, NULL},
	 { "__add__", _wrap___add__, METH_VARARGS, NULL},
	 { "left", _wrap_left, METH_VARARGS, NULL},
	 { "alphabetize", _wrap_alphabetize, METH_O, NULL},
	 { "clearBlankness", _wrap_clearBlankness, METH_O, NULL},
	 { "setBlankness", _wrap_setBlankness, METH_O, NULL},
	 { "usedTiles", _wrap_usedTiles, METH_O, NULL},
	 { "counts", _wrap_counts, METH_VARARGS, NULL},
	 { "back", _wrap_back, METH_O, NULL},
	 { "pop_back", _wrap_pop_back, METH_O, NULL},
	 { "front", _wrap_front, METH_O, NULL},
	 { "pop_front", _wrap_pop_front, METH_O, NULL},
	 { "allButFront", _wrap_allButFront, METH_O, NULL},
	 { "new_LetterParameter", _wrap_new_LetterParameter, METH_VARARGS, NULL},
	 { "LetterParameter_text", _wrap_LetterParameter_text, METH_O, NULL},
	 { "LetterParameter_setText", _wrap_LetterParameter_setText, METH_VARARGS, NULL},
	 { "LetterParameter_blankText", _wrap_LetterParameter_blankText, METH_O, NULL},
	 { "LetterParameter_setBlankText", _wrap_LetterParameter_setBlankText, METH_VARARGS, NULL},
	 { "LetterParameter_letter", _wrap_LetterParameter_letter, METH_O, NULL},
	 { "LetterParameter_setLetter", _wrap_LetterParameter_setLetter, METH_VARARGS, NULL},
	 { "LetterParameter_score", _wrap_LetterParameter_score, METH_O, NULL},
	 { "LetterParameter_setScore", _wrap_LetterParameter_setScore, METH_VARARGS, NULL},
	 { "LetterParameter_count", _wrap_LetterParameter_count, METH_O, NULL},
	 { "LetterParameter_setCount", _wrap_LetterParameter_setCount, METH_VARARGS, NULL},
	 { "LetterParameter_isVowel", _wrap_LetterParameter_isVowel, METH_O, NULL},
	 { "LetterParameter_setVowel", _wrap_LetterParameter_setVowel, METH_VARARGS, NULL},
	 { "delete_LetterParameter", _wrap_delete_LetterParameter, METH_O, NULL},
	 { "LetterParameter_swigregister", LetterParameter_swigregister, METH_O, NULL},
	 { "LetterParameter_swiginit", LetterParameter_swiginit, METH_VARARGS, NULL},
	 { "new_AlphabetParameters", _wrap_new_AlphabetParameters, METH_NOARGS, NULL},
	 { "AlphabetParameters_length", _wrap_AlphabetParameters_length, METH_O, NULL},
	 { "AlphabetParameters_firstLetter", _wrap_AlphabetParameters_firstLetter, METH_O, NULL},
	 { "AlphabetParameters_lastLetter", _wrap_AlphabetParameters_lastLetter, METH_O, NULL},
	 { "AlphabetParameters_setAlphabet", _wrap_AlphabetParameters_setAlphabet, METH_VARARGS, NULL},
	 { "AlphabetParameters_letterParameter", _wrap_AlphabetParameters_letterParameter, METH_VARARGS, NULL},
	 { "AlphabetParameters_setLetterParameter", _wrap_AlphabetParameters_setLetterParameter, METH_VARARGS, NULL},
	 { "AlphabetParameters_emptyAlphabet", _wrap_AlphabetParameters_emptyAlphabet, METH_NOARGS, NULL},
	 { "AlphabetParameters_setCount", _wrap_AlphabetParameters_setCount, METH_VARARGS, NULL},
	 { "AlphabetParameters_setScore", _wrap_AlphabetParameters_setScore, METH_VARARGS, NULL},
	 { "AlphabetParameters_isBlankLetter", _wrap_AlphabetParameters_isBlankLetter, METH_VARARGS, NULL},
	 { "AlphabetParameters_clearBlankness", _wrap_AlphabetParameters_clearBlankness, METH_VARARGS, NULL},
	 { "AlphabetParameters_setBlankness", _wrap_AlphabetParameters_setBlankness, METH_VARARGS, NULL},
	 { "AlphabetParameters_isPlainLetter", _wrap_AlphabetParameters_isPlainLetter, METH_VARARGS, NULL},
	 { "AlphabetParameters_isSomeLetter", _wrap_AlphabetParameters_isSomeLetter, METH_VARARGS, NULL},
	 { "AlphabetParameters_count", _wrap_AlphabetParameters_count, METH_VARARGS, NULL},
	 { "AlphabetParameters_score", _wrap_AlphabetParameters_score, METH_VARARGS, NULL},
	 { "AlphabetParameters_isVowel", _wrap_AlphabetParameters_isVowel, METH_VARARGS, NULL},
	 { "AlphabetParameters_userVisible", _wrap_AlphabetParameters_userVisible, METH_VARARGS, NULL},
	 { "AlphabetParameters_encode", _wrap_AlphabetParameters_encode, METH_VARARGS, NULL},
	 { "AlphabetParameters_alphabetName", _wrap_AlphabetParameters_alphabetName, METH_O, NULL},
	 { "AlphabetParameters_setAlphabetName", _wrap_AlphabetParameters_setAlphabetName, METH_VARARGS, NULL},
	 { "AlphabetParameters_findAlphabetFile", _wrap_AlphabetParameters_findAlphabetFile, METH_O, NULL},
	 { "delete_AlphabetParameters", _wrap_delete_AlphabetParameters, METH_O, NULL},
	 { "AlphabetParameters_swigregister", AlphabetParameters_swigregister, METH_O, NULL},
	 { "AlphabetParameters_swiginit", AlphabetParameters_swiginit, METH_VARARGS, NULL},
	 { "new_EnglishAlphabetParameters", _wrap_new_EnglishAlphabetParameters, METH_NOARGS, NULL},
	 { "delete_EnglishAlphabetParameters", _wrap_delete_EnglishAlphabetParameters, METH_O, NULL},
	 { "EnglishAlphabetParameters_swigregister", EnglishAlphabetParameters_swigregister, METH_O, NULL},
	 { "EnglishAlphabetParameters_swiginit", EnglishAlphabetParameters_swiginit, METH_VARARGS, NULL},
	 { "MoveVector_iterator", _wrap_MoveVector_iterator, METH_O, NULL},
	 { "MoveVector___nonzero__", _wrap_MoveVector___nonzero__, METH_O, NULL},
	 { "MoveVector___bool__", _wrap_MoveVector___bool__, METH_O, NULL},
	 { "MoveVector___len__", _wrap_MoveVector___len__, METH_O, NULL},
	 { "MoveVector___getslice__", _wrap_MoveVector___getslice__, METH_VARARGS, NULL},
	 { "MoveVector___setslice__", _wrap_MoveVector___setslice__, METH_VARARGS, NULL},
	 { "MoveVector___delslice__", _wrap_MoveVector___delslice__, METH_VARARGS, NULL},
	 { "MoveVector___delitem__", _wrap_MoveVector___delitem__, METH_VARARGS, NULL},
	 { "MoveVector___getitem__", _wrap_MoveVector___getitem__, METH_VARARGS, NULL},
	 { "MoveVector___setitem__", _wrap_MoveVector___setitem__, METH_VARARGS, NULL},
	 { "MoveVector_pop", _wrap_MoveVector_pop, METH_O, NULL},
	 { "MoveVector_append", _wrap_MoveVector_append, METH_VARARGS, NULL},
	 { "MoveVector_empty", _wrap_MoveVector_empty, METH_O, NULL},
	 { "MoveVector_size", _wrap_MoveVector_size, METH_O, NULL},
	 { "MoveVector_swap", _wrap_MoveVector_swap, METH_VARARGS, NULL},
	 { "MoveVector_begin", _wrap_MoveVector_begin, METH_O, NULL},
	 { "MoveVector_end", _wrap_MoveVector_end, METH_O, NULL},
	 { "MoveVector_rbegin", _wrap_MoveVector_rbegin, METH_O, NULL},
	 { "MoveVector_rend", _wrap_MoveVector_rend, METH_O, NULL},
	 { "MoveVector_clear", _wrap_MoveVector_clear, METH_O, NULL},
	 { "MoveVector_get_allocator", _wrap_MoveVector_get_allocator, METH_O, NULL},
	 { "MoveVector_pop_back", _wrap_MoveVector_pop_back, METH_O, NULL},
	 { "MoveVector_erase", _wrap_MoveVector_erase, METH_VARARGS, NULL},
	 { "new_MoveVector", _wrap_new_MoveVector, METH_VARARGS, NULL},
	 { "MoveVector_push_back", _wrap_MoveVector_push_back, METH_VARARGS, NULL},
	 { "MoveVector_front", _wrap_MoveVector_front, METH_O, NULL},
	 { "MoveVector_back", _wrap_MoveVector_back, METH_O, NULL},
	 { "MoveVector_assign", _wrap_MoveVector_assign, METH_VARARGS, NULL},
	 { "MoveVector_resize", _wrap_MoveVector_resize, METH_VARARGS, NULL},
	 { "MoveVector_insert", _wrap_MoveVector_insert, METH_VARARGS, NULL},
	 { "MoveVector_reserve", _wrap_MoveVector_reserve, METH_VARARGS, NULL},
	 { "MoveVector_capacity", _wrap_MoveVector_capacity, METH_O, NULL},
	 { "delete_MoveVector", _wrap_delete_MoveVector, METH_O, NULL},
	 { "MoveVector_swigregister", MoveVector_swigregister, METH_O, NULL},
	 { "MoveVector_swiginit", MoveVector_swiginit, METH_VARARGS, NULL},
	 { "PlayerVector_iterator", _wrap_PlayerVector_iterator, METH_O, NULL},
	 { "PlayerVector___nonzero__", _wrap_PlayerVector___nonzero__, METH_O, NULL},
	 { "PlayerVector___bool__", _wrap_PlayerVector___bool__, METH_O, NULL},
	 { "PlayerVector___len__", _wrap_PlayerVector___len__, METH_O, NULL},
	 { "PlayerVector___getslice__", _wrap_PlayerVector___getslice__, METH_VARARGS, NULL},
	 { "PlayerVector___setslice__", _wrap_PlayerVector___setslice__, METH_VARARGS, NULL},
	 { "PlayerVector___delslice__", _wrap_PlayerVector___delslice__, METH_VARARGS, NULL},
	 { "PlayerVector___delitem__", _wrap_PlayerVector___delitem__, METH_VARARGS, NULL},
	 { "PlayerVector___getitem__", _wrap_PlayerVector___getitem__, METH_VARARGS, NULL},
	 { "PlayerVector___setitem__", _wrap_PlayerVector___setitem__, METH_VARARGS, NULL},
	 { "PlayerVector_pop", _wrap_PlayerVector_pop, METH_O, NULL},
	 { "PlayerVector_append", _wrap_PlayerVector_append, METH_VARARGS, NULL},
	 { "PlayerVector_empty", _wrap_PlayerVector_empty, METH_O, NULL},
	 { "PlayerVector_size", _wrap_PlayerVector_size, METH_O, NULL},
	 { "PlayerVector_swap", _wrap_PlayerVector_swap, METH_VARARGS, NULL},
	 { "PlayerVector_begin", _wrap_PlayerVector_begin, METH_O, NULL},
	 { "PlayerVector_end", _wrap_PlayerVector_end, METH_O, NULL},
	 { "PlayerVector_rbegin", _wrap_PlayerVector_rbegin, METH_O, NULL},
	 { "PlayerVector_rend", _wrap_PlayerVector_rend, METH_O, NULL},
	 { "PlayerVector_clear", _wrap_PlayerVector_clear, METH_O, NULL},
	 { "PlayerVector_get_allocator", _wrap_PlayerVector_get_allocator, METH_O, NULL},
	 { "PlayerVector_pop_back", _wrap_PlayerVector_pop_back, METH_O, NULL},
	 { "PlayerVector_erase", _wrap_PlayerVector_erase, METH_VARARGS, NULL},
	 { "new_PlayerVector", _wrap_new_PlayerVector, METH_VARARGS, NULL},
	 { "PlayerVector_push_back", _wrap_PlayerVector_push_back, METH_VARARGS, NULL},
	 { "PlayerVector_front", _wrap_PlayerVector_front, METH_O, NULL},
	 { "PlayerVector_back", _wrap_PlayerVector_back, METH_O, NULL},
	 { "PlayerVector_assign", _wrap_PlayerVector_assign, METH_VARARGS, NULL},
	 { "PlayerVector_resize", _wrap_PlayerVector_resize, METH_VARARGS, NULL},
	 { "PlayerVector_insert", _wrap_PlayerVector_insert, METH_VARARGS, NULL},
	 { "PlayerVector_reserve", _wrap_PlayerVector_reserve, METH_VARARGS, NULL},
	 { "PlayerVector_capacity", _wrap_PlayerVector_capacity, METH_O, NULL},
	 { "delete_PlayerVector", _wrap_delete_PlayerVector, METH_O, NULL},
	 { "PlayerVector_swigregister", PlayerVector_swigregister, METH_O, NULL},
	 { "PlayerVector_swiginit", PlayerVector_swiginit, METH_VARARGS, NULL},
	 { "ProbableRackList_iterator", _wrap_ProbableRackList_iterator, METH_O, NULL},
	 { "ProbableRackList___nonzero__", _wrap_ProbableRackList___nonzero__, METH_O, NULL},
	 { "ProbableRackList___bool__", _wrap_ProbableRackList___bool__, METH_O, NULL},
	 { "ProbableRackList___len__", _wrap_ProbableRackList___len__, METH_O, NULL},
	 { "ProbableRackList___getslice__", _wrap_ProbableRackList___getslice__, METH_VARARGS, NULL},
	 { "ProbableRackList___setslice__", _wrap_ProbableRackList___setslice__, METH_VARARGS, NULL},
	 { "ProbableRackList___delslice__", _wrap_ProbableRackList___delslice__, METH_VARARGS, NULL},
	 { "ProbableRackList___delitem__", _wrap_ProbableRackList___delitem__, METH_VARARGS, NULL},
	 { "ProbableRackList___getitem__", _wrap_ProbableRackList___getitem__, METH_VARARGS, NULL},
	 { "ProbableRackList___setitem__", _wrap_ProbableRackList___setitem__, METH_VARARGS, NULL},
	 { "ProbableRackList_pop", _wrap_ProbableRackList_pop, METH_O, NULL},
	 { "ProbableRackList_append", _wrap_ProbableRackList_append, METH_VARARGS, NULL},
	 { "ProbableRackList_empty", _wrap_ProbableRackList_empty, METH_O, NULL},
	 { "ProbableRackList_size", _wrap_ProbableRackList_size, METH_O, NULL},
	 { "ProbableRackList_swap", _wrap_ProbableRackList_swap, METH_VARARGS, NULL},
	 { "ProbableRackList_begin", _wrap_ProbableRackList_begin, METH_O, NULL},
	 { "ProbableRackList_end", _wrap_ProbableRackList_end, METH_O, NULL},
	 { "ProbableRackList_rbegin", _wrap_ProbableRackList_rbegin, METH_O, NULL},
	 { "ProbableRackList_rend", _wrap_ProbableRackList_rend, METH_O, NULL},
	 { "ProbableRackList_clear", _wrap_ProbableRackList_clear, METH_O, NULL},
	 { "ProbableRackList_get_allocator", _wrap_ProbableRackList_get_allocator, METH_O, NULL},
	 { "ProbableRackList_pop_back", _wrap_ProbableRackList_pop_back, METH_O, NULL},
	 { "ProbableRackList_erase", _wrap_ProbableRackList_erase, METH_VARARGS, NULL},
	 { "new_ProbableRackList", _wrap_new_ProbableRackList, METH_VARARGS, NULL},
	 { "ProbableRackList_push_back", _wrap_ProbableRackList_push_back, METH_VARARGS, NULL},
	 { "ProbableRackList_front", _wrap_ProbableRackList_front, METH_O, NULL},
	 { "ProbableRackList_back", _wrap_ProbableRackList_back, METH_O, NULL},
	 { "ProbableRackList_assign", _wrap_ProbableRackList_assign, METH_VARARGS, NULL},
	 { "ProbableRackList_resize", _wrap_ProbableRackList_resize, METH_VARARGS, NULL},
	 { "ProbableRackList_insert", _wrap_ProbableRackList_insert, METH_VARARGS, NULL},
	 { "ProbableRackList_reserve", _wrap_ProbableRackList_reserve, METH_VARARGS, NULL},
	 { "ProbableRackList_capacity", _wrap_ProbableRackList_capacity, METH_O, NULL},
	 { "delete_ProbableRackList", _wrap_delete_ProbableRackList, METH_O, NULL},
	 { "ProbableRackList_swigregister", ProbableRackList_swigregister, METH_O, NULL},
	 { "ProbableRackList_swiginit", ProbableRackList_swiginit, METH_VARARGS, NULL},
	 { "PositionList_iterator", _wrap_PositionList_iterator, METH_O, NULL},
	 { "PositionList___nonzero__", _wrap_PositionList___nonzero__, METH_O, NULL},
	 { "PositionList___bool__", _wrap_PositionList___bool__, METH_O, NULL},
	 { "PositionList___len__", _wrap_PositionList___len__, METH_O, NULL},
	 { "PositionList___getslice__", _wrap_PositionList___getslice__, METH_VARARGS, NULL},
	 { "PositionList___setslice__", _wrap_PositionList___setslice__, METH_VARARGS, NULL},
	 { "PositionList___delslice__", _wrap_PositionList___delslice__, METH_VARARGS, NULL},
	 { "PositionList___delitem__", _wrap_PositionList___delitem__, METH_VARARGS, NULL},
	 { "PositionList___getitem__", _wrap_PositionList___getitem__, METH_VARARGS, NULL},
	 { "PositionList___setitem__", _wrap_PositionList___setitem__, METH_VARARGS, NULL},
	 { "PositionList_pop", _wrap_PositionList_pop, METH_O, NULL},
	 { "PositionList_append", _wrap_PositionList_append, METH_VARARGS, NULL},
	 { "PositionList_empty", _wrap_PositionList_empty, METH_O, NULL},
	 { "PositionList_size", _wrap_PositionList_size, METH_O, NULL},
	 { "PositionList_swap", _wrap_PositionList_swap, METH_VARARGS, NULL},
	 { "PositionList_begin", _wrap_PositionList_begin, METH_O, NULL},
	 { "PositionList_end", _wrap_PositionList_end, METH_O, NULL},
	 { "PositionList_rbegin", _wrap_PositionList_rbegin, METH_O, NULL},
	 { "PositionList_rend", _wrap_PositionList_rend, METH_O, NULL},
	 { "PositionList_clear", _wrap_PositionList_clear, METH_O, NULL},
	 { "PositionList_get_allocator", _wrap_PositionList_get_allocator, METH_O, NULL},
	 { "PositionList_pop_back", _wrap_PositionList_pop_back, METH_O, NULL},
	 { "PositionList_erase", _wrap_PositionList_erase, METH_VARARGS, NULL},
	 { "new_PositionList", _wrap_new_PositionList, METH_VARARGS, NULL},
	 { "PositionList_push_back", _wrap_PositionList_push_back, METH_VARARGS, NULL},
	 { "PositionList_front", _wrap_PositionList_front, METH_O, NULL},
	 { "PositionList_back", _wrap_PositionList_back, METH_O, NULL},
	 { "PositionList_assign", _wrap_PositionList_assign, METH_VARARGS, NULL},
	 { "PositionList_resize", _wrap_PositionList_resize, METH_VARARGS, NULL},
	 { "PositionList_insert", _wrap_PositionList_insert, METH_VARARGS, NULL},
	 { "PositionList_reserve", _wrap_PositionList_reserve, METH_VARARGS, NULL},
	 { "PositionList_capacity", _wrap_PositionList_capacity, METH_O, NULL},
	 { "delete_PositionList", _wrap_delete_PositionList, METH_O, NULL},
	 { "PositionList_swigregister", PositionList_swigregister, METH_O, NULL},
	 { "PositionList_swiginit", PositionList_swiginit, METH_VARARGS, NULL},
	 { "LetterParameterVector_iterator", _wrap_LetterParameterVector_iterator, METH_O, NULL},
	 { "LetterParameterVector___nonzero__", _wrap_LetterParameterVector___nonzero__, METH_O, NULL},
	 { "LetterParameterVector___bool__", _wrap_LetterParameterVector___bool__, METH_O, NULL},
	 { "LetterParameterVector___len__", _wrap_LetterParameterVector___len__, METH_O, NULL},
	 { "LetterParameterVector___getslice__", _wrap_LetterParameterVector___getslice__, METH_VARARGS, NULL},
	 { "LetterParameterVector___setslice__", _wrap_LetterParameterVector___setslice__, METH_VARARGS, NULL},
	 { "LetterParameterVector___delslice__", _wrap_LetterParameterVector___delslice__, METH_VARARGS, NULL},
	 { "LetterParameterVector___delitem__", _wrap_LetterParameterVector___delitem__, METH_VARARGS, NULL},
	 { "LetterParameterVector___getitem__", _wrap_LetterParameterVector___getitem__, METH_VARARGS, NULL},
	 { "LetterParameterVector___setitem__", _wrap_LetterParameterVector___setitem__, METH_VARARGS, NULL},
	 { "LetterParameterVector_pop", _wrap_LetterParameterVector_pop, METH_O, NULL},
	 { "LetterParameterVector_append", _wrap_LetterParameterVector_append, METH_VARARGS, NULL},
	 { "LetterParameterVector_empty", _wrap_LetterParameterVector_empty, METH_O, NULL},
	 { "LetterParameterVector_size", _wrap_LetterParameterVector_size, METH_O, NULL},
	 { "LetterParameterVector_swap", _wrap_LetterParameterVector_swap, METH_VARARGS, NULL},
	 { "LetterParameterVector_begin", _wrap_LetterParameterVector_begin, METH_O, NULL},
	 { "LetterParameterVector_end", _wrap_LetterParameterVector_end, METH_O, NULL},
	 { "LetterParameterVector_rbegin", _wrap_LetterParameterVector_rbegin, METH_O, NULL},
	 { "LetterParameterVector_rend", _wrap_LetterParameterVector_rend, METH_O, NULL},
	 { "LetterParameterVector_clear", _wrap_LetterParameterVector_clear, METH_O, NULL},
	 { "LetterParameterVector_get_allocator", _wrap_LetterParameterVector_get_allocator, METH_O, NULL},
	 { "LetterParameterVector_pop_back", _wrap_LetterParameterVector_pop_back, METH_O, NULL},
	 { "LetterParameterVector_erase", _wrap_LetterParameterVector_erase, METH_VARARGS, NULL},
	 { "new_LetterParameterVector", _wrap_new_LetterParameterVector, METH_VARARGS, NULL},
	 { "LetterParameterVector_push_back", _wrap_LetterParameterVector_push_back, METH_VARARGS, NULL},
	 { "LetterParameterVector_front", _wrap_LetterParameterVector_front, METH_O, NULL},
	 { "LetterParameterVector_back", _wrap_LetterParameterVector_back, METH_O, NULL},
	 { "LetterParameterVector_assign", _wrap_LetterParameterVector_assign, METH_VARARGS, NULL},
	 { "LetterParameterVector_resize", _wrap_LetterParameterVector_resize, METH_VARARGS, NULL},
	 { "LetterParameterVector_insert", _wrap_LetterParameterVector_insert, METH_VARARGS, NULL},
	 { "LetterParameterVector_reserve", _wrap_LetterParameterVector_reserve, METH_VARARGS, NULL},
	 { "LetterParameterVector_capacity", _wrap_LetterParameterVector_capacity, METH_O, NULL},
	 { "delete_LetterParameterVector", _wrap_delete_LetterParameterVector, METH_O, NULL},
	 { "LetterParameterVector_swigregister", LetterParameterVector_swigregister, METH_O, NULL},
	 { "LetterParameterVector_swiginit", LetterParameterVector_swiginit, METH_VARARGS, NULL},
	 { "LetterStringVector_iterator", _wrap_LetterStringVector_iterator, METH_O, NULL},
	 { "LetterStringVector___nonzero__", _wrap_LetterStringVector___nonzero__, METH_O, NULL},
	 { "LetterStringVector___bool__", _wrap_LetterStringVector___bool__, METH_O, NULL},
	 { "LetterStringVector___len__", _wrap_LetterStringVector___len__, METH_O, NULL},
	 { "LetterStringVector___getslice__", _wrap_LetterStringVector___getslice__, METH_VARARGS, NULL},
	 { "LetterStringVector___setslice__", _wrap_LetterStringVector___setslice__, METH_VARARGS, NULL},
	 { "LetterStringVector___delslice__", _wrap_LetterStringVector___delslice__, METH_VARARGS, NULL},
	 { "LetterStringVector___delitem__", _wrap_LetterStringVector___delitem__, METH_VARARGS, NULL},
	 { "LetterStringVector___getitem__", _wrap_LetterStringVector___getitem__, METH_VARARGS, NULL},
	 { "LetterStringVector___setitem__", _wrap_LetterStringVector___setitem__, METH_VARARGS, NULL},
	 { "LetterStringVector_pop", _wrap_LetterStringVector_pop, METH_O, NULL},
	 { "LetterStringVector_append", _wrap_LetterStringVector_append, METH_VARARGS, NULL},
	 { "LetterStringVector_empty", _wrap_LetterStringVector_empty, METH_O, NULL},
	 { "LetterStringVector_size", _wrap_LetterStringVector_size, METH_O, NULL},
	 { "LetterStringVector_swap", _wrap_LetterStringVector_swap, METH_VARARGS, NULL},
	 { "LetterStringVector_begin", _wrap_LetterStringVector_begin, METH_O, NULL},
	 { "LetterStringVector_end", _wrap_LetterStringVector_end, METH_O, NULL},
	 { "LetterStringVector_rbegin", _wrap_LetterStringVector_rbegin, METH_O, NULL},
	 { "LetterStringVector_rend", _wrap_LetterStringVector_rend, METH_O, NULL},
	 { "LetterStringVector_clear", _wrap_LetterStringVector_clear, METH_O, NULL},
	 { "LetterStringVector_get_allocator", _wrap_LetterStringVector_get_allocator, METH_O, NULL},
	 { "LetterStringVector_pop_back", _wrap_LetterStringVector_pop_back, METH_O, NULL},
	 { "LetterStringVector_erase", _wrap_LetterStringVector_erase, METH_VARARGS, NULL},
	 { "new_LetterStringVector", _wrap_new_LetterStringVector, METH_VARARGS, NULL},
	 { "LetterStringVector_push_back", _wrap_LetterStringVector_push_back, METH_VARARGS, NULL},
	 { "LetterStringVector_front", _wrap_LetterStringVector_front, METH_O, NULL},
	 { "LetterStringVector_back", _wrap_LetterStringVector_back, METH_O, NULL},
	 { "LetterStringVector_assign", _wrap_LetterStringVector_assign, METH_VARARGS, NULL},
	 { "LetterStringVector_resize", _wrap_LetterStringVector_resize, METH_VARARGS, NULL},
	 { "LetterStringVector_insert", _wrap_LetterStringVector_insert, METH_VARARGS, NULL},
	 { "LetterStringVector_reserve", _wrap_LetterStringVector_reserve, METH_VARARGS, NULL},
	 { "LetterStringVector_capacity", _wrap_LetterStringVector_capacity, METH_O, NULL},
	 { "delete_LetterStringVector", _wrap_delete_LetterStringVector, METH_O, NULL},
	 { "LetterStringVector_swigregister", LetterStringVector_swigregister, METH_O, NULL},
	 { "LetterStringVector_swiginit", LetterStringVector_swiginit, METH_VARARGS, NULL},
	 { "Move_score_set", _wrap_Move_score_set, METH_VARARGS, NULL},
	 { "Move_score_get", _wrap_Move_score_get, METH_O, NULL},
	 { "Move_isBingo_set", _wrap_Move_isBingo_set, METH_VARARGS, NULL},
	 { "Move_isBingo_get", _wrap_Move_isBingo_get, METH_O, NULL},
	 { "Move_effectiveScore", _wrap_Move_effectiveScore, METH_O, NULL},
	 { "Move_equity_set", _wrap_Move_equity_set, METH_VARARGS, NULL},
	 { "Move_equity_get", _wrap_Move_equity_get, METH_O, NULL},
	 { "Move_win_set", _wrap_Move_win_set, METH_VARARGS, NULL},
	 { "Move_win_get", _wrap_Move_win_get, METH_O, NULL},
	 { "Move_possibleWin_set", _wrap_Move_possibleWin_set, METH_VARARGS, NULL},
	 { "Move_possibleWin_get", _wrap_Move_possibleWin_get, METH_O, NULL},
	 { "Move_action_set", _wrap_Move_action_set, METH_VARARGS, NULL},
	 { "Move_action_get", _wrap_Move_action_get, METH_O, NULL},
	 { "Move_horizontal_set", _wrap_Move_horizontal_set, METH_VARARGS, NULL},
	 { "Move_horizontal_get", _wrap_Move_horizontal_get, METH_O, NULL},
	 { "Move_startrow_set", _wrap_Move_startrow_set, METH_VARARGS, NULL},
	 { "Move_startrow_get", _wrap_Move_startrow_get, METH_O, NULL},
	 { "Move_startcol_set", _wrap_Move_startcol_set, METH_VARARGS, NULL},
	 { "Move_startcol_get", _wrap_Move_startcol_get, METH_O, NULL},
	 { "Move_isAMove", _wrap_Move_isAMove, METH_O, NULL},
	 { "Move_setTiles", _wrap_Move_setTiles, METH_VARARGS, NULL},
	 { "Move_setPrettyTiles", _wrap_Move_setPrettyTiles, METH_VARARGS, NULL},
	 { "Move_prettyTiles", _wrap_Move_prettyTiles, METH_O, NULL},
	 { "Move_usedTiles", _wrap_Move_usedTiles, METH_O, NULL},
	 { "Move_wordTiles", _wrap_Move_wordTiles, METH_O, NULL},
	 { "Move_wordTilesWithNoPlayThru", _wrap_Move_wordTilesWithNoPlayThru, METH_O, NULL},
	 { "Move_tiles", _wrap_Move_tiles, METH_O, NULL},
	 { "Move_isChallengedPhoney", _wrap_Move_isChallengedPhoney, METH_O, NULL},
	 { "Move_setIsChallengedPhoney", _wrap_Move_setIsChallengedPhoney, METH_VARARGS, NULL},
	 { "Move_scoreAddition", _wrap_Move_scoreAddition, METH_O, NULL},
	 { "Move_setScoreAddition", _wrap_Move_setScoreAddition, METH_VARARGS, NULL},
	 { "Move_isAlreadyOnBoard", _wrap_Move_isAlreadyOnBoard, METH_O, NULL},
	 { "Move_xml", _wrap_Move_xml, METH_O, NULL},
	 { "Move_toString", _wrap_Move_toString, METH_O, NULL},
	 { "Move_debugString", _wrap_Move_debugString, METH_O, NULL},
	 { "Move_positionString", _wrap_Move_positionString, METH_O, NULL},
	 { "Move_createPlaceMove", _wrap_Move_createPlaceMove, METH_VARARGS, NULL},
	 { "Move_createChallengedPhoney", _wrap_Move_createChallengedPhoney, METH_VARARGS, NULL},
	 { "Move_createExchangeMove", _wrap_Move_createExchangeMove, METH_VARARGS, NULL},
	 { "Move_createUnusedTilesBonus", _wrap_Move_createUnusedTilesBonus, METH_VARARGS, NULL},
	 { "Move_createTimePenalty", _wrap_Move_createTimePenalty, METH_O, NULL},
	 { "Move_createPassMove", _wrap_Move_createPassMove, METH_NOARGS, NULL},
	 { "Move_createNonmove", _wrap_Move_createNonmove, METH_NOARGS, NULL},
	 { "new_Move", _wrap_new_Move, METH_NOARGS, NULL},
	 { "delete_Move", _wrap_delete_Move, METH_O, NULL},
	 { "Move_swigregister", Move_swigregister, METH_O, NULL},
	 { "Move_swiginit", Move_swiginit, METH_VARARGS, NULL},
	 { "MoveList_sort", _wrap_MoveList_sort, METH_VARARGS, NULL},
	 { "MoveList_sortNonReverse", _wrap_MoveList_sortNonReverse, METH_VARARGS, NULL},
	 { "MoveList_winComparator", _wrap_MoveList_winComparator, METH_VARARGS, NULL},
	 { "MoveList_equityComparator", _wrap_MoveList_equityComparator, METH_VARARGS, NULL},
	 { "MoveList_scoreComparator", _wrap_MoveList_scoreComparator, METH_VARARGS, NULL},
	 { "MoveList_alphabeticalComparator", _wrap_MoveList_alphabeticalComparator, METH_VARARGS, NULL},
	 { "MoveList_wordPosComparator", _wrap_MoveList_wordPosComparator, METH_VARARGS, NULL},
	 { "MoveList_contains", _wrap_MoveList_contains, METH_VARARGS, NULL},
	 { "new_MoveList", _wrap_new_MoveList, METH_NOARGS, NULL},
	 { "delete_MoveList", _wrap_delete_MoveList, METH_O, NULL},
	 { "MoveList_swigregister", MoveList_swigregister, METH_O, NULL},
	 { "MoveList_swiginit", MoveList_swiginit, METH_VARARGS, NULL},
	 { "new_Rack", _wrap_new_Rack, METH_VARARGS, NULL},
	 { "Rack_setTiles", _wrap_Rack_setTiles, METH_VARARGS, NULL},
	 { "Rack_tiles", _wrap_Rack_tiles, METH_O, NULL},
	 { "Rack_alphaTiles", _wrap_Rack_alphaTiles, METH_O, NULL},
	 { "Rack_empty", _wrap_Rack_empty, METH_O, NULL},
	 { "Rack_equals", _wrap_Rack_equals, METH_VARARGS, NULL},
	 { "Rack_size", _wrap_Rack_size, METH_O, NULL},
	 { "Rack_unload", _wrap_Rack_unload, METH_VARARGS, NULL},
	 { "Rack_load", _wrap_Rack_load, METH_VARARGS, NULL},
	 { "Rack_contains", _wrap_Rack_contains, METH_VARARGS, NULL},
	 { "Rack_shuffle", _wrap_Rack_shuffle, METH_O, NULL},
	 { "Rack_score", _wrap_Rack_score, METH_O, NULL},
	 { "Rack_xml", _wrap_Rack_xml, METH_O, NULL},
	 { "Rack_toString", _wrap_Rack_toString, METH_O, NULL},
	 { "delete_Rack", _wrap_delete_Rack, METH_O, NULL},
	 { "Rack_swigregister", Rack_swigregister, METH_O, NULL},
	 { "Rack_swiginit", Rack_swiginit, METH_VARARGS, NULL},
	 { "new_Bag", _wrap_new_Bag, METH_VARARGS, NULL},
	 { "Bag_clear", _wrap_Bag_clear, METH_O, NULL},
	 { "Bag_exch", _wrap_Bag_exch, METH_VARARGS, NULL},
	 { "Bag_pluck", _wrap_Bag_pluck, METH_O, NULL},
	 { "Bag_removeLetters", _wrap_Bag_removeLetters, METH_VARARGS, NULL},
	 { "Bag_removeLetter", _wrap_Bag_removeLetter, METH_VARARGS, NULL},
	 { "Bag_letterCounts", _wrap_Bag_letterCounts, METH_VARARGS, NULL},
	 { "Bag_toss", _wrap_Bag_toss, METH_VARARGS, NULL},
	 { "Bag_refill", _wrap_Bag_refill, METH_VARARGS, NULL},
	 { "Bag_prepareFullBag", _wrap_Bag_prepareFullBag, METH_O, NULL},
	 { "Bag_fullBagTileCount", _wrap_Bag_fullBagTileCount, METH_O, NULL},
	 { "Bag_empty", _wrap_Bag_empty, METH_O, NULL},
	 { "Bag_size", _wrap_Bag_size, METH_O, NULL},
	 { "Bag_tiles", _wrap_Bag_tiles, METH_O, NULL},
	 { "Bag_shuffledTiles", _wrap_Bag_shuffledTiles, METH_O, NULL},
	 { "Bag_someShuffledTiles", _wrap_Bag_someShuffledTiles, METH_O, NULL},
	 { "Bag_probabilityOfDrawingFromFullBag", _wrap_Bag_probabilityOfDrawingFromFullBag, METH_O, NULL},
	 { "Bag_probabilityOfDrawingFromBag", _wrap_Bag_probabilityOfDrawingFromBag, METH_VARARGS, NULL},
	 { "Bag_probabilityOfDrawing", _wrap_Bag_probabilityOfDrawing, METH_VARARGS, NULL},
	 { "Bag_toString", _wrap_Bag_toString, METH_O, NULL},
	 { "delete_Bag", _wrap_delete_Bag, METH_O, NULL},
	 { "Bag_swigregister", Bag_swigregister, METH_O, NULL},
	 { "Bag_swiginit", Bag_swiginit, METH_VARARGS, NULL},
	 { "new_Board", _wrap_new_Board, METH_VARARGS, NULL},
	 { "Board_prepareEmptyBoard", _wrap_Board_prepareEmptyBoard, METH_O, NULL},
	 { "Board_width", _wrap_Board_width, METH_O, NULL},
	 { "Board_height", _wrap_Board_height, METH_O, NULL},
	 { "Board_tilesNotOnBoard", _wrap_Board_tilesNotOnBoard, METH_O, NULL},
	 { "Board_tilesOnBoard", _wrap_Board_tilesOnBoard, METH_O, NULL},
	 { "Board_isEmpty", _wrap_Board_isEmpty, METH_O, NULL},
	 { "Board_makeMove", _wrap_Board_makeMove, METH_VARARGS, NULL},
	 { "Board_allWordsFormedBy", _wrap_Board_allWordsFormedBy, METH_VARARGS, NULL},
	 { "Board_isConnected", _wrap_Board_isConnected, METH_VARARGS, NULL},
	 { "Board_isUnacceptableOpeningMove", _wrap_Board_isUnacceptableOpeningMove, METH_VARARGS, NULL},
	 { "Board_updateBritishness", _wrap_Board_updateBritishness, METH_O, NULL},
	 { "Board_score", _wrap_Board_score, METH_VARARGS, NULL},
	 { "Board_prettyTilesOfMove", _wrap_Board_prettyTilesOfMove, METH_VARARGS, NULL},
	 { "Board_sanitizedTilesOfMove", _wrap_Board_sanitizedTilesOfMove, METH_VARARGS, NULL},
	 { "Board_toString", _wrap_Board_toString, METH_O, NULL},
	 { "Board_htmlBoard", _wrap_Board_htmlBoard, METH_VARARGS, NULL},
	 { "Board_htmlKey", _wrap_Board_htmlKey, METH_O, NULL},
	 { "Board_tileInformation", _wrap_Board_tileInformation, METH_VARARGS, NULL},
	 { "Board_letter", _wrap_Board_letter, METH_VARARGS, NULL},
	 { "Board_isBlank", _wrap_Board_isBlank, METH_VARARGS, NULL},
	 { "Board_isBritish", _wrap_Board_isBritish, METH_VARARGS, NULL},
	 { "Board_vcross", _wrap_Board_vcross, METH_VARARGS, NULL},
	 { "Board_setVCross", _wrap_Board_setVCross, METH_VARARGS, NULL},
	 { "Board_hcross", _wrap_Board_hcross, METH_VARARGS, NULL},
	 { "Board_setHCross", _wrap_Board_setHCross, METH_VARARGS, NULL},
	 { "delete_Board", _wrap_delete_Board, METH_O, NULL},
	 { "Board_swigregister", Board_swigregister, METH_O, NULL},
	 { "Board_swiginit", Board_swiginit, METH_VARARGS, NULL},
	 { "new_BoardParameters", _wrap_new_BoardParameters, METH_NOARGS, NULL},
	 { "BoardParameters_Serialize", _wrap_BoardParameters_Serialize, METH_VARARGS, NULL},
	 { "BoardParameters_Deserialize", _wrap_BoardParameters_Deserialize, METH_O, NULL},
	 { "BoardParameters_width", _wrap_BoardParameters_width, METH_O, NULL},
	 { "BoardParameters_setWidth", _wrap_BoardParameters_setWidth, METH_VARARGS, NULL},
	 { "BoardParameters_height", _wrap_BoardParameters_height, METH_O, NULL},
	 { "BoardParameters_setHeight", _wrap_BoardParameters_setHeight, METH_VARARGS, NULL},
	 { "BoardParameters_startRow", _wrap_BoardParameters_startRow, METH_O, NULL},
	 { "BoardParameters_setStartRow", _wrap_BoardParameters_setStartRow, METH_VARARGS, NULL},
	 { "BoardParameters_startColumn", _wrap_BoardParameters_startColumn, METH_O, NULL},
	 { "BoardParameters_setStartColumn", _wrap_BoardParameters_setStartColumn, METH_VARARGS, NULL},
	 { "BoardParameters_letterMultiplier", _wrap_BoardParameters_letterMultiplier, METH_VARARGS, NULL},
	 { "BoardParameters_setLetterMultiplier", _wrap_BoardParameters_setLetterMultiplier, METH_VARARGS, NULL},
	 { "BoardParameters_wordMultiplier", _wrap_BoardParameters_wordMultiplier, METH_VARARGS, NULL},
	 { "BoardParameters_setWordMultiplier", _wrap_BoardParameters_setWordMultiplier, METH_VARARGS, NULL},
	 { "BoardParameters_name", _wrap_BoardParameters_name, METH_O, NULL},
	 { "BoardParameters_setName", _wrap_BoardParameters_setName, METH_VARARGS, NULL},
	 { "delete_BoardParameters", _wrap_delete_BoardParameters, METH_O, NULL},
	 { "BoardParameters_swigregister", BoardParameters_swigregister, METH_O, NULL},
	 { "BoardParameters_swiginit", BoardParameters_swiginit, METH_VARARGS, NULL},
	 { "new_EnglishBoard", _wrap_new_EnglishBoard, METH_NOARGS, NULL},
	 { "delete_EnglishBoard", _wrap_delete_EnglishBoard, METH_O, NULL},
	 { "EnglishBoard_swigregister", EnglishBoard_swigregister, METH_O, NULL},
	 { "EnglishBoard_swiginit", EnglishBoard_swiginit, METH_VARARGS, NULL},
	 { "delete_Evaluator", _wrap_delete_Evaluator, METH_O, NULL},
	 { "Evaluator_equity", _wrap_Evaluator_equity, METH_VARARGS, NULL},
	 { "Evaluator_playerConsideration", _wrap_Evaluator_playerConsideration, METH_VARARGS, NULL},
	 { "Evaluator_sharedConsideration", _wrap_Evaluator_sharedConsideration, METH_VARARGS, NULL},
	 { "Evaluator_leaveValue", _wrap_Evaluator_leaveValue, METH_VARARGS, NULL},
	 { "new_Evaluator", _wrap_new_Evaluator, METH_NOARGS, NULL},
	 { "Evaluator_swigregister", Evaluator_swigregister, METH_O, NULL},
	 { "Evaluator_swiginit", Evaluator_swiginit, METH_VARARGS, NULL},
	 { "delete_ScorePlusLeaveEvaluator", _wrap_delete_ScorePlusLeaveEvaluator, METH_O, NULL},
	 { "ScorePlusLeaveEvaluator_equity", _wrap_ScorePlusLeaveEvaluator_equity, METH_VARARGS, NULL},
	 { "ScorePlusLeaveEvaluator_playerConsideration", _wrap_ScorePlusLeaveEvaluator_playerConsideration, METH_VARARGS, NULL},
	 { "ScorePlusLeaveEvaluator_sharedConsideration", _wrap_ScorePlusLeaveEvaluator_sharedConsideration, METH_VARARGS, NULL},
	 { "ScorePlusLeaveEvaluator_leaveValue", _wrap_ScorePlusLeaveEvaluator_leaveValue, METH_VARARGS, NULL},
	 { "new_ScorePlusLeaveEvaluator", _wrap_new_ScorePlusLeaveEvaluator, METH_NOARGS, NULL},
	 { "ScorePlusLeaveEvaluator_swigregister", ScorePlusLeaveEvaluator_swigregister, METH_O, NULL},
	 { "ScorePlusLeaveEvaluator_swiginit", ScorePlusLeaveEvaluator_swiginit, METH_VARARGS, NULL},
	 { "CatchallEvaluator_equity", _wrap_CatchallEvaluator_equity, METH_VARARGS, NULL},
	 { "CatchallEvaluator_endgameResult", _wrap_CatchallEvaluator_endgameResult, METH_VARARGS, NULL},
	 { "new_CatchallEvaluator", _wrap_new_CatchallEvaluator, METH_NOARGS, NULL},
	 { "delete_CatchallEvaluator", _wrap_delete_CatchallEvaluator, METH_O, NULL},
	 { "CatchallEvaluator_swigregister", CatchallEvaluator_swigregister, METH_O, NULL},
	 { "CatchallEvaluator_swiginit", CatchallEvaluator_swiginit, METH_VARARGS, NULL},
	 { "new_Player", _wrap_new_Player, METH_VARARGS, NULL},
	 { "Player_setName", _wrap_Player_setName, METH_VARARGS, NULL},
	 { "Player_name", _wrap_Player_name, METH_O, NULL},
	 { "Player_setAbbreviatedName", _wrap_Player_setAbbreviatedName, METH_VARARGS, NULL},
	 { "Player_abbreviatedName", _wrap_Player_abbreviatedName, METH_O, NULL},
	 { "Player_setType", _wrap_Player_setType, METH_VARARGS, NULL},
	 { "Player_type", _wrap_Player_type, METH_O, NULL},
	 { "Player_setComputerPlayer", _wrap_Player_setComputerPlayer, METH_VARARGS, NULL},
	 { "Player_computerPlayer", _wrap_Player_computerPlayer, METH_O, NULL},
	 { "Player_id", _wrap_Player_id, METH_O, NULL},
	 { "Player_setId", _wrap_Player_setId, METH_VARARGS, NULL},
	 { "Player_setRack", _wrap_Player_setRack, METH_VARARGS, NULL},
	 { "Player_rack", _wrap_Player_rack, METH_O, NULL},
	 { "Player_setScore", _wrap_Player_setScore, METH_VARARGS, NULL},
	 { "Player_score", _wrap_Player_score, METH_O, NULL},
	 { "Player_addToScore", _wrap_Player_addToScore, METH_VARARGS, NULL},
	 { "Player_drawnLetters", _wrap_Player_drawnLetters, METH_O, NULL},
	 { "Player_setDrawnLetters", _wrap_Player_setDrawnLetters, METH_VARARGS, NULL},
	 { "Player_racksAreKnown", _wrap_Player_racksAreKnown, METH_O, NULL},
	 { "Player_setRacksAreKnown", _wrap_Player_setRacksAreKnown, METH_VARARGS, NULL},
	 { "Player_positionallyEqual", _wrap_Player_positionallyEqual, METH_VARARGS, NULL},
	 { "Player_storeInformationToString", _wrap_Player_storeInformationToString, METH_O, NULL},
	 { "Player_loadInformationFromString", _wrap_Player_loadInformationFromString, METH_VARARGS, NULL},
	 { "Player_makePlayerFromString", _wrap_Player_makePlayerFromString, METH_O, NULL},
	 { "delete_Player", _wrap_delete_Player, METH_O, NULL},
	 { "Player_swigregister", Player_swigregister, METH_O, NULL},
	 { "Player_swiginit", Player_swiginit, METH_VARARGS, NULL},
	 { "new_PlayerList", _wrap_new_PlayerList, METH_NOARGS, NULL},
	 { "PlayerList_playerForId", _wrap_PlayerList_playerForId, METH_VARARGS, NULL},
	 { "PlayerList_playerForName", _wrap_PlayerList_playerForName, METH_VARARGS, NULL},
	 { "delete_PlayerList", _wrap_delete_PlayerList, METH_O, NULL},
	 { "PlayerList_swigregister", PlayerList_swigregister, METH_O, NULL},
	 { "PlayerList_swiginit", PlayerList_swiginit, METH_VARARGS, NULL},
	 { "new_HistoryLocation", _wrap_new_HistoryLocation, METH_VARARGS, NULL},
	 { "HistoryLocation_playerId", _wrap_HistoryLocation_playerId, METH_O, NULL},
	 { "HistoryLocation_turnNumber", _wrap_HistoryLocation_turnNumber, METH_O, NULL},
	 { "delete_HistoryLocation", _wrap_delete_HistoryLocation, METH_O, NULL},
	 { "HistoryLocation_swigregister", HistoryLocation_swigregister, METH_O, NULL},
	 { "HistoryLocation_swiginit", HistoryLocation_swiginit, METH_VARARGS, NULL},
	 { "__lt__", _wrap___lt__, METH_VARARGS, NULL},
	 { "new_GamePosition", _wrap_new_GamePosition, METH_VARARGS, NULL},
	 { "GamePosition_kibitz", _wrap_GamePosition_kibitz, METH_VARARGS, NULL},
	 { "GamePosition_moves", _wrap_GamePosition_moves, METH_O, NULL},
	 { "GamePosition_setMoves", _wrap_GamePosition_setMoves, METH_VARARGS, NULL},
	 { "GamePosition_staticBestMove", _wrap_GamePosition_staticBestMove, METH_O, NULL},
	 { "GamePosition_removeMove", _wrap_GamePosition_removeMove, METH_VARARGS, NULL},
	 { "GamePosition_removeAllMoves", _wrap_GamePosition_removeAllMoves, METH_O, NULL},
	 { "GamePosition_addMove", _wrap_GamePosition_addMove, METH_VARARGS, NULL},
	 { "GamePosition_makeSureMoveListContainsMoves", _wrap_GamePosition_makeSureMoveListContainsMoves, METH_VARARGS, NULL},
	 { "GamePosition_kibitzAs", _wrap_GamePosition_kibitzAs, METH_VARARGS, NULL},
	 { "GamePosition_ensureMovePrettiness", _wrap_GamePosition_ensureMovePrettiness, METH_VARARGS, NULL},
	 { "GamePosition_ensureMoveTilesDoNotIncludePlayThru", _wrap_GamePosition_ensureMoveTilesDoNotIncludePlayThru, METH_VARARGS, NULL},
	 { "GamePosition_addAndSetMoveMade", _wrap_GamePosition_addAndSetMoveMade, METH_VARARGS, NULL},
	 { "GamePosition_validateMove", _wrap_GamePosition_validateMove, METH_VARARGS, NULL},
	 { "GamePosition_formsAcceptableWords", _wrap_GamePosition_formsAcceptableWords, METH_VARARGS, NULL},
	 { "GamePosition_allWordsFormedBy", _wrap_GamePosition_allWordsFormedBy, METH_VARARGS, NULL},
	 { "GamePosition_isConnected", _wrap_GamePosition_isConnected, METH_VARARGS, NULL},
	 { "GamePosition_isAcceptableWord", _wrap_GamePosition_isAcceptableWord, METH_VARARGS, NULL},
	 { "GamePosition_exchangeAllowed", _wrap_GamePosition_exchangeAllowed, METH_O, NULL},
	 { "GamePosition_handleOverdraw", _wrap_GamePosition_handleOverdraw, METH_VARARGS, NULL},
	 { "GamePosition_makeMove", _wrap_GamePosition_makeMove, METH_VARARGS, NULL},
	 { "GamePosition_ensureBoardIsPreparedForAnalysis", _wrap_GamePosition_ensureBoardIsPreparedForAnalysis, METH_O, NULL},
	 { "GamePosition_scoreMove", _wrap_GamePosition_scoreMove, METH_VARARGS, NULL},
	 { "GamePosition_calculateEquity", _wrap_GamePosition_calculateEquity, METH_VARARGS, NULL},
	 { "GamePosition_calculateScore", _wrap_GamePosition_calculateScore, METH_VARARGS, NULL},
	 { "GamePosition_calculatePlayerConsideration", _wrap_GamePosition_calculatePlayerConsideration, METH_VARARGS, NULL},
	 { "GamePosition_leaveValue", _wrap_GamePosition_leaveValue, METH_VARARGS, NULL},
	 { "GamePosition_calculateSharedConsideration", _wrap_GamePosition_calculateSharedConsideration, METH_VARARGS, NULL},
	 { "GamePosition_setBoard", _wrap_GamePosition_setBoard, METH_VARARGS, NULL},
	 { "GamePosition_board", _wrap_GamePosition_board, METH_O, NULL},
	 { "GamePosition_bag", _wrap_GamePosition_bag, METH_O, NULL},
	 { "GamePosition_setDrawingOrder", _wrap_GamePosition_setDrawingOrder, METH_VARARGS, NULL},
	 { "GamePosition_drawingOrder", _wrap_GamePosition_drawingOrder, METH_O, NULL},
	 { "GamePosition_unseenBag", _wrap_GamePosition_unseenBag, METH_O, NULL},
	 { "GamePosition_unseenBagFromPlayerPerspective", _wrap_GamePosition_unseenBagFromPlayerPerspective, METH_VARARGS, NULL},
	 { "GamePosition_ensureProperBag", _wrap_GamePosition_ensureProperBag, METH_O, NULL},
	 { "GamePosition_setEmptyBoard", _wrap_GamePosition_setEmptyBoard, METH_O, NULL},
	 { "GamePosition_currentPlayer", _wrap_GamePosition_currentPlayer, METH_VARARGS, NULL},
	 { "GamePosition_setCurrentPlayer", _wrap_GamePosition_setCurrentPlayer, METH_VARARGS, NULL},
	 { "GamePosition_playerOnTurn", _wrap_GamePosition_playerOnTurn, METH_VARARGS, NULL},
	 { "GamePosition_setPlayerOnTurn", _wrap_GamePosition_setPlayerOnTurn, METH_VARARGS, NULL},
	 { "GamePosition_humanPlayer", _wrap_GamePosition_humanPlayer, METH_O, NULL},
	 { "GamePosition_nextPlayer", _wrap_GamePosition_nextPlayer, METH_O, NULL},
	 { "GamePosition_nextPlayerOfType", _wrap_GamePosition_nextPlayerOfType, METH_VARARGS, NULL},
	 { "GamePosition_playerWithAbbreviatedName", _wrap_GamePosition_playerWithAbbreviatedName, METH_VARARGS, NULL},
	 { "GamePosition_players", _wrap_GamePosition_players, METH_O, NULL},
	 { "GamePosition_endgameAdjustedScores", _wrap_GamePosition_endgameAdjustedScores, METH_O, NULL},
	 { "GamePosition_leadingPlayers", _wrap_GamePosition_leadingPlayers, METH_O, NULL},
	 { "GamePosition_spread", _wrap_GamePosition_spread, METH_VARARGS, NULL},
	 { "GamePosition_gameOver", _wrap_GamePosition_gameOver, METH_O, NULL},
	 { "GamePosition_adjustScoresToFinishGame", _wrap_GamePosition_adjustScoresToFinishGame, METH_O, NULL},
	 { "GamePosition_adjustScoresToFinishPassedOutGame", _wrap_GamePosition_adjustScoresToFinishPassedOutGame, METH_O, NULL},
	 { "GamePosition_doesMoveEndGame", _wrap_GamePosition_doesMoveEndGame, METH_VARARGS, NULL},
	 { "GamePosition_deadwood", _wrap_GamePosition_deadwood, METH_VARARGS, NULL},
	 { "GamePosition_replenishAndSetRack", _wrap_GamePosition_replenishAndSetRack, METH_VARARGS, NULL},
	 { "GamePosition_setCurrentPlayerRack", _wrap_GamePosition_setCurrentPlayerRack, METH_VARARGS, NULL},
	 { "GamePosition_setPlayerRack", _wrap_GamePosition_setPlayerRack, METH_VARARGS, NULL},
	 { "GamePosition_setOppRack", _wrap_GamePosition_setOppRack, METH_VARARGS, NULL},
	 { "GamePosition_oppRack", _wrap_GamePosition_oppRack, METH_O, NULL},
	 { "GamePosition_canSetCurrentPlayerRackWithoutBagExpansion", _wrap_GamePosition_canSetCurrentPlayerRackWithoutBagExpansion, METH_VARARGS, NULL},
	 { "GamePosition_canSetPlayerRackWithoutBagExpansion", _wrap_GamePosition_canSetPlayerRackWithoutBagExpansion, METH_VARARGS, NULL},
	 { "GamePosition_resetBag", _wrap_GamePosition_resetBag, METH_O, NULL},
	 { "GamePosition_setBag", _wrap_GamePosition_setBag, METH_VARARGS, NULL},
	 { "GamePosition_setMoveMade", _wrap_GamePosition_setMoveMade, METH_VARARGS, NULL},
	 { "GamePosition_moveMade", _wrap_GamePosition_moveMade, METH_O, NULL},
	 { "GamePosition_setCommittedMove", _wrap_GamePosition_setCommittedMove, METH_VARARGS, NULL},
	 { "GamePosition_committedMove", _wrap_GamePosition_committedMove, METH_O, NULL},
	 { "GamePosition_setTileBonus", _wrap_GamePosition_setTileBonus, METH_VARARGS, NULL},
	 { "GamePosition_prepareForCommit", _wrap_GamePosition_prepareForCommit, METH_O, NULL},
	 { "GamePosition_boardAfterMoveMade", _wrap_GamePosition_boardAfterMoveMade, METH_O, NULL},
	 { "GamePosition_resetMoveMade", _wrap_GamePosition_resetMoveMade, METH_O, NULL},
	 { "GamePosition_incrementTurn", _wrap_GamePosition_incrementTurn, METH_VARARGS, NULL},
	 { "GamePosition_turnNumber", _wrap_GamePosition_turnNumber, METH_O, NULL},
	 { "GamePosition_setNestedness", _wrap_GamePosition_setNestedness, METH_VARARGS, NULL},
	 { "GamePosition_incrementNestedness", _wrap_GamePosition_incrementNestedness, METH_O, NULL},
	 { "GamePosition_nestedness", _wrap_GamePosition_nestedness, METH_O, NULL},
	 { "GamePosition_nestednessIndentation", _wrap_GamePosition_nestednessIndentation, METH_O, NULL},
	 { "GamePosition_scorelessTurnsInARow", _wrap_GamePosition_scorelessTurnsInARow, METH_O, NULL},
	 { "GamePosition_location", _wrap_GamePosition_location, METH_O, NULL},
	 { "GamePosition_explanatoryNote", _wrap_GamePosition_explanatoryNote, METH_O, NULL},
	 { "GamePosition_setExplanatoryNote", _wrap_GamePosition_setExplanatoryNote, METH_VARARGS, NULL},
	 { "GamePosition_underlyingBoardReference", _wrap_GamePosition_underlyingBoardReference, METH_O, NULL},
	 { "delete_GamePosition", _wrap_delete_GamePosition, METH_O, NULL},
	 { "GamePosition_swigregister", GamePosition_swigregister, METH_O, NULL},
	 { "GamePosition_swiginit", GamePosition_swiginit, METH_VARARGS, NULL},
	 { "new_History", _wrap_new_History, METH_NOARGS, NULL},
	 { "History_players", _wrap_History_players, METH_O, NULL},
	 { "History_lastPlayer", _wrap_History_lastPlayer, METH_O, NULL},
	 { "History_lastPosition", _wrap_History_lastPosition, METH_O, NULL},
	 { "History_maximumTurnNumber", _wrap_History_maximumTurnNumber, METH_O, NULL},
	 { "History_lastLocation", _wrap_History_lastLocation, METH_O, NULL},
	 { "History_currentLocation", _wrap_History_currentLocation, METH_O, NULL},
	 { "History_currentPosition", _wrap_History_currentPosition, METH_VARARGS, NULL},
	 { "History_positionsFacedBy", _wrap_History_positionsFacedBy, METH_VARARGS, NULL},
	 { "History_nextPosition", _wrap_History_nextPosition, METH_VARARGS, NULL},
	 { "History_nextPositionFacedBy", _wrap_History_nextPositionFacedBy, METH_VARARGS, NULL},
	 { "History_previousPosition", _wrap_History_previousPosition, METH_VARARGS, NULL},
	 { "History_firstPosition", _wrap_History_firstPosition, METH_VARARGS, NULL},
	 { "History_positionAt", _wrap_History_positionAt, METH_VARARGS, NULL},
	 { "delete_History", _wrap_delete_History, METH_O, NULL},
	 { "History_swigregister", History_swigregister, METH_O, NULL},
	 { "History_swiginit", History_swiginit, METH_VARARGS, NULL},
	 { "new_Game", _wrap_new_Game, METH_NOARGS, NULL},
	 { "delete_Game", _wrap_delete_Game, METH_O, NULL},
	 { "Game_reset", _wrap_Game_reset, METH_O, NULL},
	 { "Game_setPlayers", _wrap_Game_setPlayers, METH_VARARGS, NULL},
	 { "Game_players", _wrap_Game_players, METH_O, NULL},
	 { "Game_hasPositions", _wrap_Game_hasPositions, METH_O, NULL},
	 { "Game_history", _wrap_Game_history, METH_O, NULL},
	 { "Game_addPosition", _wrap_Game_addPosition, METH_O, NULL},
	 { "Game_currentPosition", _wrap_Game_currentPosition, METH_VARARGS, NULL},
	 { "Game_setCurrentPosition", _wrap_Game_setCurrentPosition, METH_VARARGS, NULL},
	 { "Game_associateComputerPlayer", _wrap_Game_associateComputerPlayer, METH_VARARGS, NULL},
	 { "Game_computerPlayer", _wrap_Game_computerPlayer, METH_VARARGS, NULL},
	 { "Game_setDefaultComputerPlayer", _wrap_Game_setDefaultComputerPlayer, METH_VARARGS, NULL},
	 { "Game_associateKnownComputerPlayers", _wrap_Game_associateKnownComputerPlayers, METH_O, NULL},
	 { "Game_defaultComputerPlayer", _wrap_Game_defaultComputerPlayer, METH_O, NULL},
	 { "Game_haveComputerPlay", _wrap_Game_haveComputerPlay, METH_VARARGS, NULL},
	 { "Game_advanceToNoncomputerPlayer", _wrap_Game_advanceToNoncomputerPlayer, METH_O, NULL},
	 { "Game_setCandidate", _wrap_Game_setCandidate, METH_VARARGS, NULL},
	 { "Game_candidate", _wrap_Game_candidate, METH_O, NULL},
	 { "Game_resetCandidature", _wrap_Game_resetCandidature, METH_O, NULL},
	 { "Game_commitCandidate", _wrap_Game_commitCandidate, METH_VARARGS, NULL},
	 { "Game_commitMove", _wrap_Game_commitMove, METH_VARARGS, NULL},
	 { "Game_description", _wrap_Game_description, METH_O, NULL},
	 { "Game_setDescription", _wrap_Game_setDescription, METH_VARARGS, NULL},
	 { "Game_title", _wrap_Game_title, METH_O, NULL},
	 { "Game_setTitle", _wrap_Game_setTitle, METH_VARARGS, NULL},
	 { "Game_swigregister", Game_swigregister, METH_O, NULL},
	 { "Game_swiginit", Game_swiginit, METH_VARARGS, NULL},
	 { "new_GameParameters", _wrap_new_GameParameters, METH_NOARGS, NULL},
	 { "GameParameters_minimumTilesForExchange", _wrap_GameParameters_minimumTilesForExchange, METH_O, NULL},
	 { "GameParameters_setMinimumTilesForExchange", _wrap_GameParameters_setMinimumTilesForExchange, METH_VARARGS, NULL},
	 { "GameParameters_numberOfScorelessTurnsThatEndsGame", _wrap_GameParameters_numberOfScorelessTurnsThatEndsGame, METH_O, NULL},
	 { "GameParameters_setNumberOfScorelessTurnsThatEndsGame", _wrap_GameParameters_setNumberOfScorelessTurnsThatEndsGame, METH_VARARGS, NULL},
	 { "GameParameters_bingoBonus", _wrap_GameParameters_bingoBonus, METH_O, NULL},
	 { "GameParameters_setBingoBonus", _wrap_GameParameters_setBingoBonus, METH_VARARGS, NULL},
	 { "GameParameters_rackSize", _wrap_GameParameters_rackSize, METH_O, NULL},
	 { "GameParameters_setRackSize", _wrap_GameParameters_setRackSize, METH_VARARGS, NULL},
	 { "GameParameters_overdrawPenalty", _wrap_GameParameters_overdrawPenalty, METH_O, NULL},
	 { "GameParameters_setOverdrawPenalty", _wrap_GameParameters_setOverdrawPenalty, METH_VARARGS, NULL},
	 { "delete_GameParameters", _wrap_delete_GameParameters, METH_O, NULL},
	 { "GameParameters_swigregister", GameParameters_swigregister, METH_O, NULL},
	 { "GameParameters_swiginit", GameParameters_swiginit, METH_VARARGS, NULL},
	 { "new_EnglishParameters", _wrap_new_EnglishParameters, METH_NOARGS, NULL},
	 { "delete_EnglishParameters", _wrap_delete_EnglishParameters, METH_O, NULL},
	 { "EnglishParameters_swigregister", EnglishParameters_swigregister, METH_O, NULL},
	 { "EnglishParameters_swiginit", EnglishParameters_swiginit, METH_VARARGS, NULL},
	 { "new_AveragedValue", _wrap_new_AveragedValue, METH_NOARGS, NULL},
	 { "AveragedValue_incorporateValue", _wrap_AveragedValue_incorporateValue, METH_VARARGS, NULL},
	 { "AveragedValue_clear", _wrap_AveragedValue_clear, METH_O, NULL},
	 { "AveragedValue_valueSum", _wrap_AveragedValue_valueSum, METH_O, NULL},
	 { "AveragedValue_squaredValueSum", _wrap_AveragedValue_squaredValueSum, METH_O, NULL},
	 { "AveragedValue_incorporatedValues", _wrap_AveragedValue_incorporatedValues, METH_O, NULL},
	 { "AveragedValue_hasValues", _wrap_AveragedValue_hasValues, METH_O, NULL},
	 { "AveragedValue_averagedValue", _wrap_AveragedValue_averagedValue, METH_O, NULL},
	 { "AveragedValue_standardDeviation", _wrap_AveragedValue_standardDeviation, METH_O, NULL},
	 { "delete_AveragedValue", _wrap_delete_AveragedValue, METH_O, NULL},
	 { "AveragedValue_swigregister", AveragedValue_swigregister, METH_O, NULL},
	 { "AveragedValue_swiginit", AveragedValue_swiginit, METH_VARARGS, NULL},
	 { "PositionStatistics_getStatistic", _wrap_PositionStatistics_getStatistic, METH_VARARGS, NULL},
	 { "PositionStatistics_score_set", _wrap_PositionStatistics_score_set, METH_VARARGS, NULL},
	 { "PositionStatistics_score_get", _wrap_PositionStatistics_score_get, METH_O, NULL},
	 { "PositionStatistics_bingos_set", _wrap_PositionStatistics_bingos_set, METH_VARARGS, NULL},
	 { "PositionStatistics_bingos_get", _wrap_PositionStatistics_bingos_get, METH_O, NULL},
	 { "new_PositionStatistics", _wrap_new_PositionStatistics, METH_NOARGS, NULL},
	 { "delete_PositionStatistics", _wrap_delete_PositionStatistics, METH_O, NULL},
	 { "PositionStatistics_swigregister", PositionStatistics_swigregister, METH_O, NULL},
	 { "PositionStatistics_swiginit", PositionStatistics_swiginit, METH_VARARGS, NULL},
	 { "Level_setNumberScores", _wrap_Level_setNumberScores, METH_VARARGS, NULL},
	 { "Level_statistics_set", _wrap_Level_statistics_set, METH_VARARGS, NULL},
	 { "Level_statistics_get", _wrap_Level_statistics_get, METH_O, NULL},
	 { "new_Level", _wrap_new_Level, METH_NOARGS, NULL},
	 { "delete_Level", _wrap_delete_Level, METH_O, NULL},
	 { "Level_swigregister", Level_swigregister, METH_O, NULL},
	 { "Level_swiginit", Level_swiginit, METH_VARARGS, NULL},
	 { "LevelList_setNumberLevels", _wrap_LevelList_setNumberLevels, METH_VARARGS, NULL},
	 { "new_LevelList", _wrap_new_LevelList, METH_NOARGS, NULL},
	 { "delete_LevelList", _wrap_delete_LevelList, METH_O, NULL},
	 { "LevelList_swigregister", LevelList_swigregister, METH_O, NULL},
	 { "LevelList_swiginit", LevelList_swiginit, METH_VARARGS, NULL},
	 { "new_SimmedMove", _wrap_new_SimmedMove, METH_O, NULL},
	 { "SimmedMove_calculateEquity", _wrap_SimmedMove_calculateEquity, METH_O, NULL},
	 { "SimmedMove_calculateWinPercentage", _wrap_SimmedMove_calculateWinPercentage, METH_O, NULL},
	 { "SimmedMove_clear", _wrap_SimmedMove_clear, METH_O, NULL},
	 { "SimmedMove_includeInSimulation", _wrap_SimmedMove_includeInSimulation, METH_O, NULL},
	 { "SimmedMove_setIncludeInSimulation", _wrap_SimmedMove_setIncludeInSimulation, METH_VARARGS, NULL},
	 { "SimmedMove_id", _wrap_SimmedMove_id, METH_O, NULL},
	 { "SimmedMove_move_set", _wrap_SimmedMove_move_set, METH_VARARGS, NULL},
	 { "SimmedMove_move_get", _wrap_SimmedMove_move_get, METH_O, NULL},
	 { "SimmedMove_levels_set", _wrap_SimmedMove_levels_set, METH_VARARGS, NULL},
	 { "SimmedMove_levels_get", _wrap_SimmedMove_levels_get, METH_O, NULL},
	 { "SimmedMove_residual_set", _wrap_SimmedMove_residual_set, METH_VARARGS, NULL},
	 { "SimmedMove_residual_get", _wrap_SimmedMove_residual_get, METH_O, NULL},
	 { "SimmedMove_gameSpread_set", _wrap_SimmedMove_gameSpread_set, METH_VARARGS, NULL},
	 { "SimmedMove_gameSpread_get", _wrap_SimmedMove_gameSpread_get, METH_O, NULL},
	 { "SimmedMove_wins_set", _wrap_SimmedMove_wins_set, METH_VARARGS, NULL},
	 { "SimmedMove_wins_get", _wrap_SimmedMove_wins_get, METH_O, NULL},
	 { "SimmedMove_getPositionStatistics", _wrap_SimmedMove_getPositionStatistics, METH_VARARGS, NULL},
	 { "delete_SimmedMove", _wrap_delete_SimmedMove, METH_O, NULL},
	 { "SimmedMove_swigregister", SimmedMove_swigregister, METH_O, NULL},
	 { "SimmedMove_swiginit", SimmedMove_swiginit, METH_VARARGS, NULL},
	 { "SimmedMoveMessage_id_set", _wrap_SimmedMoveMessage_id_set, METH_VARARGS, NULL},
	 { "SimmedMoveMessage_id_get", _wrap_SimmedMoveMessage_id_get, METH_O, NULL},
	 { "SimmedMoveMessage_move_set", _wrap_SimmedMoveMessage_move_set, METH_VARARGS, NULL},
	 { "SimmedMoveMessage_move_get", _wrap_SimmedMoveMessage_move_get, METH_O, NULL},
	 { "SimmedMoveMessage_levels_set", _wrap_SimmedMoveMessage_levels_set, METH_VARARGS, NULL},
	 { "SimmedMoveMessage_levels_get", _wrap_SimmedMoveMessage_levels_get, METH_O, NULL},
	 { "SimmedMoveMessage_score_set", _wrap_SimmedMoveMessage_score_set, METH_VARARGS, NULL},
	 { "SimmedMoveMessage_score_get", _wrap_SimmedMoveMessage_score_get, METH_O, NULL},
	 { "SimmedMoveMessage_bingos_set", _wrap_SimmedMoveMessage_bingos_set, METH_VARARGS, NULL},
	 { "SimmedMoveMessage_bingos_get", _wrap_SimmedMoveMessage_bingos_get, METH_O, NULL},
	 { "SimmedMoveMessage_residual_set", _wrap_SimmedMoveMessage_residual_set, METH_VARARGS, NULL},
	 { "SimmedMoveMessage_residual_get", _wrap_SimmedMoveMessage_residual_get, METH_O, NULL},
	 { "SimmedMoveMessage_gameSpread_set", _wrap_SimmedMoveMessage_gameSpread_set, METH_VARARGS, NULL},
	 { "SimmedMoveMessage_gameSpread_get", _wrap_SimmedMoveMessage_gameSpread_get, METH_O, NULL},
	 { "SimmedMoveMessage_wins_set", _wrap_SimmedMoveMessage_wins_set, METH_VARARGS, NULL},
	 { "SimmedMoveMessage_wins_get", _wrap_SimmedMoveMessage_wins_get, METH_O, NULL},
	 { "SimmedMoveMessage_bogowin_set", _wrap_SimmedMoveMessage_bogowin_set, METH_VARARGS, NULL},
	 { "SimmedMoveMessage_bogowin_get", _wrap_SimmedMoveMessage_bogowin_get, METH_O, NULL},
	 { "SimmedMoveMessage_xmlIndent_set", _wrap_SimmedMoveMessage_xmlIndent_set, METH_VARARGS, NULL},
	 { "SimmedMoveMessage_xmlIndent_get", _wrap_SimmedMoveMessage_xmlIndent_get, METH_O, NULL},
	 { "new_SimmedMoveMessage", _wrap_new_SimmedMoveMessage, METH_NOARGS, NULL},
	 { "delete_SimmedMoveMessage", _wrap_delete_SimmedMoveMessage, METH_O, NULL},
	 { "SimmedMoveMessage_swigregister", SimmedMoveMessage_swigregister, METH_O, NULL},
	 { "SimmedMoveMessage_swiginit", SimmedMoveMessage_swiginit, METH_VARARGS, NULL},
	 { "SimmedMoveConstants_game_set", _wrap_SimmedMoveConstants_game_set, METH_VARARGS, NULL},
	 { "SimmedMoveConstants_game_get", _wrap_SimmedMoveConstants_game_get, METH_O, NULL},
	 { "SimmedMoveConstants_startPlayerId_set", _wrap_SimmedMoveConstants_startPlayerId_set, METH_VARARGS, NULL},
	 { "SimmedMoveConstants_startPlayerId_get", _wrap_SimmedMoveConstants_startPlayerId_get, METH_O, NULL},
	 { "SimmedMoveConstants_playerCount_set", _wrap_SimmedMoveConstants_playerCount_set, METH_VARARGS, NULL},
	 { "SimmedMoveConstants_playerCount_get", _wrap_SimmedMoveConstants_playerCount_get, METH_O, NULL},
	 { "SimmedMoveConstants_decimalTurns_set", _wrap_SimmedMoveConstants_decimalTurns_set, METH_VARARGS, NULL},
	 { "SimmedMoveConstants_decimalTurns_get", _wrap_SimmedMoveConstants_decimalTurns_get, METH_O, NULL},
	 { "SimmedMoveConstants_levelCount_set", _wrap_SimmedMoveConstants_levelCount_set, METH_VARARGS, NULL},
	 { "SimmedMoveConstants_levelCount_get", _wrap_SimmedMoveConstants_levelCount_get, METH_O, NULL},
	 { "SimmedMoveConstants_ignoreOppos_set", _wrap_SimmedMoveConstants_ignoreOppos_set, METH_VARARGS, NULL},
	 { "SimmedMoveConstants_ignoreOppos_get", _wrap_SimmedMoveConstants_ignoreOppos_get, METH_O, NULL},
	 { "SimmedMoveConstants_isLogging_set", _wrap_SimmedMoveConstants_isLogging_set, METH_VARARGS, NULL},
	 { "SimmedMoveConstants_isLogging_get", _wrap_SimmedMoveConstants_isLogging_get, METH_O, NULL},
	 { "new_SimmedMoveConstants", _wrap_new_SimmedMoveConstants, METH_NOARGS, NULL},
	 { "delete_SimmedMoveConstants", _wrap_delete_SimmedMoveConstants, METH_O, NULL},
	 { "SimmedMoveConstants_swigregister", SimmedMoveConstants_swigregister, METH_O, NULL},
	 { "SimmedMoveConstants_swiginit", SimmedMoveConstants_swiginit, METH_VARARGS, NULL},
	 { "new_SimmedMoveMessageQueue", _wrap_new_SimmedMoveMessageQueue, METH_NOARGS, NULL},
	 { "SimmedMoveMessageQueue_push", _wrap_SimmedMoveMessageQueue_push, METH_VARARGS, NULL},
	 { "SimmedMoveMessageQueue_send_terminate_all", _wrap_SimmedMoveMessageQueue_send_terminate_all, METH_O, NULL},
	 { "SimmedMoveMessageQueue_send_terminate_one", _wrap_SimmedMoveMessageQueue_send_terminate_one, METH_VARARGS, NULL},
	 { "SimmedMoveMessageQueue_constants", _wrap_SimmedMoveMessageQueue_constants, METH_O, NULL},
	 { "SimmedMoveMessageQueue_setConstants", _wrap_SimmedMoveMessageQueue_setConstants, METH_VARARGS, NULL},
	 { "delete_SimmedMoveMessageQueue", _wrap_delete_SimmedMoveMessageQueue, METH_O, NULL},
	 { "SimmedMoveMessageQueue_swigregister", SimmedMoveMessageQueue_swigregister, METH_O, NULL},
	 { "SimmedMoveMessageQueue_swiginit", SimmedMoveMessageQueue_swiginit, METH_VARARGS, NULL},
	 { "new_Simulator", _wrap_new_Simulator, METH_NOARGS, NULL},
	 { "delete_Simulator", _wrap_delete_Simulator, METH_O, NULL},
	 { "Simulator_setPosition", _wrap_Simulator_setPosition, METH_VARARGS, NULL},
	 { "Simulator_currentPosition", _wrap_Simulator_currentPosition, METH_VARARGS, NULL},
	 { "Simulator_history", _wrap_Simulator_history, METH_O, NULL},
	 { "Simulator_setLogfile", _wrap_Simulator_setLogfile, METH_VARARGS, NULL},
	 { "Simulator_logfile", _wrap_Simulator_logfile, METH_O, NULL},
	 { "Simulator_setDispatch", _wrap_Simulator_setDispatch, METH_VARARGS, NULL},
	 { "Simulator_dispatch", _wrap_Simulator_dispatch, METH_O, NULL},
	 { "Simulator_logMessage", _wrap_Simulator_logMessage, METH_VARARGS, NULL},
	 { "Simulator_isLogging", _wrap_Simulator_isLogging, METH_O, NULL},
	 { "Simulator_closeLogfile", _wrap_Simulator_closeLogfile, METH_O, NULL},
	 { "Simulator_setIncludedMoves", _wrap_Simulator_setIncludedMoves, METH_VARARGS, NULL},
	 { "Simulator_makeSureConsideredMovesAreIncluded", _wrap_Simulator_makeSureConsideredMovesAreIncluded, METH_O, NULL},
	 { "Simulator_moveConsideredMovesToBeginning", _wrap_Simulator_moveConsideredMovesToBeginning, METH_VARARGS, NULL},
	 { "Simulator_setConsideredMoves", _wrap_Simulator_setConsideredMoves, METH_VARARGS, NULL},
	 { "Simulator_consideredMoves", _wrap_Simulator_consideredMoves, METH_O, NULL},
	 { "Simulator_addConsideredMove", _wrap_Simulator_addConsideredMove, METH_VARARGS, NULL},
	 { "Simulator_isConsideredMove", _wrap_Simulator_isConsideredMove, METH_VARARGS, NULL},
	 { "Simulator_pruneTo", _wrap_Simulator_pruneTo, METH_VARARGS, NULL},
	 { "Simulator_setIgnoreOppos", _wrap_Simulator_setIgnoreOppos, METH_VARARGS, NULL},
	 { "Simulator_ignoreOppos", _wrap_Simulator_ignoreOppos, METH_O, NULL},
	 { "Simulator_simThreadFunc", _wrap_Simulator_simThreadFunc, METH_VARARGS, NULL},
	 { "Simulator_setThreadCount", _wrap_Simulator_setThreadCount, METH_VARARGS, NULL},
	 { "Simulator_resetNumbers", _wrap_Simulator_resetNumbers, METH_O, NULL},
	 { "Simulator_simulate", _wrap_Simulator_simulate, METH_VARARGS, NULL},
	 { "Simulator_simulateOnePosition", _wrap_Simulator_simulateOnePosition, METH_VARARGS, NULL},
	 { "Simulator_incorporateMessage", _wrap_Simulator_incorporateMessage, METH_VARARGS, NULL},
	 { "Simulator_setPartialOppoRack", _wrap_Simulator_setPartialOppoRack, METH_VARARGS, NULL},
	 { "Simulator_partialOppoRack", _wrap_Simulator_partialOppoRack, METH_O, NULL},
	 { "Simulator_randomizeOppoRacks", _wrap_Simulator_randomizeOppoRacks, METH_O, NULL},
	 { "Simulator_randomizeDrawingOrder", _wrap_Simulator_randomizeDrawingOrder, METH_O, NULL},
	 { "Simulator_iterations", _wrap_Simulator_iterations, METH_O, NULL},
	 { "Simulator_hasSimulationResults", _wrap_Simulator_hasSimulationResults, METH_O, NULL},
	 { "Simulator_simmedMoves", _wrap_Simulator_simmedMoves, METH_O, NULL},
	 { "Simulator_moves", _wrap_Simulator_moves, METH_VARARGS, NULL},
	 { "Simulator_simmedMoveForMove", _wrap_Simulator_simmedMoveForMove, METH_VARARGS, NULL},
	 { "Simulator_numLevels", _wrap_Simulator_numLevels, METH_O, NULL},
	 { "Simulator_numPlayersAtLevel", _wrap_Simulator_numPlayersAtLevel, METH_VARARGS, NULL},
	 { "Simulator_swigregister", Simulator_swigregister, METH_O, NULL},
	 { "Simulator_swiginit", Simulator_swiginit, METH_VARARGS, NULL},
	 { "ComputerParameters_secondsPerTurn_set", _wrap_ComputerParameters_secondsPerTurn_set, METH_VARARGS, NULL},
	 { "ComputerParameters_secondsPerTurn_get", _wrap_ComputerParameters_secondsPerTurn_get, METH_O, NULL},
	 { "ComputerParameters_inferring_set", _wrap_ComputerParameters_inferring_set, METH_VARARGS, NULL},
	 { "ComputerParameters_inferring_get", _wrap_ComputerParameters_inferring_get, METH_O, NULL},
	 { "new_ComputerParameters", _wrap_new_ComputerParameters, METH_NOARGS, NULL},
	 { "delete_ComputerParameters", _wrap_delete_ComputerParameters, METH_O, NULL},
	 { "ComputerParameters_swigregister", ComputerParameters_swigregister, METH_O, NULL},
	 { "ComputerParameters_swiginit", ComputerParameters_swiginit, METH_VARARGS, NULL},
	 { "delete_ComputerDispatch", _wrap_delete_ComputerDispatch, METH_O, NULL},
	 { "ComputerDispatch_shouldAbort", _wrap_ComputerDispatch_shouldAbort, METH_O, NULL},
	 { "ComputerDispatch_signalFractionDone", _wrap_ComputerDispatch_signalFractionDone, METH_VARARGS, NULL},
	 { "ComputerDispatch_swigregister", ComputerDispatch_swigregister, METH_O, NULL},
	 { "new_ScalingDispatch", _wrap_new_ScalingDispatch, METH_VARARGS, NULL},
	 { "delete_ScalingDispatch", _wrap_delete_ScalingDispatch, METH_O, NULL},
	 { "ScalingDispatch_shouldAbort", _wrap_ScalingDispatch_shouldAbort, METH_O, NULL},
	 { "ScalingDispatch_signalFractionDone", _wrap_ScalingDispatch_signalFractionDone, METH_VARARGS, NULL},
	 { "ScalingDispatch_swigregister", ScalingDispatch_swigregister, METH_O, NULL},
	 { "ScalingDispatch_swiginit", ScalingDispatch_swiginit, METH_VARARGS, NULL},
	 { "delete_ComputerPlayer", _wrap_delete_ComputerPlayer, METH_O, NULL},
	 { "ComputerPlayer_setParameters", _wrap_ComputerPlayer_setParameters, METH_VARARGS, NULL},
	 { "ComputerPlayer_parameters", _wrap_ComputerPlayer_parameters, METH_O, NULL},
	 { "ComputerPlayer_setPosition", _wrap_ComputerPlayer_setPosition, METH_VARARGS, NULL},
	 { "ComputerPlayer_currentPosition", _wrap_ComputerPlayer_currentPosition, METH_VARARGS, NULL},
	 { "ComputerPlayer_shouldAbort", _wrap_ComputerPlayer_shouldAbort, METH_O, NULL},
	 { "ComputerPlayer_signalFractionDone", _wrap_ComputerPlayer_signalFractionDone, METH_VARARGS, NULL},
	 { "ComputerPlayer_considerMove", _wrap_ComputerPlayer_considerMove, METH_VARARGS, NULL},
	 { "ComputerPlayer_setConsideredMoves", _wrap_ComputerPlayer_setConsideredMoves, METH_VARARGS, NULL},
	 { "ComputerPlayer_name", _wrap_ComputerPlayer_name, METH_O, NULL},
	 { "ComputerPlayer_id", _wrap_ComputerPlayer_id, METH_O, NULL},
	 { "ComputerPlayer_move", _wrap_ComputerPlayer_move, METH_O, NULL},
	 { "ComputerPlayer_clone", _wrap_ComputerPlayer_clone, METH_O, NULL},
	 { "ComputerPlayer_moves", _wrap_ComputerPlayer_moves, METH_VARARGS, NULL},
	 { "ComputerPlayer_isSlow", _wrap_ComputerPlayer_isSlow, METH_O, NULL},
	 { "ComputerPlayer_isUserVisible", _wrap_ComputerPlayer_isUserVisible, METH_O, NULL},
	 { "ComputerPlayer_dispatch", _wrap_ComputerPlayer_dispatch, METH_O, NULL},
	 { "ComputerPlayer_setDispatch", _wrap_ComputerPlayer_setDispatch, METH_VARARGS, NULL},
	 { "ComputerPlayer_swigregister", ComputerPlayer_swigregister, METH_O, NULL},
	 { "new_StaticPlayer", _wrap_new_StaticPlayer, METH_NOARGS, NULL},
	 { "delete_StaticPlayer", _wrap_delete_StaticPlayer, METH_O, NULL},
	 { "StaticPlayer_clone", _wrap_StaticPlayer_clone, METH_O, NULL},
	 { "StaticPlayer_move", _wrap_StaticPlayer_move, METH_O, NULL},
	 { "StaticPlayer_moves", _wrap_StaticPlayer_moves, METH_VARARGS, NULL},
	 { "StaticPlayer_swigregister", StaticPlayer_swigregister, METH_O, NULL},
	 { "StaticPlayer_swiginit", StaticPlayer_swiginit, METH_VARARGS, NULL},
	 { "new_ComputerPlayerCollection", _wrap_new_ComputerPlayerCollection, METH_NOARGS, NULL},
	 { "ComputerPlayerCollection_addPlayer", _wrap_ComputerPlayerCollection_addPlayer, METH_VARARGS, NULL},
	 { "ComputerPlayerCollection_createPlayer", _wrap_ComputerPlayerCollection_createPlayer, METH_O, NULL},
	 { "ComputerPlayerCollection_fullCollection", _wrap_ComputerPlayerCollection_fullCollection, METH_NOARGS, NULL},
	 { "delete_ComputerPlayerCollection", _wrap_delete_ComputerPlayerCollection, METH_O, NULL},
	 { "ComputerPlayerCollection_swigregister", ComputerPlayerCollection_swigregister, METH_O, NULL},
	 { "ComputerPlayerCollection_swiginit", ComputerPlayerCollection_swiginit, METH_VARARGS, NULL},
	 { "new_DataManager", _wrap_new_DataManager, METH_NOARGS, NULL},
	 { "delete_DataManager", _wrap_delete_DataManager, METH_O, NULL},
	 { "DataManager__self", _wrap_DataManager__self, METH_NOARGS, NULL},
	 { "DataManager_exists", _wrap_DataManager_exists, METH_NOARGS, NULL},
	 { "DataManager_isGood", _wrap_DataManager_isGood, METH_O, NULL},
	 { "DataManager_evaluator", _wrap_DataManager_evaluator, METH_O, NULL},
	 { "DataManager_setEvaluator", _wrap_DataManager_setEvaluator, METH_VARARGS, NULL},
	 { "DataManager_parameters", _wrap_DataManager_parameters, METH_O, NULL},
	 { "DataManager_setParameters", _wrap_DataManager_setParameters, METH_VARARGS, NULL},
	 { "DataManager_alphabetParameters", _wrap_DataManager_alphabetParameters, METH_O, NULL},
	 { "DataManager_setAlphabetParameters", _wrap_DataManager_setAlphabetParameters, METH_VARARGS, NULL},
	 { "DataManager_boardParameters", _wrap_DataManager_boardParameters, METH_O, NULL},
	 { "DataManager_setBoardParameters", _wrap_DataManager_setBoardParameters, METH_VARARGS, NULL},
	 { "DataManager_lexiconParameters", _wrap_DataManager_lexiconParameters, METH_O, NULL},
	 { "DataManager_setLexiconParameters", _wrap_DataManager_setLexiconParameters, METH_VARARGS, NULL},
	 { "DataManager_strategyParameters", _wrap_DataManager_strategyParameters, METH_O, NULL},
	 { "DataManager_setStrategyParameters", _wrap_DataManager_setStrategyParameters, METH_VARARGS, NULL},
	 { "DataManager_computerPlayers", _wrap_DataManager_computerPlayers, METH_O, NULL},
	 { "DataManager_setComputerPlayers", _wrap_DataManager_setComputerPlayers, METH_VARARGS, NULL},
	 { "DataManager_cleanupComputerPlayers", _wrap_DataManager_cleanupComputerPlayers, METH_O, NULL},
	 { "DataManager_findDataFile", _wrap_DataManager_findDataFile, METH_VARARGS, NULL},
	 { "DataManager_hasUserDataFile", _wrap_DataManager_hasUserDataFile, METH_VARARGS, NULL},
	 { "DataManager_makeDataFilename", _wrap_DataManager_makeDataFilename, METH_VARARGS, NULL},
	 { "DataManager_setBackupLexicon", _wrap_DataManager_setBackupLexicon, METH_VARARGS, NULL},
	 { "DataManager_backupLexicon", _wrap_DataManager_backupLexicon, METH_O, NULL},
	 { "DataManager_setAppDataDirectory", _wrap_DataManager_setAppDataDirectory, METH_VARARGS, NULL},
	 { "DataManager_appDataDirectory", _wrap_DataManager_appDataDirectory, METH_O, NULL},
	 { "DataManager_setUserDataDirectory", _wrap_DataManager_setUserDataDirectory, METH_VARARGS, NULL},
	 { "DataManager_userDataDirectory", _wrap_DataManager_userDataDirectory, METH_O, NULL},
	 { "DataManager_seedRandomNumbers", _wrap_DataManager_seedRandomNumbers, METH_VARARGS, NULL},
	 { "DataManager_randomInteger", _wrap_DataManager_randomInteger, METH_VARARGS, NULL},
	 { "DataManager_swigregister", DataManager_swigregister, METH_O, NULL},
	 { "DataManager_swiginit", DataManager_swiginit, METH_VARARGS, NULL},
	 { "new_EndgameMove", _wrap_new_EndgameMove, METH_O, NULL},
	 { "EndgameMove_move_set", _wrap_EndgameMove_move_set, METH_VARARGS, NULL},
	 { "EndgameMove_move_get", _wrap_EndgameMove_move_get, METH_O, NULL},
	 { "EndgameMove_optimistic_set", _wrap_EndgameMove_optimistic_set, METH_VARARGS, NULL},
	 { "EndgameMove_optimistic_get", _wrap_EndgameMove_optimistic_get, METH_O, NULL},
	 { "EndgameMove_pessimistic_set", _wrap_EndgameMove_pessimistic_set, METH_VARARGS, NULL},
	 { "EndgameMove_pessimistic_get", _wrap_EndgameMove_pessimistic_get, METH_O, NULL},
	 { "EndgameMove_estimated_set", _wrap_EndgameMove_estimated_set, METH_VARARGS, NULL},
	 { "EndgameMove_estimated_get", _wrap_EndgameMove_estimated_get, METH_O, NULL},
	 { "EndgameMove_outplay_set", _wrap_EndgameMove_outplay_set, METH_VARARGS, NULL},
	 { "EndgameMove_outplay_get", _wrap_EndgameMove_outplay_get, METH_O, NULL},
	 { "delete_EndgameMove", _wrap_delete_EndgameMove, METH_O, NULL},
	 { "EndgameMove_swigregister", EndgameMove_swigregister, METH_O, NULL},
	 { "EndgameMove_swiginit", EndgameMove_swiginit, METH_VARARGS, NULL},
	 { "EndgameMoveList_optimisticComparator", _wrap_EndgameMoveList_optimisticComparator, METH_VARARGS, NULL},
	 { "new_EndgameMoveList", _wrap_new_EndgameMoveList, METH_NOARGS, NULL},
	 { "delete_EndgameMoveList", _wrap_delete_EndgameMoveList, METH_O, NULL},
	 { "EndgameMoveList_swigregister", EndgameMoveList_swigregister, METH_O, NULL},
	 { "EndgameMoveList_swiginit", EndgameMoveList_swiginit, METH_VARARGS, NULL},
	 { "new_Endgame", _wrap_new_Endgame, METH_NOARGS, NULL},
	 { "delete_Endgame", _wrap_delete_Endgame, METH_O, NULL},
	 { "Endgame_setPosition", _wrap_Endgame_setPosition, METH_VARARGS, NULL},
	 { "Endgame_currentPosition", _wrap_Endgame_currentPosition, METH_VARARGS, NULL},
	 { "Endgame_setDispatch", _wrap_Endgame_setDispatch, METH_VARARGS, NULL},
	 { "Endgame_setLogfile", _wrap_Endgame_setLogfile, METH_VARARGS, NULL},
	 { "Endgame_logfile", _wrap_Endgame_logfile, METH_O, NULL},
	 { "Endgame_logMessage", _wrap_Endgame_logMessage, METH_VARARGS, NULL},
	 { "Endgame_isLogging", _wrap_Endgame_isLogging, METH_O, NULL},
	 { "Endgame_closeLogfile", _wrap_Endgame_closeLogfile, METH_O, NULL},
	 { "Endgame_setIncludedMoves", _wrap_Endgame_setIncludedMoves, METH_VARARGS, NULL},
	 { "Endgame_moves", _wrap_Endgame_moves, METH_VARARGS, NULL},
	 { "Endgame_endgameMoves", _wrap_Endgame_endgameMoves, METH_O, NULL},
	 { "Endgame_solve", _wrap_Endgame_solve, METH_VARARGS, NULL},
	 { "Endgame_reallyPlayOut", _wrap_Endgame_reallyPlayOut, METH_VARARGS, NULL},
	 { "Endgame_disappoint", _wrap_Endgame_disappoint, METH_VARARGS, NULL},
	 { "Endgame_swigregister", Endgame_swigregister, METH_O, NULL},
	 { "Endgame_swiginit", Endgame_swiginit, METH_VARARGS, NULL},
	 { "new_EndgamePlayer", _wrap_new_EndgamePlayer, METH_NOARGS, NULL},
	 { "delete_EndgamePlayer", _wrap_delete_EndgamePlayer, METH_O, NULL},
	 { "EndgamePlayer_move", _wrap_EndgamePlayer_move, METH_O, NULL},
	 { "EndgamePlayer_moves", _wrap_EndgamePlayer_moves, METH_VARARGS, NULL},
	 { "EndgamePlayer_clone", _wrap_EndgamePlayer_clone, METH_O, NULL},
	 { "EndgamePlayer_isUserVisible", _wrap_EndgamePlayer_isUserVisible, METH_O, NULL},
	 { "EndgamePlayer_setDispatch", _wrap_EndgamePlayer_setDispatch, METH_VARARGS, NULL},
	 { "EndgamePlayer_swigregister", EndgamePlayer_swigregister, METH_O, NULL},
	 { "EndgamePlayer_swiginit", EndgamePlayer_swiginit, METH_VARARGS, NULL},
	 { "ProbableRack_rack_set", _wrap_ProbableRack_rack_set, METH_VARARGS, NULL},
	 { "ProbableRack_rack_get", _wrap_ProbableRack_rack_get, METH_O, NULL},
	 { "ProbableRack_probability_set", _wrap_ProbableRack_probability_set, METH_VARARGS, NULL},
	 { "ProbableRack_probability_get", _wrap_ProbableRack_probability_get, METH_O, NULL},
	 { "ProbableRack_possibility_set", _wrap_ProbableRack_possibility_set, METH_VARARGS, NULL},
	 { "ProbableRack_possibility_get", _wrap_ProbableRack_possibility_get, METH_O, NULL},
	 { "new_ProbableRack", _wrap_new_ProbableRack, METH_NOARGS, NULL},
	 { "delete_ProbableRack", _wrap_delete_ProbableRack, METH_O, NULL},
	 { "ProbableRack_swigregister", ProbableRack_swigregister, METH_O, NULL},
	 { "ProbableRack_swiginit", ProbableRack_swiginit, METH_VARARGS, NULL},
	 { "new_Enumerator", _wrap_new_Enumerator, METH_O, NULL},
	 { "Enumerator_enumerate", _wrap_Enumerator_enumerate, METH_VARARGS, NULL},
	 { "Enumerator_enumeratePossible", _wrap_Enumerator_enumeratePossible, METH_VARARGS, NULL},
	 { "Enumerator_normalizeProbabilities", _wrap_Enumerator_normalizeProbabilities, METH_O, NULL},
	 { "delete_Enumerator", _wrap_delete_Enumerator, METH_O, NULL},
	 { "Enumerator_swigregister", Enumerator_swigregister, METH_O, NULL},
	 { "Enumerator_swiginit", Enumerator_swiginit, METH_VARARGS, NULL},
	 { "new_SmartBogowin", _wrap_new_SmartBogowin, METH_NOARGS, NULL},
	 { "delete_SmartBogowin", _wrap_delete_SmartBogowin, METH_O, NULL},
	 { "SmartBogowin_move", _wrap_SmartBogowin_move, METH_O, NULL},
	 { "SmartBogowin_moves", _wrap_SmartBogowin_moves, METH_VARARGS, NULL},
	 { "SmartBogowin_clone", _wrap_SmartBogowin_clone, METH_O, NULL},
	 { "SmartBogowin_isSlow", _wrap_SmartBogowin_isSlow, METH_O, NULL},
	 { "SmartBogowin_isUserVisible", _wrap_SmartBogowin_isUserVisible, METH_O, NULL},
	 { "SmartBogowin_bogopoints", _wrap_SmartBogowin_bogopoints, METH_VARARGS, NULL},
	 { "SmartBogowin_swigregister", SmartBogowin_swigregister, METH_O, NULL},
	 { "SmartBogowin_swiginit", SmartBogowin_swiginit, METH_VARARGS, NULL},
	 { "new_Stopwatch", _wrap_new_Stopwatch, METH_NOARGS, NULL},
	 { "Stopwatch_start", _wrap_Stopwatch_start, METH_O, NULL},
	 { "Stopwatch_elapsed", _wrap_Stopwatch_elapsed, METH_O, NULL},
	 { "Stopwatch_exceeded", _wrap_Stopwatch_exceeded, METH_VARARGS, NULL},
	 { "delete_Stopwatch", _wrap_delete_Stopwatch, METH_O, NULL},
	 { "Stopwatch_swigregister", Stopwatch_swigregister, METH_O, NULL},
	 { "Stopwatch_swiginit", Stopwatch_swiginit, METH_VARARGS, NULL},
	 { "new_ExtensionWithInfo", _wrap_new_ExtensionWithInfo, METH_NOARGS, NULL},
	 { "ExtensionWithInfo_extensionLetterString_set", _wrap_ExtensionWithInfo_extensionLetterString_set, METH_VARARGS, NULL},
	 { "ExtensionWithInfo_extensionLetterString_get", _wrap_ExtensionWithInfo_extensionLetterString_get, METH_O, NULL},
	 { "ExtensionWithInfo_playability_set", _wrap_ExtensionWithInfo_playability_set, METH_VARARGS, NULL},
	 { "ExtensionWithInfo_playability_get", _wrap_ExtensionWithInfo_playability_get, METH_O, NULL},
	 { "ExtensionWithInfo_probability_set", _wrap_ExtensionWithInfo_probability_set, METH_VARARGS, NULL},
	 { "ExtensionWithInfo_probability_get", _wrap_ExtensionWithInfo_probability_get, METH_O, NULL},
	 { "ExtensionWithInfo_british_set", _wrap_ExtensionWithInfo_british_set, METH_VARARGS, NULL},
	 { "ExtensionWithInfo_british_get", _wrap_ExtensionWithInfo_british_get, METH_O, NULL},
	 { "delete_ExtensionWithInfo", _wrap_delete_ExtensionWithInfo, METH_O, NULL},
	 { "ExtensionWithInfo_swigregister", ExtensionWithInfo_swigregister, METH_O, NULL},
	 { "ExtensionWithInfo_swiginit", ExtensionWithInfo_swiginit, METH_VARARGS, NULL},
	 { "new_WordWithInfo", _wrap_new_WordWithInfo, METH_NOARGS, NULL},
	 { "WordWithInfo_wordLetterString_set", _wrap_WordWithInfo_wordLetterString_set, METH_VARARGS, NULL},
	 { "WordWithInfo_wordLetterString_get", _wrap_WordWithInfo_wordLetterString_get, METH_O, NULL},
	 { "WordWithInfo_playability_set", _wrap_WordWithInfo_playability_set, METH_VARARGS, NULL},
	 { "WordWithInfo_playability_get", _wrap_WordWithInfo_playability_get, METH_O, NULL},
	 { "WordWithInfo_probability_set", _wrap_WordWithInfo_probability_set, METH_VARARGS, NULL},
	 { "WordWithInfo_probability_get", _wrap_WordWithInfo_probability_get, METH_O, NULL},
	 { "WordWithInfo_british_set", _wrap_WordWithInfo_british_set, METH_VARARGS, NULL},
	 { "WordWithInfo_british_get", _wrap_WordWithInfo_british_get, METH_O, NULL},
	 { "WordWithInfo_frontExtensions_set", _wrap_WordWithInfo_frontExtensions_set, METH_VARARGS, NULL},
	 { "WordWithInfo_frontExtensions_get", _wrap_WordWithInfo_frontExtensions_get, METH_O, NULL},
	 { "WordWithInfo_backExtensions_set", _wrap_WordWithInfo_backExtensions_set, METH_VARARGS, NULL},
	 { "WordWithInfo_backExtensions_get", _wrap_WordWithInfo_backExtensions_get, METH_O, NULL},
	 { "delete_WordWithInfo", _wrap_delete_WordWithInfo, METH_O, NULL},
	 { "WordWithInfo_swigregister", WordWithInfo_swigregister, METH_O, NULL},
	 { "WordWithInfo_swiginit", WordWithInfo_swiginit, METH_VARARGS, NULL},
	 { "new_Generator", _wrap_new_Generator, METH_VARARGS, NULL},
	 { "delete_Generator", _wrap_delete_Generator, METH_O, NULL},
	 { "Generator_kibitz", _wrap_Generator_kibitz, METH_VARARGS, NULL},
	 { "Generator_kibitzList", _wrap_Generator_kibitzList, METH_O, NULL},
	 { "Generator_allPossiblePlays", _wrap_Generator_allPossiblePlays, METH_O, NULL},
	 { "Generator_setPosition", _wrap_Generator_setPosition, METH_VARARGS, NULL},
	 { "Generator_position", _wrap_Generator_position, METH_O, NULL},
	 { "Generator_makeMove", _wrap_Generator_makeMove, METH_VARARGS, NULL},
	 { "Generator_isAcceptableWord", _wrap_Generator_isAcceptableWord, METH_VARARGS, NULL},
	 { "Generator_anagramLetters", _wrap_Generator_anagramLetters, METH_VARARGS, NULL},
	 { "Generator_storeWordInfo", _wrap_Generator_storeWordInfo, METH_VARARGS, NULL},
	 { "Generator_storeExtensions", _wrap_Generator_storeExtensions, METH_VARARGS, NULL},
	 { "Generator_allCrosses", _wrap_Generator_allCrosses, METH_O, NULL},
	 { "Generator_swigregister", Generator_swigregister, METH_O, NULL},
	 { "Generator_swiginit", Generator_swiginit, METH_VARARGS, NULL},
	 { "GaddagNode_letter", _wrap_GaddagNode_letter, METH_O, NULL},
	 { "GaddagNode_isTerminal", _wrap_GaddagNode_isTerminal, METH_O, NULL},
	 { "GaddagNode_firstChild", _wrap_GaddagNode_firstChild, METH_O, NULL},
	 { "GaddagNode_nextSibling", _wrap_GaddagNode_nextSibling, METH_O, NULL},
	 { "GaddagNode_child", _wrap_GaddagNode_child, METH_VARARGS, NULL},
	 { "new_GaddagNode", _wrap_new_GaddagNode, METH_NOARGS, NULL},
	 { "delete_GaddagNode", _wrap_delete_GaddagNode, METH_O, NULL},
	 { "GaddagNode_swigregister", GaddagNode_swigregister, METH_O, NULL},
	 { "GaddagNode_swiginit", GaddagNode_swiginit, METH_VARARGS, NULL},
	 { "LexiconInterpreter_loadDawg", _wrap_LexiconInterpreter_loadDawg, METH_VARARGS, NULL},
	 { "LexiconInterpreter_loadGaddag", _wrap_LexiconInterpreter_loadGaddag, METH_VARARGS, NULL},
	 { "LexiconInterpreter_dawgAt", _wrap_LexiconInterpreter_dawgAt, METH_VARARGS, NULL},
	 { "LexiconInterpreter_versionNumber", _wrap_LexiconInterpreter_versionNumber, METH_O, NULL},
	 { "delete_LexiconInterpreter", _wrap_delete_LexiconInterpreter, METH_O, NULL},
	 { "LexiconInterpreter_swigregister", LexiconInterpreter_swigregister, METH_O, NULL},
	 { "new_LexiconParameters", _wrap_new_LexiconParameters, METH_NOARGS, NULL},
	 { "delete_LexiconParameters", _wrap_delete_LexiconParameters, METH_O, NULL},
	 { "LexiconParameters_unloadAll", _wrap_LexiconParameters_unloadAll, METH_O, NULL},
	 { "LexiconParameters_hasSomething", _wrap_LexiconParameters_hasSomething, METH_O, NULL},
	 { "LexiconParameters_loadDawg", _wrap_LexiconParameters_loadDawg, METH_VARARGS, NULL},
	 { "LexiconParameters_unloadDawg", _wrap_LexiconParameters_unloadDawg, METH_O, NULL},
	 { "LexiconParameters_hasDawg", _wrap_LexiconParameters_hasDawg, METH_O, NULL},
	 { "LexiconParameters_dawgVersion", _wrap_LexiconParameters_dawgVersion, METH_O, NULL},
	 { "LexiconParameters_loadGaddag", _wrap_LexiconParameters_loadGaddag, METH_VARARGS, NULL},
	 { "LexiconParameters_unloadGaddag", _wrap_LexiconParameters_unloadGaddag, METH_O, NULL},
	 { "LexiconParameters_hasGaddag", _wrap_LexiconParameters_hasGaddag, METH_O, NULL},
	 { "LexiconParameters_findDictionaryFile", _wrap_LexiconParameters_findDictionaryFile, METH_O, NULL},
	 { "LexiconParameters_hasUserDictionaryFile", _wrap_LexiconParameters_hasUserDictionaryFile, METH_O, NULL},
	 { "LexiconParameters_lexiconName", _wrap_LexiconParameters_lexiconName, METH_O, NULL},
	 { "LexiconParameters_setLexiconName", _wrap_LexiconParameters_setLexiconName, METH_VARARGS, NULL},
	 { "LexiconParameters_dawgAt", _wrap_LexiconParameters_dawgAt, METH_VARARGS, NULL},
	 { "LexiconParameters_gaddagRoot", _wrap_LexiconParameters_gaddagRoot, METH_O, NULL},
	 { "LexiconParameters_hashString", _wrap_LexiconParameters_hashString, METH_VARARGS, NULL},
	 { "LexiconParameters_copyrightString", _wrap_LexiconParameters_copyrightString, METH_O, NULL},
	 { "LexiconParameters_logoFileName", _wrap_LexiconParameters_logoFileName, METH_O, NULL},
	 { "LexiconParameters_utf8Alphabet", _wrap_LexiconParameters_utf8Alphabet, METH_O, NULL},
	 { "LexiconParameters_swigregister", LexiconParameters_swigregister, METH_O, NULL},
	 { "LexiconParameters_swiginit", LexiconParameters_swiginit, METH_VARARGS, NULL},
	 { "new_Preendgame", _wrap_new_Preendgame, METH_NOARGS, NULL},
	 { "delete_Preendgame", _wrap_delete_Preendgame, METH_O, NULL},
	 { "Preendgame_move", _wrap_Preendgame_move, METH_O, NULL},
	 { "Preendgame_moves", _wrap_Preendgame_moves, METH_VARARGS, NULL},
	 { "Preendgame_clone", _wrap_Preendgame_clone, METH_O, NULL},
	 { "Preendgame_isUserVisible", _wrap_Preendgame_isUserVisible, METH_O, NULL},
	 { "Preendgame_isSlow", _wrap_Preendgame_isSlow, METH_O, NULL},
	 { "Preendgame_maximumTilesInBagToEngage", _wrap_Preendgame_maximumTilesInBagToEngage, METH_NOARGS, NULL},
	 { "Preendgame_swigregister", Preendgame_swigregister, METH_O, NULL},
	 { "Preendgame_swiginit", Preendgame_swiginit, METH_VARARGS, NULL},
	 { "new_Reporter", _wrap_new_Reporter, METH_NOARGS, NULL},
	 { "Reporter_reportPosition", _wrap_Reporter_reportPosition, METH_VARARGS, NULL},
	 { "Reporter_reportGameStatistics", _wrap_Reporter_reportGameStatistics, METH_VARARGS, NULL},
	 { "Reporter_reportHeader", _wrap_Reporter_reportHeader, METH_VARARGS, NULL},
	 { "Reporter_reportGame", _wrap_Reporter_reportGame, METH_VARARGS, NULL},
	 { "delete_Reporter", _wrap_delete_Reporter, METH_O, NULL},
	 { "Reporter_swigregister", Reporter_swigregister, METH_O, NULL},
	 { "Reporter_swiginit", Reporter_swiginit, METH_VARARGS, NULL},
	 { "new_Resolvent", _wrap_new_Resolvent, METH_NOARGS, NULL},
	 { "delete_Resolvent", _wrap_delete_Resolvent, METH_O, NULL},
	 { "Resolvent_move", _wrap_Resolvent_move, METH_O, NULL},
	 { "Resolvent_moves", _wrap_Resolvent_moves, METH_VARARGS, NULL},
	 { "Resolvent_clone", _wrap_Resolvent_clone, METH_O, NULL},
	 { "Resolvent_isSlow", _wrap_Resolvent_isSlow, METH_O, NULL},
	 { "Resolvent_isUserVisible", _wrap_Resolvent_isUserVisible, METH_O, NULL},
	 { "Resolvent_swigregister", Resolvent_swigregister, METH_O, NULL},
	 { "Resolvent_swiginit", Resolvent_swiginit, METH_VARARGS, NULL},
	 { "new_InferringPlayer", _wrap_new_InferringPlayer, METH_NOARGS, NULL},
	 { "delete_InferringPlayer", _wrap_delete_InferringPlayer, METH_O, NULL},
	 { "InferringPlayer_clone", _wrap_InferringPlayer_clone, METH_O, NULL},
	 { "InferringPlayer_swigregister", InferringPlayer_swigregister, METH_O, NULL},
	 { "InferringPlayer_swiginit", InferringPlayer_swiginit, METH_VARARGS, NULL},
	 { "new_TorontoPlayer", _wrap_new_TorontoPlayer, METH_NOARGS, NULL},
	 { "delete_TorontoPlayer", _wrap_delete_TorontoPlayer, METH_O, NULL},
	 { "TorontoPlayer_clone", _wrap_TorontoPlayer_clone, METH_O, NULL},
	 { "TorontoPlayer_swigregister", TorontoPlayer_swigregister, METH_O, NULL},
	 { "TorontoPlayer_swiginit", TorontoPlayer_swiginit, METH_VARARGS, NULL},
	 { "new_FiveMinutePlayer", _wrap_new_FiveMinutePlayer, METH_NOARGS, NULL},
	 { "delete_FiveMinutePlayer", _wrap_delete_FiveMinutePlayer, METH_O, NULL},
	 { "FiveMinutePlayer_clone", _wrap_FiveMinutePlayer_clone, METH_O, NULL},
	 { "FiveMinutePlayer_swigregister", FiveMinutePlayer_swigregister, METH_O, NULL},
	 { "FiveMinutePlayer_swiginit", FiveMinutePlayer_swiginit, METH_VARARGS, NULL},
	 { "new_TwentySecondPlayer", _wrap_new_TwentySecondPlayer, METH_NOARGS, NULL},
	 { "delete_TwentySecondPlayer", _wrap_delete_TwentySecondPlayer, METH_O, NULL},
	 { "TwentySecondPlayer_clone", _wrap_TwentySecondPlayer_clone, METH_O, NULL},
	 { "TwentySecondPlayer_swigregister", TwentySecondPlayer_swigregister, METH_O, NULL},
	 { "TwentySecondPlayer_swiginit", TwentySecondPlayer_swiginit, METH_VARARGS, NULL},
	 { "new_StrategyParameters", _wrap_new_StrategyParameters, METH_NOARGS, NULL},
	 { "StrategyParameters_initialize", _wrap_StrategyParameters_initialize, METH_VARARGS, NULL},
	 { "StrategyParameters_hasSyn2", _wrap_StrategyParameters_hasSyn2, METH_O, NULL},
	 { "StrategyParameters_hasWorths", _wrap_StrategyParameters_hasWorths, METH_O, NULL},
	 { "StrategyParameters_hasVcPlace", _wrap_StrategyParameters_hasVcPlace, METH_O, NULL},
	 { "StrategyParameters_hasBogowin", _wrap_StrategyParameters_hasBogowin, METH_O, NULL},
	 { "StrategyParameters_hasSuperleaves", _wrap_StrategyParameters_hasSuperleaves, METH_O, NULL},
	 { "StrategyParameters_syn2", _wrap_StrategyParameters_syn2, METH_VARARGS, NULL},
	 { "StrategyParameters_tileWorth", _wrap_StrategyParameters_tileWorth, METH_VARARGS, NULL},
	 { "StrategyParameters_vcPlace", _wrap_StrategyParameters_vcPlace, METH_VARARGS, NULL},
	 { "StrategyParameters_bogowin", _wrap_StrategyParameters_bogowin, METH_VARARGS, NULL},
	 { "StrategyParameters_superleave", _wrap_StrategyParameters_superleave, METH_VARARGS, NULL},
	 { "delete_StrategyParameters", _wrap_delete_StrategyParameters, METH_O, NULL},
	 { "StrategyParameters_swigregister", StrategyParameters_swigregister, METH_O, NULL},
	 { "StrategyParameters_swiginit", StrategyParameters_swiginit, METH_VARARGS, NULL},
	 { "new_FlexibleAlphabetParameters", _wrap_new_FlexibleAlphabetParameters, METH_NOARGS, NULL},
	 { "FlexibleAlphabetParameters_load", _wrap_FlexibleAlphabetParameters_load, METH_VARARGS, NULL},
	 { "delete_FlexibleAlphabetParameters", _wrap_delete_FlexibleAlphabetParameters, METH_O, NULL},
	 { "FlexibleAlphabetParameters_swigregister", FlexibleAlphabetParameters_swigregister, METH_O, NULL},
	 { "FlexibleAlphabetParameters_swiginit", FlexibleAlphabetParameters_swiginit, METH_VARARGS, NULL},
	 { "new_UtilSettings", _wrap_new_UtilSettings, METH_NOARGS, NULL},
	 { "UtilSettings__self", _wrap_UtilSettings__self, METH_NOARGS, NULL},
	 { "UtilSettings_octothorpBritish_set", _wrap_UtilSettings_octothorpBritish_set, METH_VARARGS, NULL},
	 { "UtilSettings_octothorpBritish_get", _wrap_UtilSettings_octothorpBritish_get, METH_O, NULL},
	 { "UtilSettings_vowelFirst_set", _wrap_UtilSettings_vowelFirst_set, METH_VARARGS, NULL},
	 { "UtilSettings_vowelFirst_get", _wrap_UtilSettings_vowelFirst_get, METH_O, NULL},
	 { "UtilSettings_scoreInvalidAsZero_set", _wrap_UtilSettings_scoreInvalidAsZero_set, METH_VARARGS, NULL},
	 { "UtilSettings_scoreInvalidAsZero_get", _wrap_UtilSettings_scoreInvalidAsZero_get, METH_O, NULL},
	 { "delete_UtilSettings", _wrap_delete_UtilSettings, METH_O, NULL},
	 { "UtilSettings_swigregister", UtilSettings_swigregister, METH_O, NULL},
	 { "UtilSettings_swiginit", UtilSettings_swiginit, METH_VARARGS, NULL},
	 { "Util_qstringToString", _wrap_Util_qstringToString, METH_O, NULL},
	 { "Util_encode", _wrap_Util_encode, METH_O, NULL},
	 { "Util_nonBlankEncode", _wrap_Util_nonBlankEncode, METH_O, NULL},
	 { "Util_uvStringToQString", _wrap_Util_uvStringToQString, METH_O, NULL},
	 { "Util_letterStringToQString", _wrap_Util_letterStringToQString, METH_O, NULL},
	 { "Util_letterToQString", _wrap_Util_letterToQString, METH_O, NULL},
	 { "Util_qstringToStdString", _wrap_Util_qstringToStdString, METH_O, NULL},
	 { "Util_stdStringToQString", _wrap_Util_stdStringToQString, METH_O, NULL},
	 { "Util_moveToDetailedString", _wrap_Util_moveToDetailedString, METH_O, NULL},
	 { "Util_moveToSensitiveString", _wrap_Util_moveToSensitiveString, METH_O, NULL},
	 { "Util_alphagram", _wrap_Util_alphagram, METH_VARARGS, NULL},
	 { "Util_arrangeLettersForUser", _wrap_Util_arrangeLettersForUser, METH_VARARGS, NULL},
	 { "Util_makeRack", _wrap_Util_makeRack, METH_O, NULL},
	 { "Util_sanitizeUserVisibleLetterString", _wrap_Util_sanitizeUserVisibleLetterString, METH_O, NULL},
	 { "Util_symbolsFor", _wrap_Util_symbolsFor, METH_O, NULL},
	 { "new_Util", _wrap_new_Util, METH_NOARGS, NULL},
	 { "delete_Util", _wrap_delete_Util, METH_O, NULL},
	 { "Util_swigregister", Util_swigregister, METH_O, NULL},
	 { "Util_swiginit", Util_swiginit, METH_VARARGS, NULL},
	 { "delete_Logania", _wrap_delete_Logania, METH_O, NULL},
	 { "Logania_read", _wrap_Logania_read, METH_VARARGS, NULL},
	 { "Logania_canRead", _wrap_Logania_canRead, METH_VARARGS, NULL},
	 { "Logania_write", _wrap_Logania_write, METH_VARARGS, NULL},
	 { "Logania_filter", _wrap_Logania_filter, METH_O, NULL},
	 { "Logania_swigregister", Logania_swigregister, METH_O, NULL},
	 { "new_GCGIO", _wrap_new_GCGIO, METH_NOARGS, NULL},
	 { "delete_GCGIO", _wrap_delete_GCGIO, METH_O, NULL},
	 { "GCGIO_read", _wrap_GCGIO_read, METH_VARARGS, NULL},
	 { "GCGIO_canRead", _wrap_GCGIO_canRead, METH_VARARGS, NULL},
	 { "GCGIO_write", _wrap_GCGIO_write, METH_VARARGS, NULL},
	 { "GCGIO_filter", _wrap_GCGIO_filter, METH_O, NULL},
	 { "GCGIO_swigregister", GCGIO_swigregister, METH_O, NULL},
	 { "GCGIO_swiginit", GCGIO_swiginit, METH_VARARGS, NULL},
	 { NULL, NULL, 0, NULL }
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_Quackle__EnglishAlphabetParametersTo_p_Quackle__AlphabetParameters(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Quackle::AlphabetParameters *)  ((Quackle::EnglishAlphabetParameters *) x));
}
static void *_p_QuackleIO__FlexibleAlphabetParametersTo_p_Quackle__AlphabetParameters(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Quackle::AlphabetParameters *)  ((QuackleIO::FlexibleAlphabetParameters *) x));
}
static void *_p_Quackle__EnglishBoardTo_p_Quackle__BoardParameters(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Quackle::BoardParameters *)  ((Quackle::EnglishBoard *) x));
}
static void *_p_Quackle__ScalingDispatchTo_p_Quackle__ComputerDispatch(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Quackle::ComputerDispatch *)  ((Quackle::ScalingDispatch *) x));
}
static void *_p_Quackle__EndgamePlayerTo_p_Quackle__ComputerPlayer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Quackle::ComputerPlayer *)  ((Quackle::EndgamePlayer *) x));
}
static void *_p_Quackle__FiveMinutePlayerTo_p_Quackle__ComputerPlayer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Quackle::ComputerPlayer *) (Quackle::Resolvent *) ((Quackle::FiveMinutePlayer *) x));
}
static void *_p_Quackle__InferringPlayerTo_p_Quackle__ComputerPlayer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Quackle::ComputerPlayer *) (Quackle::Resolvent *) ((Quackle::InferringPlayer *) x));
}
static void *_p_Quackle__PreendgameTo_p_Quackle__ComputerPlayer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Quackle::ComputerPlayer *)  ((Quackle::Preendgame *) x));
}
static void *_p_Quackle__ResolventTo_p_Quackle__ComputerPlayer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Quackle::ComputerPlayer *)  ((Quackle::Resolvent *) x));
}
static void *_p_Quackle__SmartBogowinTo_p_Quackle__ComputerPlayer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Quackle::ComputerPlayer *)  ((Quackle::SmartBogowin *) x));
}
static void *_p_Quackle__StaticPlayerTo_p_Quackle__ComputerPlayer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Quackle::ComputerPlayer *)  ((Quackle::StaticPlayer *) x));
}
static void *_p_Quackle__TorontoPlayerTo_p_Quackle__ComputerPlayer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Quackle::ComputerPlayer *) (Quackle::Resolvent *) ((Quackle::TorontoPlayer *) x));
}
static void *_p_Quackle__TwentySecondPlayerTo_p_Quackle__ComputerPlayer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Quackle::ComputerPlayer *) (Quackle::Resolvent *) ((Quackle::TwentySecondPlayer *) x));
}
static void *_p_Quackle__CatchallEvaluatorTo_p_Quackle__Evaluator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Quackle::Evaluator *) (Quackle::ScorePlusLeaveEvaluator *) ((Quackle::CatchallEvaluator *) x));
}
static void *_p_Quackle__ScorePlusLeaveEvaluatorTo_p_Quackle__Evaluator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Quackle::Evaluator *)  ((Quackle::ScorePlusLeaveEvaluator *) x));
}
static void *_p_Quackle__EnglishParametersTo_p_Quackle__GameParameters(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Quackle::GameParameters *)  ((Quackle::EnglishParameters *) x));
}
static void *_p_Quackle__ComputerPlayerCollectionTo_p_Quackle__PlayerList(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Quackle::PlayerList *)  ((Quackle::ComputerPlayerCollection *) x));
}
static void *_p_Quackle__FiveMinutePlayerTo_p_Quackle__Resolvent(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Quackle::Resolvent *)  ((Quackle::FiveMinutePlayer *) x));
}
static void *_p_Quackle__InferringPlayerTo_p_Quackle__Resolvent(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Quackle::Resolvent *)  ((Quackle::InferringPlayer *) x));
}
static void *_p_Quackle__TorontoPlayerTo_p_Quackle__Resolvent(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Quackle::Resolvent *)  ((Quackle::TorontoPlayer *) x));
}
static void *_p_Quackle__TwentySecondPlayerTo_p_Quackle__Resolvent(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Quackle::Resolvent *)  ((Quackle::TwentySecondPlayer *) x));
}
static void *_p_Quackle__CatchallEvaluatorTo_p_Quackle__ScorePlusLeaveEvaluator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Quackle::ScorePlusLeaveEvaluator *)  ((Quackle::CatchallEvaluator *) x));
}
static void *_p_QuackleIO__GCGIOTo_p_QuackleIO__Logania(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((QuackleIO::Logania *)  ((QuackleIO::GCGIO *) x));
}
static void *_p_Quackle__HistoryTo_p_std__vectorT_Quackle__GamePosition_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::vector< Quackle::GamePosition,std::allocator< Quackle::GamePosition > > *)  ((Quackle::History *) x));
}
static void *_p_Quackle__MoveListTo_p_std__vectorT_Quackle__Move_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::vector< Quackle::Move,std::allocator< Quackle::Move > > *)  ((Quackle::MoveList *) x));
}
static void *_p_Quackle__ComputerPlayerCollectionTo_p_std__vectorT_Quackle__Player_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::vector< Quackle::Player,std::allocator< Quackle::Player > > *) (Quackle::PlayerList *) ((Quackle::ComputerPlayerCollection *) x));
}
static void *_p_Quackle__PlayerListTo_p_std__vectorT_Quackle__Player_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::vector< Quackle::Player,std::allocator< Quackle::Player > > *)  ((Quackle::PlayerList *) x));
}
static swig_type_info _swigt__p_QString = {"_p_QString", "QString *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_QTextStream = {"_p_QTextStream", "QTextStream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_QuackleIO__FlexibleAlphabetParameters = {"_p_QuackleIO__FlexibleAlphabetParameters", "QuackleIO::FlexibleAlphabetParameters *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_QuackleIO__GCGIO = {"_p_QuackleIO__GCGIO", "QuackleIO::GCGIO *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_QuackleIO__Logania = {"_p_QuackleIO__Logania", "QuackleIO::Logania *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_QuackleIO__Util = {"_p_QuackleIO__Util", "QuackleIO::Util *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_QuackleIO__UtilSettings = {"_p_QuackleIO__UtilSettings", "QuackleIO::UtilSettings *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Quackle__AlphabetParameters = {"_p_Quackle__AlphabetParameters", "Quackle::AlphabetParameters *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Quackle__AveragedValue = {"_p_Quackle__AveragedValue", "Quackle::AveragedValue *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Quackle__Bag = {"_p_Quackle__Bag", "Quackle::Bag *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Quackle__Board = {"_p_Quackle__Board", "Quackle::Board *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Quackle__BoardParameters = {"_p_Quackle__BoardParameters", "Quackle::BoardParameters *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Quackle__Board__TileInformation = {"_p_Quackle__Board__TileInformation", "Quackle::Board::TileInformation *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Quackle__CatchallEvaluator = {"_p_Quackle__CatchallEvaluator", "Quackle::CatchallEvaluator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Quackle__ComputerDispatch = {"_p_Quackle__ComputerDispatch", "Quackle::ComputerDispatch *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Quackle__ComputerParameters = {"_p_Quackle__ComputerParameters", "Quackle::ComputerParameters *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Quackle__ComputerPlayer = {"_p_Quackle__ComputerPlayer", "Quackle::ComputerPlayer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Quackle__ComputerPlayerCollection = {"_p_Quackle__ComputerPlayerCollection", "Quackle::ComputerPlayerCollection *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Quackle__DataManager = {"_p_Quackle__DataManager", "Quackle::DataManager *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Quackle__Endgame = {"_p_Quackle__Endgame", "Quackle::Endgame *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Quackle__EndgameMove = {"_p_Quackle__EndgameMove", "Quackle::EndgameMove *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Quackle__EndgameMoveList = {"_p_Quackle__EndgameMoveList", "Quackle::EndgameMoveList *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Quackle__EndgamePlayer = {"_p_Quackle__EndgamePlayer", "Quackle::EndgamePlayer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Quackle__EnglishAlphabetParameters = {"_p_Quackle__EnglishAlphabetParameters", "Quackle::EnglishAlphabetParameters *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Quackle__EnglishBoard = {"_p_Quackle__EnglishBoard", "Quackle::EnglishBoard *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Quackle__EnglishParameters = {"_p_Quackle__EnglishParameters", "Quackle::EnglishParameters *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Quackle__Enumerator = {"_p_Quackle__Enumerator", "Quackle::Enumerator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Quackle__Evaluator = {"_p_Quackle__Evaluator", "Quackle::Evaluator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Quackle__ExtensionWithInfo = {"_p_Quackle__ExtensionWithInfo", "Quackle::ExtensionWithInfo *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Quackle__FiveMinutePlayer = {"_p_Quackle__FiveMinutePlayer", "Quackle::FiveMinutePlayer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Quackle__FixedLengthString = {"_p_Quackle__FixedLengthString", "Quackle::LetterString *|std::vector< Quackle::FixedLengthString >::value_type *|Quackle::FixedLengthString *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Quackle__GaddagNode = {"_p_Quackle__GaddagNode", "Quackle::GaddagNode *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Quackle__Game = {"_p_Quackle__Game", "Quackle::Game *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Quackle__GameParameters = {"_p_Quackle__GameParameters", "Quackle::GameParameters *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Quackle__GamePosition = {"_p_Quackle__GamePosition", "std::vector< Quackle::GamePosition >::value_type *|Quackle::GamePosition *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Quackle__Generator = {"_p_Quackle__Generator", "Quackle::Generator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Quackle__History = {"_p_Quackle__History", "Quackle::History *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Quackle__HistoryLocation = {"_p_Quackle__HistoryLocation", "Quackle::HistoryLocation *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Quackle__InferringPlayer = {"_p_Quackle__InferringPlayer", "Quackle::InferringPlayer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Quackle__LetterParameter = {"_p_Quackle__LetterParameter", "std::vector< Quackle::LetterParameter >::value_type *|Quackle::LetterParameter *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Quackle__Level = {"_p_Quackle__Level", "Quackle::Level *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Quackle__LevelList = {"_p_Quackle__LevelList", "Quackle::LevelList *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Quackle__LexiconInterpreter = {"_p_Quackle__LexiconInterpreter", "Quackle::LexiconInterpreter *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Quackle__LexiconParameters = {"_p_Quackle__LexiconParameters", "Quackle::LexiconParameters *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Quackle__Move = {"_p_Quackle__Move", "std::vector< Quackle::Move >::value_type *|Quackle::Move *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Quackle__MoveList = {"_p_Quackle__MoveList", "Quackle::MoveList *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Quackle__Player = {"_p_Quackle__Player", "std::vector< Quackle::Player >::value_type *|Quackle::Player *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Quackle__PlayerList = {"_p_Quackle__PlayerList", "Quackle::PlayerList *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Quackle__PositionStatistics = {"_p_Quackle__PositionStatistics", "Quackle::PositionStatistics *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Quackle__Preendgame = {"_p_Quackle__Preendgame", "Quackle::Preendgame *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Quackle__ProbableRack = {"_p_Quackle__ProbableRack", "std::vector< Quackle::ProbableRack >::value_type *|Quackle::ProbableRack *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Quackle__Rack = {"_p_Quackle__Rack", "Quackle::Rack *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Quackle__Reporter = {"_p_Quackle__Reporter", "Quackle::Reporter *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Quackle__Resolvent = {"_p_Quackle__Resolvent", "Quackle::Resolvent *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Quackle__ScalingDispatch = {"_p_Quackle__ScalingDispatch", "Quackle::ScalingDispatch *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Quackle__ScorePlusLeaveEvaluator = {"_p_Quackle__ScorePlusLeaveEvaluator", "Quackle::ScorePlusLeaveEvaluator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Quackle__SimmedMove = {"_p_Quackle__SimmedMove", "Quackle::SimmedMove *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Quackle__SimmedMoveConstants = {"_p_Quackle__SimmedMoveConstants", "Quackle::SimmedMoveConstants *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Quackle__SimmedMoveMessage = {"_p_Quackle__SimmedMoveMessage", "Quackle::SimmedMoveMessage *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Quackle__SimmedMoveMessageQueue = {"_p_Quackle__SimmedMoveMessageQueue", "Quackle::SimmedMoveMessageQueue *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Quackle__Simulator = {"_p_Quackle__Simulator", "Quackle::Simulator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Quackle__SmartBogowin = {"_p_Quackle__SmartBogowin", "Quackle::SmartBogowin *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Quackle__StaticPlayer = {"_p_Quackle__StaticPlayer", "Quackle::StaticPlayer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Quackle__Stopwatch = {"_p_Quackle__Stopwatch", "Quackle::Stopwatch *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Quackle__StrategyParameters = {"_p_Quackle__StrategyParameters", "Quackle::StrategyParameters *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Quackle__TorontoPlayer = {"_p_Quackle__TorontoPlayer", "Quackle::TorontoPlayer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Quackle__TwentySecondPlayer = {"_p_Quackle__TwentySecondPlayer", "Quackle::TwentySecondPlayer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Quackle__WordWithInfo = {"_p_Quackle__WordWithInfo", "Quackle::WordWithInfo *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_allocator_type = {"_p_allocator_type", "allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bool = {"_p_bool", "bool *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "UVChar *|char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_difference_type = {"_p_difference_type", "difference_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long_double = {"_p_long_double", "long double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_PyObject = {"_p_p_PyObject", "PyObject **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_type = {"_p_size_type", "size_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_Quackle__FixedLengthString_t = {"_p_std__allocatorT_Quackle__FixedLengthString_t", "std::vector< Quackle::FixedLengthString >::allocator_type *|std::allocator< Quackle::FixedLengthString > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_Quackle__GamePosition_t = {"_p_std__allocatorT_Quackle__GamePosition_t", "std::vector< Quackle::GamePosition >::allocator_type *|std::allocator< Quackle::GamePosition > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_Quackle__LetterParameter_t = {"_p_std__allocatorT_Quackle__LetterParameter_t", "std::vector< Quackle::LetterParameter >::allocator_type *|std::allocator< Quackle::LetterParameter > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_Quackle__Move_t = {"_p_std__allocatorT_Quackle__Move_t", "std::vector< Quackle::Move >::allocator_type *|std::allocator< Quackle::Move > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_Quackle__Player_t = {"_p_std__allocatorT_Quackle__Player_t", "std::vector< Quackle::Player >::allocator_type *|std::allocator< Quackle::Player > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_Quackle__ProbableRack_t = {"_p_std__allocatorT_Quackle__ProbableRack_t", "std::vector< Quackle::ProbableRack >::allocator_type *|std::allocator< Quackle::ProbableRack > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__bitsetT_55_t = {"_p_std__bitsetT_55_t", "LetterBitset *|std::bitset< 55 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__ifstream = {"_p_std__ifstream", "UVIFStream *|std::ifstream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__invalid_argument = {"_p_std__invalid_argument", "std::invalid_argument *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__istream = {"_p_std__istream", "UVIStream *|std::istream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__istringstream = {"_p_std__istringstream", "UVIStringStream *|std::istringstream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__ofstream = {"_p_std__ofstream", "UVOFStream *|std::ofstream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__ostream = {"_p_std__ostream", "UVOStream *|std::ostream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__ostringstream = {"_p_std__ostringstream", "UVOStringStream *|std::ostringstream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__seed_seq = {"_p_std__seed_seq", "std::seed_seq *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__string = {"_p_std__string", "Quackle::LongLetterString *|UVString *|std::string *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__stringstream = {"_p_std__stringstream", "UVStringStream *|std::stringstream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__thread__id = {"_p_std__thread__id", "std::thread::id *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_Quackle__ExtensionWithInfo_std__allocatorT_Quackle__ExtensionWithInfo_t_t = {"_p_std__vectorT_Quackle__ExtensionWithInfo_std__allocatorT_Quackle__ExtensionWithInfo_t_t", "std::vector< Quackle::ExtensionWithInfo,std::allocator< Quackle::ExtensionWithInfo > > *|vector< Quackle::ExtensionWithInfo > *|std::vector< Quackle::ExtensionWithInfo > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_Quackle__GamePosition_t = {"_p_std__vectorT_Quackle__GamePosition_t", "Quackle::PositionList *|std::vector< Quackle::GamePosition,std::allocator< Quackle::GamePosition > > *|std::vector< Quackle::GamePosition > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_Quackle__LetterParameter_t = {"_p_std__vectorT_Quackle__LetterParameter_t", "Quackle::Alphabet *|std::vector< Quackle::LetterParameter,std::allocator< Quackle::LetterParameter > > *|std::vector< Quackle::LetterParameter > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_Quackle__LetterString_t = {"_p_std__vectorT_Quackle__LetterString_t", "Quackle::WordList *|std::vector< Quackle::FixedLengthString,std::allocator< Quackle::FixedLengthString > > *|std::vector< Quackle::LetterString > *|std::vector< Quackle::FixedLengthString > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_Quackle__Move_t = {"_p_std__vectorT_Quackle__Move_t", "std::vector< Quackle::Move,std::allocator< Quackle::Move > > *|std::vector< Quackle::Move > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_Quackle__Player_t = {"_p_std__vectorT_Quackle__Player_t", "std::vector< Quackle::Player,std::allocator< Quackle::Player > > *|std::vector< Quackle::Player > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_Quackle__PositionStatistics_std__allocatorT_Quackle__PositionStatistics_t_t = {"_p_std__vectorT_Quackle__PositionStatistics_std__allocatorT_Quackle__PositionStatistics_t_t", "Quackle::PositionStatisticsList *|std::vector< Quackle::PositionStatistics,std::allocator< Quackle::PositionStatistics > > *|std::vector< Quackle::PositionStatistics > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_Quackle__ProbableRack_t = {"_p_std__vectorT_Quackle__ProbableRack_t", "Quackle::ProbableRackList *|std::vector< Quackle::ProbableRack,std::allocator< Quackle::ProbableRack > > *|std::vector< Quackle::ProbableRack > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_Quackle__SimmedMove_std__allocatorT_Quackle__SimmedMove_t_t = {"_p_std__vectorT_Quackle__SimmedMove_std__allocatorT_Quackle__SimmedMove_t_t", "Quackle::SimmedMoveList *|std::vector< Quackle::SimmedMove,std::allocator< Quackle::SimmedMove > > *|std::vector< Quackle::SimmedMove > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_double_std__allocatorT_double_t_t = {"_p_std__vectorT_double_std__allocatorT_double_t_t", "std::vector< double,std::allocator< double > > *|vector< double > *|std::vector< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__string_std__allocatorT_std__string_t_t = {"_p_std__vectorT_std__string_std__allocatorT_std__string_t_t", "std::vector< std::string,std::allocator< std::string > > *|vector< string > *|std::vector< std::string > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_swig__SwigPyIterator = {"_p_swig__SwigPyIterator", "swig::SwigPyIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "Quackle::Letter *|unsigned char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "unsigned int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_value_type = {"_p_value_type", "value_type *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_QString,
  &_swigt__p_QTextStream,
  &_swigt__p_QuackleIO__FlexibleAlphabetParameters,
  &_swigt__p_QuackleIO__GCGIO,
  &_swigt__p_QuackleIO__Logania,
  &_swigt__p_QuackleIO__Util,
  &_swigt__p_QuackleIO__UtilSettings,
  &_swigt__p_Quackle__AlphabetParameters,
  &_swigt__p_Quackle__AveragedValue,
  &_swigt__p_Quackle__Bag,
  &_swigt__p_Quackle__Board,
  &_swigt__p_Quackle__BoardParameters,
  &_swigt__p_Quackle__Board__TileInformation,
  &_swigt__p_Quackle__CatchallEvaluator,
  &_swigt__p_Quackle__ComputerDispatch,
  &_swigt__p_Quackle__ComputerParameters,
  &_swigt__p_Quackle__ComputerPlayer,
  &_swigt__p_Quackle__ComputerPlayerCollection,
  &_swigt__p_Quackle__DataManager,
  &_swigt__p_Quackle__Endgame,
  &_swigt__p_Quackle__EndgameMove,
  &_swigt__p_Quackle__EndgameMoveList,
  &_swigt__p_Quackle__EndgamePlayer,
  &_swigt__p_Quackle__EnglishAlphabetParameters,
  &_swigt__p_Quackle__EnglishBoard,
  &_swigt__p_Quackle__EnglishParameters,
  &_swigt__p_Quackle__Enumerator,
  &_swigt__p_Quackle__Evaluator,
  &_swigt__p_Quackle__ExtensionWithInfo,
  &_swigt__p_Quackle__FiveMinutePlayer,
  &_swigt__p_Quackle__FixedLengthString,
  &_swigt__p_Quackle__GaddagNode,
  &_swigt__p_Quackle__Game,
  &_swigt__p_Quackle__GameParameters,
  &_swigt__p_Quackle__GamePosition,
  &_swigt__p_Quackle__Generator,
  &_swigt__p_Quackle__History,
  &_swigt__p_Quackle__HistoryLocation,
  &_swigt__p_Quackle__InferringPlayer,
  &_swigt__p_Quackle__LetterParameter,
  &_swigt__p_Quackle__Level,
  &_swigt__p_Quackle__LevelList,
  &_swigt__p_Quackle__LexiconInterpreter,
  &_swigt__p_Quackle__LexiconParameters,
  &_swigt__p_Quackle__Move,
  &_swigt__p_Quackle__MoveList,
  &_swigt__p_Quackle__Player,
  &_swigt__p_Quackle__PlayerList,
  &_swigt__p_Quackle__PositionStatistics,
  &_swigt__p_Quackle__Preendgame,
  &_swigt__p_Quackle__ProbableRack,
  &_swigt__p_Quackle__Rack,
  &_swigt__p_Quackle__Reporter,
  &_swigt__p_Quackle__Resolvent,
  &_swigt__p_Quackle__ScalingDispatch,
  &_swigt__p_Quackle__ScorePlusLeaveEvaluator,
  &_swigt__p_Quackle__SimmedMove,
  &_swigt__p_Quackle__SimmedMoveConstants,
  &_swigt__p_Quackle__SimmedMoveMessage,
  &_swigt__p_Quackle__SimmedMoveMessageQueue,
  &_swigt__p_Quackle__Simulator,
  &_swigt__p_Quackle__SmartBogowin,
  &_swigt__p_Quackle__StaticPlayer,
  &_swigt__p_Quackle__Stopwatch,
  &_swigt__p_Quackle__StrategyParameters,
  &_swigt__p_Quackle__TorontoPlayer,
  &_swigt__p_Quackle__TwentySecondPlayer,
  &_swigt__p_Quackle__WordWithInfo,
  &_swigt__p_allocator_type,
  &_swigt__p_bool,
  &_swigt__p_char,
  &_swigt__p_difference_type,
  &_swigt__p_int,
  &_swigt__p_long_double,
  &_swigt__p_p_PyObject,
  &_swigt__p_size_type,
  &_swigt__p_std__allocatorT_Quackle__FixedLengthString_t,
  &_swigt__p_std__allocatorT_Quackle__GamePosition_t,
  &_swigt__p_std__allocatorT_Quackle__LetterParameter_t,
  &_swigt__p_std__allocatorT_Quackle__Move_t,
  &_swigt__p_std__allocatorT_Quackle__Player_t,
  &_swigt__p_std__allocatorT_Quackle__ProbableRack_t,
  &_swigt__p_std__bitsetT_55_t,
  &_swigt__p_std__ifstream,
  &_swigt__p_std__invalid_argument,
  &_swigt__p_std__istream,
  &_swigt__p_std__istringstream,
  &_swigt__p_std__ofstream,
  &_swigt__p_std__ostream,
  &_swigt__p_std__ostringstream,
  &_swigt__p_std__seed_seq,
  &_swigt__p_std__string,
  &_swigt__p_std__stringstream,
  &_swigt__p_std__thread__id,
  &_swigt__p_std__vectorT_Quackle__ExtensionWithInfo_std__allocatorT_Quackle__ExtensionWithInfo_t_t,
  &_swigt__p_std__vectorT_Quackle__GamePosition_t,
  &_swigt__p_std__vectorT_Quackle__LetterParameter_t,
  &_swigt__p_std__vectorT_Quackle__LetterString_t,
  &_swigt__p_std__vectorT_Quackle__Move_t,
  &_swigt__p_std__vectorT_Quackle__Player_t,
  &_swigt__p_std__vectorT_Quackle__PositionStatistics_std__allocatorT_Quackle__PositionStatistics_t_t,
  &_swigt__p_std__vectorT_Quackle__ProbableRack_t,
  &_swigt__p_std__vectorT_Quackle__SimmedMove_std__allocatorT_Quackle__SimmedMove_t_t,
  &_swigt__p_std__vectorT_double_std__allocatorT_double_t_t,
  &_swigt__p_std__vectorT_std__string_std__allocatorT_std__string_t_t,
  &_swigt__p_swig__SwigPyIterator,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_value_type,
};

static swig_cast_info _swigc__p_QString[] = {  {&_swigt__p_QString, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_QTextStream[] = {  {&_swigt__p_QTextStream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_QuackleIO__FlexibleAlphabetParameters[] = {  {&_swigt__p_QuackleIO__FlexibleAlphabetParameters, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_QuackleIO__GCGIO[] = {  {&_swigt__p_QuackleIO__GCGIO, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_QuackleIO__Logania[] = {  {&_swigt__p_QuackleIO__Logania, 0, 0, 0},  {&_swigt__p_QuackleIO__GCGIO, _p_QuackleIO__GCGIOTo_p_QuackleIO__Logania, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_QuackleIO__Util[] = {  {&_swigt__p_QuackleIO__Util, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_QuackleIO__UtilSettings[] = {  {&_swigt__p_QuackleIO__UtilSettings, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Quackle__AlphabetParameters[] = {  {&_swigt__p_Quackle__AlphabetParameters, 0, 0, 0},  {&_swigt__p_QuackleIO__FlexibleAlphabetParameters, _p_QuackleIO__FlexibleAlphabetParametersTo_p_Quackle__AlphabetParameters, 0, 0},  {&_swigt__p_Quackle__EnglishAlphabetParameters, _p_Quackle__EnglishAlphabetParametersTo_p_Quackle__AlphabetParameters, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Quackle__AveragedValue[] = {  {&_swigt__p_Quackle__AveragedValue, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Quackle__Bag[] = {  {&_swigt__p_Quackle__Bag, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Quackle__Board[] = {  {&_swigt__p_Quackle__Board, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Quackle__BoardParameters[] = {  {&_swigt__p_Quackle__BoardParameters, 0, 0, 0},  {&_swigt__p_Quackle__EnglishBoard, _p_Quackle__EnglishBoardTo_p_Quackle__BoardParameters, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Quackle__Board__TileInformation[] = {  {&_swigt__p_Quackle__Board__TileInformation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Quackle__CatchallEvaluator[] = {  {&_swigt__p_Quackle__CatchallEvaluator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Quackle__ComputerDispatch[] = {  {&_swigt__p_Quackle__ComputerDispatch, 0, 0, 0},  {&_swigt__p_Quackle__ScalingDispatch, _p_Quackle__ScalingDispatchTo_p_Quackle__ComputerDispatch, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Quackle__ComputerParameters[] = {  {&_swigt__p_Quackle__ComputerParameters, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Quackle__ComputerPlayer[] = {  {&_swigt__p_Quackle__ComputerPlayer, 0, 0, 0},  {&_swigt__p_Quackle__EndgamePlayer, _p_Quackle__EndgamePlayerTo_p_Quackle__ComputerPlayer, 0, 0},  {&_swigt__p_Quackle__FiveMinutePlayer, _p_Quackle__FiveMinutePlayerTo_p_Quackle__ComputerPlayer, 0, 0},  {&_swigt__p_Quackle__InferringPlayer, _p_Quackle__InferringPlayerTo_p_Quackle__ComputerPlayer, 0, 0},  {&_swigt__p_Quackle__Preendgame, _p_Quackle__PreendgameTo_p_Quackle__ComputerPlayer, 0, 0},  {&_swigt__p_Quackle__Resolvent, _p_Quackle__ResolventTo_p_Quackle__ComputerPlayer, 0, 0},  {&_swigt__p_Quackle__SmartBogowin, _p_Quackle__SmartBogowinTo_p_Quackle__ComputerPlayer, 0, 0},  {&_swigt__p_Quackle__StaticPlayer, _p_Quackle__StaticPlayerTo_p_Quackle__ComputerPlayer, 0, 0},  {&_swigt__p_Quackle__TorontoPlayer, _p_Quackle__TorontoPlayerTo_p_Quackle__ComputerPlayer, 0, 0},  {&_swigt__p_Quackle__TwentySecondPlayer, _p_Quackle__TwentySecondPlayerTo_p_Quackle__ComputerPlayer, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Quackle__ComputerPlayerCollection[] = {  {&_swigt__p_Quackle__ComputerPlayerCollection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Quackle__DataManager[] = {  {&_swigt__p_Quackle__DataManager, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Quackle__Endgame[] = {  {&_swigt__p_Quackle__Endgame, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Quackle__EndgameMove[] = {  {&_swigt__p_Quackle__EndgameMove, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Quackle__EndgameMoveList[] = {  {&_swigt__p_Quackle__EndgameMoveList, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Quackle__EndgamePlayer[] = {  {&_swigt__p_Quackle__EndgamePlayer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Quackle__EnglishAlphabetParameters[] = {  {&_swigt__p_Quackle__EnglishAlphabetParameters, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Quackle__EnglishBoard[] = {  {&_swigt__p_Quackle__EnglishBoard, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Quackle__EnglishParameters[] = {  {&_swigt__p_Quackle__EnglishParameters, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Quackle__Enumerator[] = {  {&_swigt__p_Quackle__Enumerator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Quackle__Evaluator[] = {  {&_swigt__p_Quackle__Evaluator, 0, 0, 0},  {&_swigt__p_Quackle__CatchallEvaluator, _p_Quackle__CatchallEvaluatorTo_p_Quackle__Evaluator, 0, 0},  {&_swigt__p_Quackle__ScorePlusLeaveEvaluator, _p_Quackle__ScorePlusLeaveEvaluatorTo_p_Quackle__Evaluator, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Quackle__ExtensionWithInfo[] = {  {&_swigt__p_Quackle__ExtensionWithInfo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Quackle__FiveMinutePlayer[] = {  {&_swigt__p_Quackle__FiveMinutePlayer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Quackle__FixedLengthString[] = {  {&_swigt__p_Quackle__FixedLengthString, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Quackle__GaddagNode[] = {  {&_swigt__p_Quackle__GaddagNode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Quackle__Game[] = {  {&_swigt__p_Quackle__Game, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Quackle__GameParameters[] = {  {&_swigt__p_Quackle__GameParameters, 0, 0, 0},  {&_swigt__p_Quackle__EnglishParameters, _p_Quackle__EnglishParametersTo_p_Quackle__GameParameters, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Quackle__GamePosition[] = {  {&_swigt__p_Quackle__GamePosition, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Quackle__Generator[] = {  {&_swigt__p_Quackle__Generator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Quackle__History[] = {  {&_swigt__p_Quackle__History, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Quackle__HistoryLocation[] = {  {&_swigt__p_Quackle__HistoryLocation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Quackle__InferringPlayer[] = {  {&_swigt__p_Quackle__InferringPlayer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Quackle__LetterParameter[] = {  {&_swigt__p_Quackle__LetterParameter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Quackle__Level[] = {  {&_swigt__p_Quackle__Level, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Quackle__LevelList[] = {  {&_swigt__p_Quackle__LevelList, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Quackle__LexiconInterpreter[] = {  {&_swigt__p_Quackle__LexiconInterpreter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Quackle__LexiconParameters[] = {  {&_swigt__p_Quackle__LexiconParameters, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Quackle__Move[] = {  {&_swigt__p_Quackle__Move, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Quackle__MoveList[] = {  {&_swigt__p_Quackle__MoveList, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Quackle__Player[] = {  {&_swigt__p_Quackle__Player, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Quackle__PlayerList[] = {  {&_swigt__p_Quackle__PlayerList, 0, 0, 0},  {&_swigt__p_Quackle__ComputerPlayerCollection, _p_Quackle__ComputerPlayerCollectionTo_p_Quackle__PlayerList, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Quackle__PositionStatistics[] = {  {&_swigt__p_Quackle__PositionStatistics, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Quackle__Preendgame[] = {  {&_swigt__p_Quackle__Preendgame, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Quackle__ProbableRack[] = {  {&_swigt__p_Quackle__ProbableRack, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Quackle__Rack[] = {  {&_swigt__p_Quackle__Rack, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Quackle__Reporter[] = {  {&_swigt__p_Quackle__Reporter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Quackle__Resolvent[] = {  {&_swigt__p_Quackle__Resolvent, 0, 0, 0},  {&_swigt__p_Quackle__FiveMinutePlayer, _p_Quackle__FiveMinutePlayerTo_p_Quackle__Resolvent, 0, 0},  {&_swigt__p_Quackle__InferringPlayer, _p_Quackle__InferringPlayerTo_p_Quackle__Resolvent, 0, 0},  {&_swigt__p_Quackle__TorontoPlayer, _p_Quackle__TorontoPlayerTo_p_Quackle__Resolvent, 0, 0},  {&_swigt__p_Quackle__TwentySecondPlayer, _p_Quackle__TwentySecondPlayerTo_p_Quackle__Resolvent, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Quackle__ScalingDispatch[] = {  {&_swigt__p_Quackle__ScalingDispatch, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Quackle__ScorePlusLeaveEvaluator[] = {  {&_swigt__p_Quackle__ScorePlusLeaveEvaluator, 0, 0, 0},  {&_swigt__p_Quackle__CatchallEvaluator, _p_Quackle__CatchallEvaluatorTo_p_Quackle__ScorePlusLeaveEvaluator, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Quackle__SimmedMove[] = {  {&_swigt__p_Quackle__SimmedMove, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Quackle__SimmedMoveConstants[] = {  {&_swigt__p_Quackle__SimmedMoveConstants, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Quackle__SimmedMoveMessage[] = {  {&_swigt__p_Quackle__SimmedMoveMessage, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Quackle__SimmedMoveMessageQueue[] = {  {&_swigt__p_Quackle__SimmedMoveMessageQueue, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Quackle__Simulator[] = {  {&_swigt__p_Quackle__Simulator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Quackle__SmartBogowin[] = {  {&_swigt__p_Quackle__SmartBogowin, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Quackle__StaticPlayer[] = {  {&_swigt__p_Quackle__StaticPlayer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Quackle__Stopwatch[] = {  {&_swigt__p_Quackle__Stopwatch, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Quackle__StrategyParameters[] = {  {&_swigt__p_Quackle__StrategyParameters, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Quackle__TorontoPlayer[] = {  {&_swigt__p_Quackle__TorontoPlayer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Quackle__TwentySecondPlayer[] = {  {&_swigt__p_Quackle__TwentySecondPlayer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Quackle__WordWithInfo[] = {  {&_swigt__p_Quackle__WordWithInfo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_allocator_type[] = {  {&_swigt__p_allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bool[] = {  {&_swigt__p_bool, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_difference_type[] = {  {&_swigt__p_difference_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long_double[] = {  {&_swigt__p_long_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_PyObject[] = {  {&_swigt__p_p_PyObject, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_type[] = {  {&_swigt__p_size_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_Quackle__FixedLengthString_t[] = {  {&_swigt__p_std__allocatorT_Quackle__FixedLengthString_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_Quackle__GamePosition_t[] = {  {&_swigt__p_std__allocatorT_Quackle__GamePosition_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_Quackle__LetterParameter_t[] = {  {&_swigt__p_std__allocatorT_Quackle__LetterParameter_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_Quackle__Move_t[] = {  {&_swigt__p_std__allocatorT_Quackle__Move_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_Quackle__Player_t[] = {  {&_swigt__p_std__allocatorT_Quackle__Player_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_Quackle__ProbableRack_t[] = {  {&_swigt__p_std__allocatorT_Quackle__ProbableRack_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__bitsetT_55_t[] = {  {&_swigt__p_std__bitsetT_55_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__ifstream[] = {  {&_swigt__p_std__ifstream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__invalid_argument[] = {  {&_swigt__p_std__invalid_argument, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__istream[] = {  {&_swigt__p_std__istream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__istringstream[] = {  {&_swigt__p_std__istringstream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__ofstream[] = {  {&_swigt__p_std__ofstream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__ostream[] = {  {&_swigt__p_std__ostream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__ostringstream[] = {  {&_swigt__p_std__ostringstream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__seed_seq[] = {  {&_swigt__p_std__seed_seq, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__string[] = {  {&_swigt__p_std__string, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__stringstream[] = {  {&_swigt__p_std__stringstream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__thread__id[] = {  {&_swigt__p_std__thread__id, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_Quackle__ExtensionWithInfo_std__allocatorT_Quackle__ExtensionWithInfo_t_t[] = {  {&_swigt__p_std__vectorT_Quackle__ExtensionWithInfo_std__allocatorT_Quackle__ExtensionWithInfo_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_Quackle__GamePosition_t[] = {  {&_swigt__p_std__vectorT_Quackle__GamePosition_t, 0, 0, 0},  {&_swigt__p_Quackle__History, _p_Quackle__HistoryTo_p_std__vectorT_Quackle__GamePosition_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_Quackle__LetterParameter_t[] = {  {&_swigt__p_std__vectorT_Quackle__LetterParameter_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_Quackle__LetterString_t[] = {  {&_swigt__p_std__vectorT_Quackle__LetterString_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_Quackle__Move_t[] = {  {&_swigt__p_std__vectorT_Quackle__Move_t, 0, 0, 0},  {&_swigt__p_Quackle__MoveList, _p_Quackle__MoveListTo_p_std__vectorT_Quackle__Move_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_Quackle__Player_t[] = {  {&_swigt__p_std__vectorT_Quackle__Player_t, 0, 0, 0},  {&_swigt__p_Quackle__ComputerPlayerCollection, _p_Quackle__ComputerPlayerCollectionTo_p_std__vectorT_Quackle__Player_t, 0, 0},  {&_swigt__p_Quackle__PlayerList, _p_Quackle__PlayerListTo_p_std__vectorT_Quackle__Player_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_Quackle__PositionStatistics_std__allocatorT_Quackle__PositionStatistics_t_t[] = {  {&_swigt__p_std__vectorT_Quackle__PositionStatistics_std__allocatorT_Quackle__PositionStatistics_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_Quackle__ProbableRack_t[] = {  {&_swigt__p_std__vectorT_Quackle__ProbableRack_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_Quackle__SimmedMove_std__allocatorT_Quackle__SimmedMove_t_t[] = {  {&_swigt__p_std__vectorT_Quackle__SimmedMove_std__allocatorT_Quackle__SimmedMove_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_double_std__allocatorT_double_t_t[] = {  {&_swigt__p_std__vectorT_double_std__allocatorT_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__string_std__allocatorT_std__string_t_t[] = {  {&_swigt__p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_swig__SwigPyIterator[] = {  {&_swigt__p_swig__SwigPyIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_value_type[] = {  {&_swigt__p_value_type, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_QString,
  _swigc__p_QTextStream,
  _swigc__p_QuackleIO__FlexibleAlphabetParameters,
  _swigc__p_QuackleIO__GCGIO,
  _swigc__p_QuackleIO__Logania,
  _swigc__p_QuackleIO__Util,
  _swigc__p_QuackleIO__UtilSettings,
  _swigc__p_Quackle__AlphabetParameters,
  _swigc__p_Quackle__AveragedValue,
  _swigc__p_Quackle__Bag,
  _swigc__p_Quackle__Board,
  _swigc__p_Quackle__BoardParameters,
  _swigc__p_Quackle__Board__TileInformation,
  _swigc__p_Quackle__CatchallEvaluator,
  _swigc__p_Quackle__ComputerDispatch,
  _swigc__p_Quackle__ComputerParameters,
  _swigc__p_Quackle__ComputerPlayer,
  _swigc__p_Quackle__ComputerPlayerCollection,
  _swigc__p_Quackle__DataManager,
  _swigc__p_Quackle__Endgame,
  _swigc__p_Quackle__EndgameMove,
  _swigc__p_Quackle__EndgameMoveList,
  _swigc__p_Quackle__EndgamePlayer,
  _swigc__p_Quackle__EnglishAlphabetParameters,
  _swigc__p_Quackle__EnglishBoard,
  _swigc__p_Quackle__EnglishParameters,
  _swigc__p_Quackle__Enumerator,
  _swigc__p_Quackle__Evaluator,
  _swigc__p_Quackle__ExtensionWithInfo,
  _swigc__p_Quackle__FiveMinutePlayer,
  _swigc__p_Quackle__FixedLengthString,
  _swigc__p_Quackle__GaddagNode,
  _swigc__p_Quackle__Game,
  _swigc__p_Quackle__GameParameters,
  _swigc__p_Quackle__GamePosition,
  _swigc__p_Quackle__Generator,
  _swigc__p_Quackle__History,
  _swigc__p_Quackle__HistoryLocation,
  _swigc__p_Quackle__InferringPlayer,
  _swigc__p_Quackle__LetterParameter,
  _swigc__p_Quackle__Level,
  _swigc__p_Quackle__LevelList,
  _swigc__p_Quackle__LexiconInterpreter,
  _swigc__p_Quackle__LexiconParameters,
  _swigc__p_Quackle__Move,
  _swigc__p_Quackle__MoveList,
  _swigc__p_Quackle__Player,
  _swigc__p_Quackle__PlayerList,
  _swigc__p_Quackle__PositionStatistics,
  _swigc__p_Quackle__Preendgame,
  _swigc__p_Quackle__ProbableRack,
  _swigc__p_Quackle__Rack,
  _swigc__p_Quackle__Reporter,
  _swigc__p_Quackle__Resolvent,
  _swigc__p_Quackle__ScalingDispatch,
  _swigc__p_Quackle__ScorePlusLeaveEvaluator,
  _swigc__p_Quackle__SimmedMove,
  _swigc__p_Quackle__SimmedMoveConstants,
  _swigc__p_Quackle__SimmedMoveMessage,
  _swigc__p_Quackle__SimmedMoveMessageQueue,
  _swigc__p_Quackle__Simulator,
  _swigc__p_Quackle__SmartBogowin,
  _swigc__p_Quackle__StaticPlayer,
  _swigc__p_Quackle__Stopwatch,
  _swigc__p_Quackle__StrategyParameters,
  _swigc__p_Quackle__TorontoPlayer,
  _swigc__p_Quackle__TwentySecondPlayer,
  _swigc__p_Quackle__WordWithInfo,
  _swigc__p_allocator_type,
  _swigc__p_bool,
  _swigc__p_char,
  _swigc__p_difference_type,
  _swigc__p_int,
  _swigc__p_long_double,
  _swigc__p_p_PyObject,
  _swigc__p_size_type,
  _swigc__p_std__allocatorT_Quackle__FixedLengthString_t,
  _swigc__p_std__allocatorT_Quackle__GamePosition_t,
  _swigc__p_std__allocatorT_Quackle__LetterParameter_t,
  _swigc__p_std__allocatorT_Quackle__Move_t,
  _swigc__p_std__allocatorT_Quackle__Player_t,
  _swigc__p_std__allocatorT_Quackle__ProbableRack_t,
  _swigc__p_std__bitsetT_55_t,
  _swigc__p_std__ifstream,
  _swigc__p_std__invalid_argument,
  _swigc__p_std__istream,
  _swigc__p_std__istringstream,
  _swigc__p_std__ofstream,
  _swigc__p_std__ostream,
  _swigc__p_std__ostringstream,
  _swigc__p_std__seed_seq,
  _swigc__p_std__string,
  _swigc__p_std__stringstream,
  _swigc__p_std__thread__id,
  _swigc__p_std__vectorT_Quackle__ExtensionWithInfo_std__allocatorT_Quackle__ExtensionWithInfo_t_t,
  _swigc__p_std__vectorT_Quackle__GamePosition_t,
  _swigc__p_std__vectorT_Quackle__LetterParameter_t,
  _swigc__p_std__vectorT_Quackle__LetterString_t,
  _swigc__p_std__vectorT_Quackle__Move_t,
  _swigc__p_std__vectorT_Quackle__Player_t,
  _swigc__p_std__vectorT_Quackle__PositionStatistics_std__allocatorT_Quackle__PositionStatistics_t_t,
  _swigc__p_std__vectorT_Quackle__ProbableRack_t,
  _swigc__p_std__vectorT_Quackle__SimmedMove_std__allocatorT_Quackle__SimmedMove_t_t,
  _swigc__p_std__vectorT_double_std__allocatorT_double_t_t,
  _swigc__p_std__vectorT_std__string_std__allocatorT_std__string_t_t,
  _swigc__p_swig__SwigPyIterator,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_value_type,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{0, 0, 0, 0.0, 0, 0}};

#ifdef __cplusplus
}
#endif
/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif

#ifndef SWIG_INIT_CLIENT_DATA_TYPE
#define SWIG_INIT_CLIENT_DATA_TYPE void *
#endif

SWIGRUNTIME void
SWIG_InitializeModule(SWIG_INIT_CLIENT_DATA_TYPE clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;
  
  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }
  
  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);
    
    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }
  
  /* When multiple interpreters are used, a module could have already been initialized in
       a different interpreter, but not yet have a pointer in this interpreter.
       In this case, we do not want to continue adding types... everything should be
       set up already */
  if (init == 0) return;
  
  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %lu\n", (unsigned long)swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
    
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
#endif
    
    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
        type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }
    
    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
        if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
        if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
          printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
          cast->type = ret;
          ret = 0;
        } else {
          /* Check for casting already in the list */
          swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
          if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
          if (!ocast) ret = 0;
        }
      }
      
      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;
  
#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
    printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;
  
  if (init_run) return;
  init_run = 1;
  
  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
          SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{
  /* c-mode */
#endif
}
#endif



#ifdef __cplusplus
extern "C" {
#endif
  
  /* -----------------------------------------------------------------------------
   * constants/methods manipulation
   * ----------------------------------------------------------------------------- */
  
  /* Install Constants */
  SWIGINTERN void
  SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
    PyObject *obj = 0;
    size_t i;
    for (i = 0; constants[i].type; ++i) {
      switch(constants[i].type) {
      case SWIG_PY_POINTER:
        obj = SWIG_InternalNewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
        break;
      case SWIG_PY_BINARY:
        obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
        break;
      default:
        obj = 0;
        break;
      }
      if (obj) {
        PyDict_SetItemString(d, constants[i].name, obj);
        Py_DECREF(obj);
      }
    }
  }
  
  /* -----------------------------------------------------------------------------
   * Patch %callback methods' docstrings to hold the callback ptrs
   * -----------------------------------------------------------------------------*/
  
  SWIGINTERN void
  SWIG_Python_FixMethods(PyMethodDef *methods, const swig_const_info *const_table, swig_type_info **types, swig_type_info **types_initial) {
    size_t i;
    for (i = 0; methods[i].ml_name; ++i) {
      const char *c = methods[i].ml_doc;
      if (!c) continue;
      c = strstr(c, "swig_ptr: ");
      if (c) {
        int j;
        const swig_const_info *ci = 0;
        const char *name = c + 10;
        for (j = 0; const_table[j].type; ++j) {
          if (strncmp(const_table[j].name, name, 
              strlen(const_table[j].name)) == 0) {
            ci = &(const_table[j]);
            break;
          }
        }
        if (ci) {
          void *ptr = (ci->type == SWIG_PY_POINTER) ? ci->pvalue : 0;
          if (ptr) {
            size_t shift = (ci->ptype) - types;
            swig_type_info *ty = types_initial[shift];
            size_t ldoc = (c - methods[i].ml_doc);
            size_t lptr = strlen(ty->name)+2*sizeof(void*)+2;
            char *ndoc = (char*)malloc(ldoc + lptr + 10);
            if (ndoc) {
              char *buff = ndoc;
              memcpy(buff, methods[i].ml_doc, ldoc);
              buff += ldoc;
              memcpy(buff, "swig_ptr: ", 10);
              buff += 10;
              SWIG_PackVoidPtr(buff, ptr, ty->name, lptr);
              methods[i].ml_doc = ndoc;
            }
          }
        }
      }
    }
  } 
  
#ifdef __cplusplus
}
#endif




/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

#ifdef __cplusplus
extern "C"
#endif

SWIGEXPORT 
#if PY_VERSION_HEX >= 0x03000000
PyObject*
#else
void
#endif
SWIG_init(void) {
  PyObject *m, *d, *md, *globals;
  
#if PY_VERSION_HEX >= 0x03000000
  static struct PyModuleDef SWIG_module = {
    PyModuleDef_HEAD_INIT,
    SWIG_name,
    NULL,
    -1,
    SwigMethods,
    NULL,
    NULL,
    NULL,
    NULL
  };
#endif
  
#if defined(SWIGPYTHON_BUILTIN)
  static SwigPyClientData SwigPyObject_clientdata = {
    0, 0, 0, 0, 0, 0, 0
  };
  static PyGetSetDef this_getset_def = {
    (char *)"this", &SwigPyBuiltin_ThisClosure, NULL, NULL, NULL
  };
  static SwigPyGetSet thisown_getset_closure = {
    SwigPyObject_own,
    SwigPyObject_own
  };
  static PyGetSetDef thisown_getset_def = {
    (char *)"thisown", SwigPyBuiltin_GetterClosure, SwigPyBuiltin_SetterClosure, NULL, &thisown_getset_closure
  };
  PyTypeObject *builtin_pytype;
  int builtin_base_count;
  swig_type_info *builtin_basetype;
  PyObject *tuple;
  PyGetSetDescrObject *static_getset;
  PyTypeObject *metatype;
  PyTypeObject *swigpyobject;
  SwigPyClientData *cd;
  PyObject *public_interface, *public_symbol;
  PyObject *this_descr;
  PyObject *thisown_descr;
  PyObject *self = 0;
  int i;
  
  (void)builtin_pytype;
  (void)builtin_base_count;
  (void)builtin_basetype;
  (void)tuple;
  (void)static_getset;
  (void)self;
  
  /* Metaclass is used to implement static member variables */
  metatype = SwigPyObjectType();
  assert(metatype);
#endif
  
  (void)globals;
  
  /* Create singletons now to avoid potential deadlocks with multi-threaded usage after module initialization */
  SWIG_This();
  SWIG_Python_TypeCache();
  SwigPyPacked_type();
#ifndef SWIGPYTHON_BUILTIN
  SwigPyObject_type();
#endif
  
  /* Fix SwigMethods to carry the callback ptrs when needed */
  SWIG_Python_FixMethods(SwigMethods, swig_const_table, swig_types, swig_type_initial);
  
#if PY_VERSION_HEX >= 0x03000000
  m = PyModule_Create(&SWIG_module);
#else
  m = Py_InitModule(SWIG_name, SwigMethods);
#endif
  
  md = d = PyModule_GetDict(m);
  (void)md;
  
  SWIG_InitializeModule(0);
  
#ifdef SWIGPYTHON_BUILTIN
  swigpyobject = SwigPyObject_TypeOnce();
  
  SwigPyObject_stype = SWIG_MangledTypeQuery("_p_SwigPyObject");
  assert(SwigPyObject_stype);
  cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
  if (!cd) {
    SwigPyObject_stype->clientdata = &SwigPyObject_clientdata;
    SwigPyObject_clientdata.pytype = swigpyobject;
  } else if (swigpyobject->tp_basicsize != cd->pytype->tp_basicsize) {
    PyErr_SetString(PyExc_RuntimeError, "Import error: attempted to load two incompatible swig-generated modules.");
# if PY_VERSION_HEX >= 0x03000000
    return NULL;
# else
    return;
# endif
  }
  
  /* All objects have a 'this' attribute */
  this_descr = PyDescr_NewGetSet(SwigPyObject_type(), &this_getset_def);
  (void)this_descr;
  
  /* All objects have a 'thisown' attribute */
  thisown_descr = PyDescr_NewGetSet(SwigPyObject_type(), &thisown_getset_def);
  (void)thisown_descr;
  
  public_interface = PyList_New(0);
  public_symbol = 0;
  (void)public_symbol;
  
  PyDict_SetItemString(md, "__all__", public_interface);
  Py_DECREF(public_interface);
  for (i = 0; SwigMethods[i].ml_name != NULL; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, SwigMethods[i].ml_name);
  for (i = 0; swig_const_table[i].name != 0; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, swig_const_table[i].name);
#endif
  
  SWIG_InstallConstants(d,swig_const_table);
  
  SWIG_Python_SetConstant(d, "FIXED_STRING_MAXIMUM_LENGTH",SWIG_From_int(static_cast< int >(40)));
  SWIG_Python_SetConstant(d, "FixedLengthString_maxSize",SWIG_From_unsigned_SS_int(static_cast< unsigned int >(Quackle::FixedLengthString::maxSize)));
  SWIG_Python_SetConstant(d, "QUACKLE_USE_WCHAR_FOR_USER_VISIBLE",SWIG_From_int(static_cast< int >(0)));
  SWIG_Python_SetConstant(d, "QUACKLE_MAXIMUM_ALPHABET_SIZE",SWIG_From_int(static_cast< int >(55)));
  SWIG_Python_SetConstant(d, "QUACKLE_MINIMUM_ALPHABET_SIZE",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "QUACKLE_NULL_MARK_TEXT",SWIG_FromCharPtr(" "));
  SWIG_Python_SetConstant(d, "QUACKLE_NULL_MARK",SWIG_From_int(static_cast< int >(0)));
  SWIG_Python_SetConstant(d, "QUACKLE_BLANK_MARK",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "QUACKLE_PLAYED_THRU_MARK",SWIG_From_int(static_cast< int >(2)));
  SWIG_Python_SetConstant(d, "QUACKLE_PLAYTHRU_START_MARK",SWIG_From_int(static_cast< int >(3)));
  SWIG_Python_SetConstant(d, "QUACKLE_PLAYTHRU_END_MARK",SWIG_From_int(static_cast< int >(4)));
  SWIG_Python_SetConstant(d, "QUACKLE_FIRST_LETTER",SWIG_From_int(static_cast< int >(5)));
  SWIG_Python_SetConstant(d, "QUACKLE_BLANK_OFFSET",SWIG_From_int(static_cast< int >(55)));
  SWIG_Python_SetConstant(d, "LETTER_STRING_MAXIMUM_LENGTH",SWIG_From_int(static_cast< int >(40)));
  
  // thread safe initialization
  swig::container_owner_attribute();
  
  SWIG_Python_SetConstant(d, "Move_Place",SWIG_From_int(static_cast< int >(Quackle::Move::Place)));
  SWIG_Python_SetConstant(d, "Move_PlaceError",SWIG_From_int(static_cast< int >(Quackle::Move::PlaceError)));
  SWIG_Python_SetConstant(d, "Move_Exchange",SWIG_From_int(static_cast< int >(Quackle::Move::Exchange)));
  SWIG_Python_SetConstant(d, "Move_BlindExchange",SWIG_From_int(static_cast< int >(Quackle::Move::BlindExchange)));
  SWIG_Python_SetConstant(d, "Move_Pass",SWIG_From_int(static_cast< int >(Quackle::Move::Pass)));
  SWIG_Python_SetConstant(d, "Move_UnusedTilesBonus",SWIG_From_int(static_cast< int >(Quackle::Move::UnusedTilesBonus)));
  SWIG_Python_SetConstant(d, "Move_UnusedTilesBonusError",SWIG_From_int(static_cast< int >(Quackle::Move::UnusedTilesBonusError)));
  SWIG_Python_SetConstant(d, "Move_TimePenalty",SWIG_From_int(static_cast< int >(Quackle::Move::TimePenalty)));
  SWIG_Python_SetConstant(d, "Move_Nonmove",SWIG_From_int(static_cast< int >(Quackle::Move::Nonmove)));
  SWIG_Python_SetConstant(d, "MoveList_Equity",SWIG_From_int(static_cast< int >(Quackle::MoveList::Equity)));
  SWIG_Python_SetConstant(d, "MoveList_Score",SWIG_From_int(static_cast< int >(Quackle::MoveList::Score)));
  SWIG_Python_SetConstant(d, "MoveList_Alphabetical",SWIG_From_int(static_cast< int >(Quackle::MoveList::Alphabetical)));
  SWIG_Python_SetConstant(d, "MoveList_Win",SWIG_From_int(static_cast< int >(Quackle::MoveList::Win)));
  SWIG_Python_SetConstant(d, "QUACKLE_MAXIMUM_BOARD_SIZE",SWIG_From_int(static_cast< int >(40)));
  SWIG_Python_SetConstant(d, "QUACKLE_MINIMUM_BOARD_SIZE",SWIG_From_int(static_cast< int >(7)));
  SWIG_Python_SetConstant(d, "Board_LetterTile",SWIG_From_int(static_cast< int >(Quackle::Board::LetterTile)));
  SWIG_Python_SetConstant(d, "Board_BonusSquareTile",SWIG_From_int(static_cast< int >(Quackle::Board::BonusSquareTile)));
  SWIG_Python_SetConstant(d, "Board_NothingTile",SWIG_From_int(static_cast< int >(Quackle::Board::NothingTile)));
  SWIG_Python_SetConstant(d, "Board_LetterBonus",SWIG_From_int(static_cast< int >(Quackle::Board::LetterBonus)));
  SWIG_Python_SetConstant(d, "Board_WordBonus",SWIG_From_int(static_cast< int >(Quackle::Board::WordBonus)));
  SWIG_Python_SetConstant(d, "Board_NoBonus",SWIG_From_int(static_cast< int >(Quackle::Board::NoBonus)));
  SWIG_Python_SetConstant(d, "BoardParameters_sls",SWIG_From_int(static_cast< int >(Quackle::BoardParameters::sls)));
  SWIG_Python_SetConstant(d, "BoardParameters_dls",SWIG_From_int(static_cast< int >(Quackle::BoardParameters::dls)));
  SWIG_Python_SetConstant(d, "BoardParameters_tls",SWIG_From_int(static_cast< int >(Quackle::BoardParameters::tls)));
  SWIG_Python_SetConstant(d, "BoardParameters_qls",SWIG_From_int(static_cast< int >(Quackle::BoardParameters::qls)));
  SWIG_Python_SetConstant(d, "BoardParameters_lsCount",SWIG_From_int(static_cast< int >(Quackle::BoardParameters::lsCount)));
  SWIG_Python_SetConstant(d, "BoardParameters_sws",SWIG_From_int(static_cast< int >(Quackle::BoardParameters::sws)));
  SWIG_Python_SetConstant(d, "BoardParameters_dws",SWIG_From_int(static_cast< int >(Quackle::BoardParameters::dws)));
  SWIG_Python_SetConstant(d, "BoardParameters_tws",SWIG_From_int(static_cast< int >(Quackle::BoardParameters::tws)));
  SWIG_Python_SetConstant(d, "BoardParameters_qws",SWIG_From_int(static_cast< int >(Quackle::BoardParameters::qws)));
  SWIG_Python_SetConstant(d, "BoardParameters_wsCount",SWIG_From_int(static_cast< int >(Quackle::BoardParameters::wsCount)));
  SWIG_Python_SetConstant(d, "Player_ComputerPlayerType",SWIG_From_int(static_cast< int >(Quackle::Player::ComputerPlayerType)));
  SWIG_Python_SetConstant(d, "Player_HumanPlayerType",SWIG_From_int(static_cast< int >(Quackle::Player::HumanPlayerType)));
  SWIG_Python_SetConstant(d, "GamePosition_ValidMove",SWIG_From_int(static_cast< int >(Quackle::GamePosition::ValidMove)));
  SWIG_Python_SetConstant(d, "GamePosition_InvalidTiles",SWIG_From_int(static_cast< int >(Quackle::GamePosition::InvalidTiles)));
  SWIG_Python_SetConstant(d, "GamePosition_TooLateExchange",SWIG_From_int(static_cast< int >(Quackle::GamePosition::TooLateExchange)));
  SWIG_Python_SetConstant(d, "GamePosition_InvalidPlace",SWIG_From_int(static_cast< int >(Quackle::GamePosition::InvalidPlace)));
  SWIG_Python_SetConstant(d, "GamePosition_InvalidOpeningPlace",SWIG_From_int(static_cast< int >(Quackle::GamePosition::InvalidOpeningPlace)));
  SWIG_Python_SetConstant(d, "GamePosition_UnacceptableWord",SWIG_From_int(static_cast< int >(Quackle::GamePosition::UnacceptableWord)));
  SWIG_Python_SetConstant(d, "GamePosition_InvalidAction",SWIG_From_int(static_cast< int >(Quackle::GamePosition::InvalidAction)));
  SWIG_Python_SetConstant(d, "GamePosition_ValidOverdraw",SWIG_From_int(static_cast< int >(Quackle::GamePosition::ValidOverdraw)));
  SWIG_Python_SetConstant(d, "GamePosition_InvalidOverdrawNumber",SWIG_From_int(static_cast< int >(Quackle::GamePosition::InvalidOverdrawNumber)));
  SWIG_Python_SetConstant(d, "GamePosition_OverdrawnTilesNotUnseen",SWIG_From_int(static_cast< int >(Quackle::GamePosition::OverdrawnTilesNotUnseen)));
  SWIG_Python_SetConstant(d, "PositionStatistics_StatisticScore",SWIG_From_int(static_cast< int >(Quackle::PositionStatistics::StatisticScore)));
  SWIG_Python_SetConstant(d, "PositionStatistics_StatisticBingos",SWIG_From_int(static_cast< int >(Quackle::PositionStatistics::StatisticBingos)));
  SWIG_Python_SetConstant(d, "QUACKLE_NULL_COMPUTER_PLAYER_ID",SWIG_From_int(static_cast< int >(0)));
  SWIG_Python_SetConstant(d, "QUACKLE_STATIC_COMPUTER_PLAYER_ID",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "Generator_RegularKibitz",SWIG_From_int(static_cast< int >(Quackle::Generator::RegularKibitz)));
  SWIG_Python_SetConstant(d, "Generator_CannotExchange",SWIG_From_int(static_cast< int >(Quackle::Generator::CannotExchange)));
  SWIG_Python_SetConstant(d, "Generator_AnagramRearrange",SWIG_From_int(static_cast< int >(Quackle::Generator::AnagramRearrange)));
  SWIG_Python_SetConstant(d, "Generator_NoRequireAllLetters",SWIG_From_int(static_cast< int >(Quackle::Generator::NoRequireAllLetters)));
  SWIG_Python_SetConstant(d, "Generator_AddAnyLetters",SWIG_From_int(static_cast< int >(Quackle::Generator::AddAnyLetters)));
  SWIG_Python_SetConstant(d, "Generator_ClearBlanknesses",SWIG_From_int(static_cast< int >(Quackle::Generator::ClearBlanknesses)));
  SWIG_Python_SetConstant(d, "Generator_SingleMatch",SWIG_From_int(static_cast< int >(Quackle::Generator::SingleMatch)));
  SWIG_Python_SetConstant(d, "QUACKLE_GADDAG_SEPARATOR",SWIG_From_int(static_cast< int >(0)));
  SWIG_Python_SetConstant(d, "Logania_BasicLoad",SWIG_From_int(static_cast< int >(QuackleIO::Logania::BasicLoad)));
  SWIG_Python_SetConstant(d, "Logania_MaintainBoardPreparation",SWIG_From_int(static_cast< int >(QuackleIO::Logania::MaintainBoardPreparation)));
#if PY_VERSION_HEX >= 0x03000000
  return m;
#else
  return;
#endif
}

